
CatchTheLightPrototypeV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  00002892  00002926  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002892  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005d  00800186  00800186  000029ac  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000029ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00002a50  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002609  00000000  00000000  00002c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001009  00000000  00000000  00005261  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016c9  00000000  00000000  0000626a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000040c  00000000  00000000  00007934  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001924  00000000  00000000  00007d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ae  00000000  00000000  00009664  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00009e12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
       4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
       8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
       c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_14>
      3c:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__vector_15>
      40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      94:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__vector_37>
      98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      b4:	c4 06       	cpc	r12, r20
      b6:	d2 06       	cpc	r13, r18
      b8:	e6 06       	cpc	r14, r22
      ba:	e9 06       	cpc	r14, r25
      bc:	ec 06       	cpc	r14, r28
      be:	ef 06       	cpc	r14, r31
      c0:	f2 06       	cpc	r15, r18
      c2:	f5 06       	cpc	r15, r21
      c4:	f8 06       	cpc	r15, r24
      c6:	fb 06       	cpc	r15, r27
      c8:	fe 06       	cpc	r15, r30
      ca:	01 07       	cpc	r16, r17

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	d8 e0       	ldi	r29, 0x08	; 8
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
      d8:	11 e0       	ldi	r17, 0x01	; 1
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b1 e0       	ldi	r27, 0x01	; 1
      de:	e2 e9       	ldi	r30, 0x92	; 146
      e0:	f8 e2       	ldi	r31, 0x28	; 40
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
      e4:	05 90       	lpm	r0, Z+
      e6:	0d 92       	st	X+, r0
      e8:	a6 38       	cpi	r26, 0x86	; 134
      ea:	b1 07       	cpc	r27, r17
      ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
      ee:	21 e0       	ldi	r18, 0x01	; 1
      f0:	a6 e8       	ldi	r26, 0x86	; 134
      f2:	b1 e0       	ldi	r27, 0x01	; 1
      f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
      f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
      f8:	a3 3e       	cpi	r26, 0xE3	; 227
      fa:	b2 07       	cpc	r27, r18
      fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
      fe:	0e 94 76 06 	call	0xcec	; 0xcec <main>
     102:	0c 94 47 14 	jmp	0x288e	; 0x288e <_exit>

00000106 <__bad_interrupt>:
     106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     10a:	0e 94 11 08 	call	0x1022	; 0x1022 <system_init>

	touch_init();
     10e:	0e 94 53 07 	call	0xea6	; 0xea6 <touch_init>
     112:	08 95       	ret

00000114 <__vector_14>:

#include <driver_init.h>
#include <compiler.h>

ISR(TIMER0_COMPA_vect)
{
     114:	1f 92       	push	r1
     116:	0f 92       	push	r0
     118:	0f b6       	in	r0, 0x3f	; 63
     11a:	0f 92       	push	r0
     11c:	11 24       	eor	r1, r1
     11e:	2f 93       	push	r18
     120:	3f 93       	push	r19
     122:	4f 93       	push	r20
     124:	5f 93       	push	r21
     126:	6f 93       	push	r22
     128:	7f 93       	push	r23
     12a:	8f 93       	push	r24
     12c:	9f 93       	push	r25
     12e:	af 93       	push	r26
     130:	bf 93       	push	r27
     132:	ef 93       	push	r30
     134:	ff 93       	push	r31

	mega_touch_timer();
     136:	0e 94 c7 07 	call	0xf8e	; 0xf8e <mega_touch_timer>

	/* Clear the timer flag */
	TIFR0 |= OCF0A;
     13a:	a8 9a       	sbi	0x15, 0	; 21
}
     13c:	ff 91       	pop	r31
     13e:	ef 91       	pop	r30
     140:	bf 91       	pop	r27
     142:	af 91       	pop	r26
     144:	9f 91       	pop	r25
     146:	8f 91       	pop	r24
     148:	7f 91       	pop	r23
     14a:	6f 91       	pop	r22
     14c:	5f 91       	pop	r21
     14e:	4f 91       	pop	r20
     150:	3f 91       	pop	r19
     152:	2f 91       	pop	r18
     154:	0f 90       	pop	r0
     156:	0f be       	out	0x3f, r0	; 63
     158:	0f 90       	pop	r0
     15a:	1f 90       	pop	r1
     15c:	18 95       	reti

0000015e <ledIntEnable>:
void ClearLed(void)
{
		PORTD |= DMASK;
		PORTB |= BMASK;
		PORTC |= CMASK;
		PORTE |= EMASK;
     15e:	ee e6       	ldi	r30, 0x6E	; 110
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	84 60       	ori	r24, 0x04	; 4
     166:	80 83       	st	Z, r24
     168:	08 95       	ret

0000016a <init>:
     16a:	8a b1       	in	r24, 0x0a	; 10
     16c:	8f ef       	ldi	r24, 0xFF	; 255
     16e:	8a b9       	out	0x0a, r24	; 10
     170:	94 b1       	in	r25, 0x04	; 4
     172:	84 b9       	out	0x04, r24	; 4
     174:	97 b1       	in	r25, 0x07	; 7
     176:	9f 63       	ori	r25, 0x3F	; 63
     178:	97 b9       	out	0x07, r25	; 7
     17a:	9d b1       	in	r25, 0x0d	; 13
     17c:	97 60       	ori	r25, 0x07	; 7
     17e:	9d b9       	out	0x0d, r25	; 13
     180:	9b b1       	in	r25, 0x0b	; 11
     182:	8b b9       	out	0x0b, r24	; 11
     184:	95 b1       	in	r25, 0x05	; 5
     186:	85 b9       	out	0x05, r24	; 5
     188:	88 b1       	in	r24, 0x08	; 8
     18a:	8f 63       	ori	r24, 0x3F	; 63
     18c:	88 b9       	out	0x08, r24	; 8
     18e:	8e b1       	in	r24, 0x0e	; 14
     190:	87 60       	ori	r24, 0x07	; 7
     192:	8e b9       	out	0x0e, r24	; 14
     194:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <curLed>
     198:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <score>
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <ledMode>
     1a2:	08 95       	ret

000001a4 <NextLed>:
}

void NextLed(void)
{	
	if(6 > curLed)
     1a4:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     1a8:	86 30       	cpi	r24, 0x06	; 6
     1aa:	68 f4       	brcc	.+26     	; 0x1c6 <NextLed+0x22>
	{
		PORTB = BMASK;
     1ac:	9f ef       	ldi	r25, 0xFF	; 255
     1ae:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     1b0:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	e1 59       	subi	r30, 0x91	; 145
     1b8:	fe 4f       	sbci	r31, 0xFE	; 254
     1ba:	80 81       	ld	r24, Z
     1bc:	8f 73       	andi	r24, 0x3F	; 63
     1be:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     1c0:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     1c2:	87 e0       	ldi	r24, 0x07	; 7
     1c4:	8e b9       	out	0x0e, r24	; 14
	}
	if( (9 > curLed) && (6 <= curLed))	// 8 + 6
     1c6:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     1ca:	86 50       	subi	r24, 0x06	; 6
     1cc:	83 30       	cpi	r24, 0x03	; 3
     1ce:	68 f4       	brcc	.+26     	; 0x1ea <NextLed+0x46>
	{
		PORTB = BMASK;
     1d0:	8f ef       	ldi	r24, 0xFF	; 255
     1d2:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     1d4:	9f e3       	ldi	r25, 0x3F	; 63
     1d6:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     1d8:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     1da:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	e7 5a       	subi	r30, 0xA7	; 167
     1e2:	fe 4f       	sbci	r31, 0xFE	; 254
     1e4:	80 81       	ld	r24, Z
     1e6:	87 70       	andi	r24, 0x07	; 7
     1e8:	8e b9       	out	0x0e, r24	; 14
	}
	if( (17 > curLed) && (9 <= curLed))
     1ea:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     1ee:	89 50       	subi	r24, 0x09	; 9
     1f0:	88 30       	cpi	r24, 0x08	; 8
     1f2:	68 f4       	brcc	.+26     	; 0x20e <NextLed+0x6a>
	{
		PORTB = BMASK;
     1f4:	8f ef       	ldi	r24, 0xFF	; 255
     1f6:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     1f8:	8f e3       	ldi	r24, 0x3F	; 63
     1fa:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     1fc:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	e2 5a       	subi	r30, 0xA2	; 162
     204:	fe 4f       	sbci	r31, 0xFE	; 254
     206:	80 81       	ld	r24, Z
     208:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     20a:	87 e0       	ldi	r24, 0x07	; 7
     20c:	8e b9       	out	0x0e, r24	; 14
	}
	if( (25 > curLed) && (17 <= curLed))
     20e:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     212:	8f ee       	ldi	r24, 0xEF	; 239
     214:	8e 0f       	add	r24, r30
     216:	88 30       	cpi	r24, 0x08	; 8
     218:	58 f4       	brcc	.+22     	; 0x230 <NextLed+0x8c>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	ea 59       	subi	r30, 0x9A	; 154
     21e:	fe 4f       	sbci	r31, 0xFE	; 254
     220:	80 81       	ld	r24, Z
     222:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     224:	8f e3       	ldi	r24, 0x3F	; 63
     226:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     228:	8f ef       	ldi	r24, 0xFF	; 255
     22a:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;		
     22c:	87 e0       	ldi	r24, 0x07	; 7
     22e:	8e b9       	out	0x0e, r24	; 14
	}
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     230:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	01 96       	adiw	r24, 0x01	; 1
     238:	66 e1       	ldi	r22, 0x16	; 22
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	0e 94 0a 14 	call	0x2814	; 0x2814 <__divmodhi4>
     240:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <curLed>
     244:	08 95       	ret

00000246 <Next0>:
//	E: D15-D18
//	F: D19-D22
//	G: D23-D25
void Next0(void)	//A B C D E F
{
	if(3 > curLed)		//A
     246:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     24a:	83 30       	cpi	r24, 0x03	; 3
     24c:	68 f4       	brcc	.+26     	; 0x268 <Next0+0x22>
	{
		PORTB = BMASK;
     24e:	9f ef       	ldi	r25, 0xFF	; 255
     250:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     252:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	e1 59       	subi	r30, 0x91	; 145
     25a:	fe 4f       	sbci	r31, 0xFE	; 254
     25c:	80 81       	ld	r24, Z
     25e:	8f 73       	andi	r24, 0x3F	; 63
     260:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     262:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     264:	87 e0       	ldi	r24, 0x07	; 7
     266:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
     268:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     26c:	83 50       	subi	r24, 0x03	; 3
     26e:	83 30       	cpi	r24, 0x03	; 3
     270:	68 f4       	brcc	.+26     	; 0x28c <Next0+0x46>
	{
		PORTB = BMASK;
     272:	9f ef       	ldi	r25, 0xFF	; 255
     274:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     276:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	e1 59       	subi	r30, 0x91	; 145
     27e:	fe 4f       	sbci	r31, 0xFE	; 254
     280:	80 81       	ld	r24, Z
     282:	8f 73       	andi	r24, 0x3F	; 63
     284:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     286:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     288:	87 e0       	ldi	r24, 0x07	; 7
     28a:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     28c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     290:	86 30       	cpi	r24, 0x06	; 6
     292:	69 f4       	brne	.+26     	; 0x2ae <Next0+0x68>
	{
		PORTB = BMASK;
     294:	8f ef       	ldi	r24, 0xFF	; 255
     296:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     298:	9f e3       	ldi	r25, 0x3F	; 63
     29a:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     29c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     29e:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	e7 5a       	subi	r30, 0xA7	; 167
     2a6:	fe 4f       	sbci	r31, 0xFE	; 254
     2a8:	80 81       	ld	r24, Z
     2aa:	87 70       	andi	r24, 0x07	; 7
     2ac:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     2ae:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     2b2:	87 50       	subi	r24, 0x07	; 7
     2b4:	82 30       	cpi	r24, 0x02	; 2
     2b6:	68 f4       	brcc	.+26     	; 0x2d2 <Next0+0x8c>
	{
		PORTB = BMASK;
     2b8:	8f ef       	ldi	r24, 0xFF	; 255
     2ba:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     2bc:	9f e3       	ldi	r25, 0x3F	; 63
     2be:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     2c0:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     2c2:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	e7 5a       	subi	r30, 0xA7	; 167
     2ca:	fe 4f       	sbci	r31, 0xFE	; 254
     2cc:	80 81       	ld	r24, Z
     2ce:	87 70       	andi	r24, 0x07	; 7
     2d0:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     2d2:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     2d6:	89 50       	subi	r24, 0x09	; 9
     2d8:	82 30       	cpi	r24, 0x02	; 2
     2da:	68 f4       	brcc	.+26     	; 0x2f6 <Next0+0xb0>
	{
		PORTB = BMASK;
     2dc:	8f ef       	ldi	r24, 0xFF	; 255
     2de:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     2e0:	8f e3       	ldi	r24, 0x3F	; 63
     2e2:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     2e4:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	e2 5a       	subi	r30, 0xA2	; 162
     2ec:	fe 4f       	sbci	r31, 0xFE	; 254
     2ee:	80 81       	ld	r24, Z
     2f0:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     2f2:	87 e0       	ldi	r24, 0x07	; 7
     2f4:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
     2f6:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     2fa:	8b 50       	subi	r24, 0x0B	; 11
     2fc:	83 30       	cpi	r24, 0x03	; 3
     2fe:	68 f4       	brcc	.+26     	; 0x31a <Next0+0xd4>
	{
		PORTB = BMASK;
     300:	8f ef       	ldi	r24, 0xFF	; 255
     302:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     304:	8f e3       	ldi	r24, 0x3F	; 63
     306:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     308:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	e2 5a       	subi	r30, 0xA2	; 162
     310:	fe 4f       	sbci	r31, 0xFE	; 254
     312:	80 81       	ld	r24, Z
     314:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     316:	87 e0       	ldi	r24, 0x07	; 7
     318:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (17 > curLed) && (14 <= curLed))	//E
     31a:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     31e:	8e 50       	subi	r24, 0x0E	; 14
     320:	83 30       	cpi	r24, 0x03	; 3
     322:	68 f4       	brcc	.+26     	; 0x33e <Next0+0xf8>
	{
		PORTB = BMASK;
     324:	8f ef       	ldi	r24, 0xFF	; 255
     326:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     328:	8f e3       	ldi	r24, 0x3F	; 63
     32a:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     32c:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	e2 5a       	subi	r30, 0xA2	; 162
     334:	fe 4f       	sbci	r31, 0xFE	; 254
     336:	80 81       	ld	r24, Z
     338:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     33a:	87 e0       	ldi	r24, 0x07	; 7
     33c:	8e b9       	out	0x0e, r24	; 14
	}
	if( (18 > curLed) && (17 <= curLed))	//E
     33e:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     342:	81 31       	cpi	r24, 0x11	; 17
     344:	41 f4       	brne	.+16     	; 0x356 <Next0+0x110>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     346:	8e ef       	ldi	r24, 0xFE	; 254
     348:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     34a:	8f e3       	ldi	r24, 0x3F	; 63
     34c:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     34e:	8f ef       	ldi	r24, 0xFF	; 255
     350:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     352:	87 e0       	ldi	r24, 0x07	; 7
     354:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
     356:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     35a:	8e ee       	ldi	r24, 0xEE	; 238
     35c:	8e 0f       	add	r24, r30
     35e:	84 30       	cpi	r24, 0x04	; 4
     360:	58 f4       	brcc	.+22     	; 0x378 <Next0+0x132>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	ea 59       	subi	r30, 0x9A	; 154
     366:	fe 4f       	sbci	r31, 0xFE	; 254
     368:	80 81       	ld	r24, Z
     36a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     36c:	8f e3       	ldi	r24, 0x3F	; 63
     36e:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     370:	8f ef       	ldi	r24, 0xFF	; 255
     372:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     374:	87 e0       	ldi	r24, 0x07	; 7
     376:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED_0);// + ((curLed + 1)/NUMLED);
     378:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	66 e1       	ldi	r22, 0x16	; 22
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	0e 94 0a 14 	call	0x2814	; 0x2814 <__divmodhi4>
     388:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <curLed>
     38c:	08 95       	ret

0000038e <Next1>:
}

void Next1(void)	//A B
{
	if(3 > curLed)		//A
     38e:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     392:	83 30       	cpi	r24, 0x03	; 3
     394:	68 f4       	brcc	.+26     	; 0x3b0 <Next1+0x22>
	{
		PORTB = BMASK;
     396:	9f ef       	ldi	r25, 0xFF	; 255
     398:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     39a:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	e1 59       	subi	r30, 0x91	; 145
     3a2:	fe 4f       	sbci	r31, 0xFE	; 254
     3a4:	80 81       	ld	r24, Z
     3a6:	8f 73       	andi	r24, 0x3F	; 63
     3a8:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     3aa:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     3ac:	87 e0       	ldi	r24, 0x07	; 7
     3ae:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
     3b0:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     3b4:	83 50       	subi	r24, 0x03	; 3
     3b6:	83 30       	cpi	r24, 0x03	; 3
     3b8:	68 f4       	brcc	.+26     	; 0x3d4 <Next1+0x46>
	{
		PORTB = BMASK;
     3ba:	9f ef       	ldi	r25, 0xFF	; 255
     3bc:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     3be:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	e1 59       	subi	r30, 0x91	; 145
     3c6:	fe 4f       	sbci	r31, 0xFE	; 254
     3c8:	80 81       	ld	r24, Z
     3ca:	8f 73       	andi	r24, 0x3F	; 63
     3cc:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     3ce:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     3d0:	87 e0       	ldi	r24, 0x07	; 7
     3d2:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     3d4:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     3d8:	86 30       	cpi	r24, 0x06	; 6
     3da:	69 f4       	brne	.+26     	; 0x3f6 <Next1+0x68>
	{
		PORTB = BMASK;
     3dc:	8f ef       	ldi	r24, 0xFF	; 255
     3de:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     3e0:	9f e3       	ldi	r25, 0x3F	; 63
     3e2:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     3e4:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     3e6:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	e7 5a       	subi	r30, 0xA7	; 167
     3ee:	fe 4f       	sbci	r31, 0xFE	; 254
     3f0:	80 81       	ld	r24, Z
     3f2:	87 70       	andi	r24, 0x07	; 7
     3f4:	8e b9       	out	0x0e, r24	; 14
	}
	curLed = ((curLed + 1)%NUMLED_1);// + ((curLed + 1)/NUMLED);
     3f6:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	67 e0       	ldi	r22, 0x07	; 7
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	0e 94 0a 14 	call	0x2814	; 0x2814 <__divmodhi4>
     406:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <curLed>
     40a:	08 95       	ret

0000040c <Next2>:
}

void Next2(void)	//A B D E G
{
	if(3 > curLed)		//A
     40c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     410:	83 30       	cpi	r24, 0x03	; 3
     412:	68 f4       	brcc	.+26     	; 0x42e <Next2+0x22>
	{
		PORTB = BMASK;
     414:	9f ef       	ldi	r25, 0xFF	; 255
     416:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     418:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	e1 59       	subi	r30, 0x91	; 145
     420:	fe 4f       	sbci	r31, 0xFE	; 254
     422:	80 81       	ld	r24, Z
     424:	8f 73       	andi	r24, 0x3F	; 63
     426:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     428:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     42a:	87 e0       	ldi	r24, 0x07	; 7
     42c:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
     42e:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     432:	83 50       	subi	r24, 0x03	; 3
     434:	83 30       	cpi	r24, 0x03	; 3
     436:	68 f4       	brcc	.+26     	; 0x452 <Next2+0x46>
	{
		PORTB = BMASK;
     438:	9f ef       	ldi	r25, 0xFF	; 255
     43a:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     43c:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	e1 59       	subi	r30, 0x91	; 145
     444:	fe 4f       	sbci	r31, 0xFE	; 254
     446:	80 81       	ld	r24, Z
     448:	8f 73       	andi	r24, 0x3F	; 63
     44a:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     44c:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     44e:	87 e0       	ldi	r24, 0x07	; 7
     450:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     452:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     456:	86 30       	cpi	r24, 0x06	; 6
     458:	69 f4       	brne	.+26     	; 0x474 <Next2+0x68>
	{
		PORTB = BMASK;
     45a:	8f ef       	ldi	r24, 0xFF	; 255
     45c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     45e:	9f e3       	ldi	r25, 0x3F	; 63
     460:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     462:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     464:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	e7 5a       	subi	r30, 0xA7	; 167
     46c:	fe 4f       	sbci	r31, 0xFE	; 254
     46e:	80 81       	ld	r24, Z
     470:	87 70       	andi	r24, 0x07	; 7
     472:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
     474:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     478:	8b 50       	subi	r24, 0x0B	; 11
     47a:	83 30       	cpi	r24, 0x03	; 3
     47c:	68 f4       	brcc	.+26     	; 0x498 <Next2+0x8c>
	{
		PORTB = BMASK;
     47e:	8f ef       	ldi	r24, 0xFF	; 255
     480:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     482:	8f e3       	ldi	r24, 0x3F	; 63
     484:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     486:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	e2 5a       	subi	r30, 0xA2	; 162
     48e:	fe 4f       	sbci	r31, 0xFE	; 254
     490:	80 81       	ld	r24, Z
     492:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     494:	87 e0       	ldi	r24, 0x07	; 7
     496:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (17 > curLed) && (14 <= curLed))	//E
     498:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     49c:	8e 50       	subi	r24, 0x0E	; 14
     49e:	83 30       	cpi	r24, 0x03	; 3
     4a0:	68 f4       	brcc	.+26     	; 0x4bc <Next2+0xb0>
	{
		PORTB = BMASK;
     4a2:	8f ef       	ldi	r24, 0xFF	; 255
     4a4:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     4a6:	8f e3       	ldi	r24, 0x3F	; 63
     4a8:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     4aa:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	e2 5a       	subi	r30, 0xA2	; 162
     4b2:	fe 4f       	sbci	r31, 0xFE	; 254
     4b4:	80 81       	ld	r24, Z
     4b6:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     4b8:	87 e0       	ldi	r24, 0x07	; 7
     4ba:	8e b9       	out	0x0e, r24	; 14
	}
	if( (18 > curLed) && (17 <= curLed))	//E
     4bc:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     4c0:	81 31       	cpi	r24, 0x11	; 17
     4c2:	41 f4       	brne	.+16     	; 0x4d4 <Next2+0xc8>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     4c4:	8e ef       	ldi	r24, 0xFE	; 254
     4c6:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     4c8:	8f e3       	ldi	r24, 0x3F	; 63
     4ca:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     4cc:	8f ef       	ldi	r24, 0xFF	; 255
     4ce:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     4d0:	87 e0       	ldi	r24, 0x07	; 7
     4d2:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
     4d4:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     4d8:	8a ee       	ldi	r24, 0xEA	; 234
     4da:	8e 0f       	add	r24, r30
     4dc:	83 30       	cpi	r24, 0x03	; 3
     4de:	58 f4       	brcc	.+22     	; 0x4f6 <Next2+0xea>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	ea 59       	subi	r30, 0x9A	; 154
     4e4:	fe 4f       	sbci	r31, 0xFE	; 254
     4e6:	80 81       	ld	r24, Z
     4e8:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     4ea:	8f e3       	ldi	r24, 0x3F	; 63
     4ec:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     4ee:	8f ef       	ldi	r24, 0xFF	; 255
     4f0:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     4f2:	87 e0       	ldi	r24, 0x07	; 7
     4f4:	8e b9       	out	0x0e, r24	; 14
	}
	curLed = ((curLed + 1)%NUMLED_2);// + ((curLed + 1)/NUMLED);
     4f6:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	61 e1       	ldi	r22, 0x11	; 17
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	0e 94 0a 14 	call	0x2814	; 0x2814 <__divmodhi4>
     506:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <curLed>
     50a:	08 95       	ret

0000050c <Next3>:
}

void Next3(void)	//A B C D G
{
	if(3 > curLed)		//A
     50c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     510:	83 30       	cpi	r24, 0x03	; 3
     512:	68 f4       	brcc	.+26     	; 0x52e <Next3+0x22>
	{
		PORTB = BMASK;
     514:	9f ef       	ldi	r25, 0xFF	; 255
     516:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     518:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	e1 59       	subi	r30, 0x91	; 145
     520:	fe 4f       	sbci	r31, 0xFE	; 254
     522:	80 81       	ld	r24, Z
     524:	8f 73       	andi	r24, 0x3F	; 63
     526:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     528:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     52a:	87 e0       	ldi	r24, 0x07	; 7
     52c:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
     52e:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     532:	83 50       	subi	r24, 0x03	; 3
     534:	83 30       	cpi	r24, 0x03	; 3
     536:	68 f4       	brcc	.+26     	; 0x552 <Next3+0x46>
	{
		PORTB = BMASK;
     538:	9f ef       	ldi	r25, 0xFF	; 255
     53a:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     53c:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	e1 59       	subi	r30, 0x91	; 145
     544:	fe 4f       	sbci	r31, 0xFE	; 254
     546:	80 81       	ld	r24, Z
     548:	8f 73       	andi	r24, 0x3F	; 63
     54a:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     54c:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     54e:	87 e0       	ldi	r24, 0x07	; 7
     550:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     552:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     556:	86 30       	cpi	r24, 0x06	; 6
     558:	69 f4       	brne	.+26     	; 0x574 <Next3+0x68>
	{
		PORTB = BMASK;
     55a:	8f ef       	ldi	r24, 0xFF	; 255
     55c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     55e:	9f e3       	ldi	r25, 0x3F	; 63
     560:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     562:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     564:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	e7 5a       	subi	r30, 0xA7	; 167
     56c:	fe 4f       	sbci	r31, 0xFE	; 254
     56e:	80 81       	ld	r24, Z
     570:	87 70       	andi	r24, 0x07	; 7
     572:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     574:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     578:	87 50       	subi	r24, 0x07	; 7
     57a:	82 30       	cpi	r24, 0x02	; 2
     57c:	68 f4       	brcc	.+26     	; 0x598 <Next3+0x8c>
	{
		PORTB = BMASK;
     57e:	8f ef       	ldi	r24, 0xFF	; 255
     580:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     582:	9f e3       	ldi	r25, 0x3F	; 63
     584:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     586:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     588:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	e7 5a       	subi	r30, 0xA7	; 167
     590:	fe 4f       	sbci	r31, 0xFE	; 254
     592:	80 81       	ld	r24, Z
     594:	87 70       	andi	r24, 0x07	; 7
     596:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     598:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     59c:	89 50       	subi	r24, 0x09	; 9
     59e:	82 30       	cpi	r24, 0x02	; 2
     5a0:	68 f4       	brcc	.+26     	; 0x5bc <Next3+0xb0>
	{
		PORTB = BMASK;
     5a2:	8f ef       	ldi	r24, 0xFF	; 255
     5a4:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     5a6:	8f e3       	ldi	r24, 0x3F	; 63
     5a8:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     5aa:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	e2 5a       	subi	r30, 0xA2	; 162
     5b2:	fe 4f       	sbci	r31, 0xFE	; 254
     5b4:	80 81       	ld	r24, Z
     5b6:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     5b8:	87 e0       	ldi	r24, 0x07	; 7
     5ba:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
     5bc:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     5c0:	8b 50       	subi	r24, 0x0B	; 11
     5c2:	83 30       	cpi	r24, 0x03	; 3
     5c4:	68 f4       	brcc	.+26     	; 0x5e0 <Next3+0xd4>
	{
		PORTB = BMASK;
     5c6:	8f ef       	ldi	r24, 0xFF	; 255
     5c8:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     5ca:	8f e3       	ldi	r24, 0x3F	; 63
     5cc:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     5ce:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	e2 5a       	subi	r30, 0xA2	; 162
     5d6:	fe 4f       	sbci	r31, 0xFE	; 254
     5d8:	80 81       	ld	r24, Z
     5da:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     5dc:	87 e0       	ldi	r24, 0x07	; 7
     5de:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
     5e0:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     5e4:	8a ee       	ldi	r24, 0xEA	; 234
     5e6:	8e 0f       	add	r24, r30
     5e8:	83 30       	cpi	r24, 0x03	; 3
     5ea:	58 f4       	brcc	.+22     	; 0x602 <Next3+0xf6>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	ea 59       	subi	r30, 0x9A	; 154
     5f0:	fe 4f       	sbci	r31, 0xFE	; 254
     5f2:	80 81       	ld	r24, Z
     5f4:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     5f6:	8f e3       	ldi	r24, 0x3F	; 63
     5f8:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     5fa:	8f ef       	ldi	r24, 0xFF	; 255
     5fc:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     5fe:	87 e0       	ldi	r24, 0x07	; 7
     600:	8e b9       	out	0x0e, r24	; 14
	}
	
	
	curLed = ((curLed + 1)%NUMLED_3);// + ((curLed + 1)/NUMLED);
     602:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	61 e1       	ldi	r22, 0x11	; 17
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	0e 94 0a 14 	call	0x2814	; 0x2814 <__divmodhi4>
     612:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <curLed>
     616:	08 95       	ret

00000618 <Next4>:
}

void Next4(void)	//B C F G
{
	if((6 > curLed)&&(3 <= curLed))	//B
     618:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     61c:	83 50       	subi	r24, 0x03	; 3
     61e:	83 30       	cpi	r24, 0x03	; 3
     620:	68 f4       	brcc	.+26     	; 0x63c <Next4+0x24>
	{
		PORTB = BMASK;
     622:	9f ef       	ldi	r25, 0xFF	; 255
     624:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     626:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	e1 59       	subi	r30, 0x91	; 145
     62e:	fe 4f       	sbci	r31, 0xFE	; 254
     630:	80 81       	ld	r24, Z
     632:	8f 73       	andi	r24, 0x3F	; 63
     634:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     636:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     638:	87 e0       	ldi	r24, 0x07	; 7
     63a:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     63c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     640:	86 30       	cpi	r24, 0x06	; 6
     642:	69 f4       	brne	.+26     	; 0x65e <Next4+0x46>
	{
		PORTB = BMASK;
     644:	8f ef       	ldi	r24, 0xFF	; 255
     646:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     648:	9f e3       	ldi	r25, 0x3F	; 63
     64a:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     64c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     64e:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	e7 5a       	subi	r30, 0xA7	; 167
     656:	fe 4f       	sbci	r31, 0xFE	; 254
     658:	80 81       	ld	r24, Z
     65a:	87 70       	andi	r24, 0x07	; 7
     65c:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     65e:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     662:	87 50       	subi	r24, 0x07	; 7
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	68 f4       	brcc	.+26     	; 0x682 <Next4+0x6a>
	{
		PORTB = BMASK;
     668:	8f ef       	ldi	r24, 0xFF	; 255
     66a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     66c:	9f e3       	ldi	r25, 0x3F	; 63
     66e:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     670:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     672:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	e7 5a       	subi	r30, 0xA7	; 167
     67a:	fe 4f       	sbci	r31, 0xFE	; 254
     67c:	80 81       	ld	r24, Z
     67e:	87 70       	andi	r24, 0x07	; 7
     680:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     682:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     686:	89 50       	subi	r24, 0x09	; 9
     688:	82 30       	cpi	r24, 0x02	; 2
     68a:	68 f4       	brcc	.+26     	; 0x6a6 <Next4+0x8e>
	{
		PORTB = BMASK;
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     690:	8f e3       	ldi	r24, 0x3F	; 63
     692:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     694:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	e2 5a       	subi	r30, 0xA2	; 162
     69c:	fe 4f       	sbci	r31, 0xFE	; 254
     69e:	80 81       	ld	r24, Z
     6a0:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     6a2:	87 e0       	ldi	r24, 0x07	; 7
     6a4:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
     6a6:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     6aa:	8e ee       	ldi	r24, 0xEE	; 238
     6ac:	8e 0f       	add	r24, r30
     6ae:	84 30       	cpi	r24, 0x04	; 4
     6b0:	58 f4       	brcc	.+22     	; 0x6c8 <Next4+0xb0>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	ea 59       	subi	r30, 0x9A	; 154
     6b6:	fe 4f       	sbci	r31, 0xFE	; 254
     6b8:	80 81       	ld	r24, Z
     6ba:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     6bc:	8f e3       	ldi	r24, 0x3F	; 63
     6be:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     6c0:	8f ef       	ldi	r24, 0xFF	; 255
     6c2:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     6c4:	87 e0       	ldi	r24, 0x07	; 7
     6c6:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
     6c8:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     6cc:	8a ee       	ldi	r24, 0xEA	; 234
     6ce:	8e 0f       	add	r24, r30
     6d0:	83 30       	cpi	r24, 0x03	; 3
     6d2:	58 f4       	brcc	.+22     	; 0x6ea <Next4+0xd2>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	ea 59       	subi	r30, 0x9A	; 154
     6d8:	fe 4f       	sbci	r31, 0xFE	; 254
     6da:	80 81       	ld	r24, Z
     6dc:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     6de:	8f e3       	ldi	r24, 0x3F	; 63
     6e0:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     6e2:	8f ef       	ldi	r24, 0xFF	; 255
     6e4:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     6e6:	87 e0       	ldi	r24, 0x07	; 7
     6e8:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED_4);// + ((curLed + 1)/NUMLED);
     6ea:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	01 96       	adiw	r24, 0x01	; 1
     6f2:	6f e0       	ldi	r22, 0x0F	; 15
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	0e 94 0a 14 	call	0x2814	; 0x2814 <__divmodhi4>
     6fa:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <curLed>
     6fe:	08 95       	ret

00000700 <Next5>:
}

void Next5(void)	//A C D F G
{
	if(3 > curLed)		//A
     700:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     704:	83 30       	cpi	r24, 0x03	; 3
     706:	68 f4       	brcc	.+26     	; 0x722 <Next5+0x22>
	{
		PORTB = BMASK;
     708:	9f ef       	ldi	r25, 0xFF	; 255
     70a:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     70c:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	e1 59       	subi	r30, 0x91	; 145
     714:	fe 4f       	sbci	r31, 0xFE	; 254
     716:	80 81       	ld	r24, Z
     718:	8f 73       	andi	r24, 0x3F	; 63
     71a:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     71c:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     71e:	87 e0       	ldi	r24, 0x07	; 7
     720:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     722:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     726:	87 50       	subi	r24, 0x07	; 7
     728:	82 30       	cpi	r24, 0x02	; 2
     72a:	68 f4       	brcc	.+26     	; 0x746 <Next5+0x46>
	{
		PORTB = BMASK;
     72c:	8f ef       	ldi	r24, 0xFF	; 255
     72e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     730:	9f e3       	ldi	r25, 0x3F	; 63
     732:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     734:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     736:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	e7 5a       	subi	r30, 0xA7	; 167
     73e:	fe 4f       	sbci	r31, 0xFE	; 254
     740:	80 81       	ld	r24, Z
     742:	87 70       	andi	r24, 0x07	; 7
     744:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     746:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     74a:	89 50       	subi	r24, 0x09	; 9
     74c:	82 30       	cpi	r24, 0x02	; 2
     74e:	68 f4       	brcc	.+26     	; 0x76a <Next5+0x6a>
	{
		PORTB = BMASK;
     750:	8f ef       	ldi	r24, 0xFF	; 255
     752:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     754:	8f e3       	ldi	r24, 0x3F	; 63
     756:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     758:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	e2 5a       	subi	r30, 0xA2	; 162
     760:	fe 4f       	sbci	r31, 0xFE	; 254
     762:	80 81       	ld	r24, Z
     764:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     766:	87 e0       	ldi	r24, 0x07	; 7
     768:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
     76a:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     76e:	8b 50       	subi	r24, 0x0B	; 11
     770:	83 30       	cpi	r24, 0x03	; 3
     772:	68 f4       	brcc	.+26     	; 0x78e <Next5+0x8e>
	{
		PORTB = BMASK;
     774:	8f ef       	ldi	r24, 0xFF	; 255
     776:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     778:	8f e3       	ldi	r24, 0x3F	; 63
     77a:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     77c:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	e2 5a       	subi	r30, 0xA2	; 162
     784:	fe 4f       	sbci	r31, 0xFE	; 254
     786:	80 81       	ld	r24, Z
     788:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     78a:	87 e0       	ldi	r24, 0x07	; 7
     78c:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
     78e:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     792:	8e ee       	ldi	r24, 0xEE	; 238
     794:	8e 0f       	add	r24, r30
     796:	84 30       	cpi	r24, 0x04	; 4
     798:	58 f4       	brcc	.+22     	; 0x7b0 <Next5+0xb0>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	ea 59       	subi	r30, 0x9A	; 154
     79e:	fe 4f       	sbci	r31, 0xFE	; 254
     7a0:	80 81       	ld	r24, Z
     7a2:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     7a4:	8f e3       	ldi	r24, 0x3F	; 63
     7a6:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     7a8:	8f ef       	ldi	r24, 0xFF	; 255
     7aa:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     7ac:	87 e0       	ldi	r24, 0x07	; 7
     7ae:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
     7b0:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     7b4:	8a ee       	ldi	r24, 0xEA	; 234
     7b6:	8e 0f       	add	r24, r30
     7b8:	83 30       	cpi	r24, 0x03	; 3
     7ba:	58 f4       	brcc	.+22     	; 0x7d2 <Next5+0xd2>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	ea 59       	subi	r30, 0x9A	; 154
     7c0:	fe 4f       	sbci	r31, 0xFE	; 254
     7c2:	80 81       	ld	r24, Z
     7c4:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     7c6:	8f e3       	ldi	r24, 0x3F	; 63
     7c8:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     7ca:	8f ef       	ldi	r24, 0xFF	; 255
     7cc:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     7ce:	87 e0       	ldi	r24, 0x07	; 7
     7d0:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED_5);// + ((curLed + 1)/NUMLED);
     7d2:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	01 96       	adiw	r24, 0x01	; 1
     7da:	61 e1       	ldi	r22, 0x11	; 17
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	0e 94 0a 14 	call	0x2814	; 0x2814 <__divmodhi4>
     7e2:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <curLed>
     7e6:	08 95       	ret

000007e8 <Next6>:
}

void Next6(void)	//A C D E F G
{
	
	if(3 > curLed)		//A
     7e8:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     7ec:	83 30       	cpi	r24, 0x03	; 3
     7ee:	68 f4       	brcc	.+26     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	{
		PORTB = BMASK;
     7f0:	9f ef       	ldi	r25, 0xFF	; 255
     7f2:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     7f4:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	e1 59       	subi	r30, 0x91	; 145
     7fc:	fe 4f       	sbci	r31, 0xFE	; 254
     7fe:	80 81       	ld	r24, Z
     800:	8f 73       	andi	r24, 0x3F	; 63
     802:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     804:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     806:	87 e0       	ldi	r24, 0x07	; 7
     808:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     80a:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     80e:	87 50       	subi	r24, 0x07	; 7
     810:	82 30       	cpi	r24, 0x02	; 2
     812:	68 f4       	brcc	.+26     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
	{
		PORTB = BMASK;
     814:	8f ef       	ldi	r24, 0xFF	; 255
     816:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     818:	9f e3       	ldi	r25, 0x3F	; 63
     81a:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     81c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     81e:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	e7 5a       	subi	r30, 0xA7	; 167
     826:	fe 4f       	sbci	r31, 0xFE	; 254
     828:	80 81       	ld	r24, Z
     82a:	87 70       	andi	r24, 0x07	; 7
     82c:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     82e:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     832:	89 50       	subi	r24, 0x09	; 9
     834:	82 30       	cpi	r24, 0x02	; 2
     836:	68 f4       	brcc	.+26     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
	{
		PORTB = BMASK;
     838:	8f ef       	ldi	r24, 0xFF	; 255
     83a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     83c:	8f e3       	ldi	r24, 0x3F	; 63
     83e:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     840:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	e2 5a       	subi	r30, 0xA2	; 162
     848:	fe 4f       	sbci	r31, 0xFE	; 254
     84a:	80 81       	ld	r24, Z
     84c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     84e:	87 e0       	ldi	r24, 0x07	; 7
     850:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
     852:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     856:	8b 50       	subi	r24, 0x0B	; 11
     858:	83 30       	cpi	r24, 0x03	; 3
     85a:	68 f4       	brcc	.+26     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
	{
		PORTB = BMASK;
     85c:	8f ef       	ldi	r24, 0xFF	; 255
     85e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     860:	8f e3       	ldi	r24, 0x3F	; 63
     862:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     864:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	e2 5a       	subi	r30, 0xA2	; 162
     86c:	fe 4f       	sbci	r31, 0xFE	; 254
     86e:	80 81       	ld	r24, Z
     870:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     872:	87 e0       	ldi	r24, 0x07	; 7
     874:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (17 > curLed) && (14 <= curLed))	//E
     876:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     87a:	8e 50       	subi	r24, 0x0E	; 14
     87c:	83 30       	cpi	r24, 0x03	; 3
     87e:	68 f4       	brcc	.+26     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
	{
		PORTB = BMASK;
     880:	8f ef       	ldi	r24, 0xFF	; 255
     882:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     884:	8f e3       	ldi	r24, 0x3F	; 63
     886:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     888:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	e2 5a       	subi	r30, 0xA2	; 162
     890:	fe 4f       	sbci	r31, 0xFE	; 254
     892:	80 81       	ld	r24, Z
     894:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     896:	87 e0       	ldi	r24, 0x07	; 7
     898:	8e b9       	out	0x0e, r24	; 14
	}
	if( (18 > curLed) && (17 <= curLed))	//E
     89a:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     89e:	81 31       	cpi	r24, 0x11	; 17
     8a0:	41 f4       	brne	.+16     	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     8a2:	8e ef       	ldi	r24, 0xFE	; 254
     8a4:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     8a6:	8f e3       	ldi	r24, 0x3F	; 63
     8a8:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     8aa:	8f ef       	ldi	r24, 0xFF	; 255
     8ac:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     8ae:	87 e0       	ldi	r24, 0x07	; 7
     8b0:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
     8b2:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     8b6:	8e ee       	ldi	r24, 0xEE	; 238
     8b8:	8e 0f       	add	r24, r30
     8ba:	84 30       	cpi	r24, 0x04	; 4
     8bc:	58 f4       	brcc	.+22     	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	ea 59       	subi	r30, 0x9A	; 154
     8c2:	fe 4f       	sbci	r31, 0xFE	; 254
     8c4:	80 81       	ld	r24, Z
     8c6:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     8c8:	8f e3       	ldi	r24, 0x3F	; 63
     8ca:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     8cc:	8f ef       	ldi	r24, 0xFF	; 255
     8ce:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     8d0:	87 e0       	ldi	r24, 0x07	; 7
     8d2:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
     8d4:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     8d8:	8a ee       	ldi	r24, 0xEA	; 234
     8da:	8e 0f       	add	r24, r30
     8dc:	83 30       	cpi	r24, 0x03	; 3
     8de:	58 f4       	brcc	.+22     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	ea 59       	subi	r30, 0x9A	; 154
     8e4:	fe 4f       	sbci	r31, 0xFE	; 254
     8e6:	80 81       	ld	r24, Z
     8e8:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     8ea:	8f e3       	ldi	r24, 0x3F	; 63
     8ec:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     8ee:	8f ef       	ldi	r24, 0xFF	; 255
     8f0:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     8f2:	87 e0       	ldi	r24, 0x07	; 7
     8f4:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED_6);// + ((curLed + 1)/NUMLED);
     8f6:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	65 e1       	ldi	r22, 0x15	; 21
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	0e 94 0a 14 	call	0x2814	; 0x2814 <__divmodhi4>
     906:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <curLed>
     90a:	08 95       	ret

0000090c <Next7>:
}

void Next7(void)	//A B C
{
	
	if(3 > curLed)		//A
     90c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     910:	83 30       	cpi	r24, 0x03	; 3
     912:	68 f4       	brcc	.+26     	; 0x92e <Next7+0x22>
	{
		PORTB = BMASK;
     914:	9f ef       	ldi	r25, 0xFF	; 255
     916:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     918:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	e1 59       	subi	r30, 0x91	; 145
     920:	fe 4f       	sbci	r31, 0xFE	; 254
     922:	80 81       	ld	r24, Z
     924:	8f 73       	andi	r24, 0x3F	; 63
     926:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     928:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     92a:	87 e0       	ldi	r24, 0x07	; 7
     92c:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
     92e:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     932:	83 50       	subi	r24, 0x03	; 3
     934:	83 30       	cpi	r24, 0x03	; 3
     936:	68 f4       	brcc	.+26     	; 0x952 <Next7+0x46>
	{
		PORTB = BMASK;
     938:	9f ef       	ldi	r25, 0xFF	; 255
     93a:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     93c:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	e1 59       	subi	r30, 0x91	; 145
     944:	fe 4f       	sbci	r31, 0xFE	; 254
     946:	80 81       	ld	r24, Z
     948:	8f 73       	andi	r24, 0x3F	; 63
     94a:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     94c:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     94e:	87 e0       	ldi	r24, 0x07	; 7
     950:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     952:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     956:	86 30       	cpi	r24, 0x06	; 6
     958:	69 f4       	brne	.+26     	; 0x974 <Next7+0x68>
	{
		PORTB = BMASK;
     95a:	8f ef       	ldi	r24, 0xFF	; 255
     95c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     95e:	9f e3       	ldi	r25, 0x3F	; 63
     960:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     962:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     964:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	e7 5a       	subi	r30, 0xA7	; 167
     96c:	fe 4f       	sbci	r31, 0xFE	; 254
     96e:	80 81       	ld	r24, Z
     970:	87 70       	andi	r24, 0x07	; 7
     972:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     974:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     978:	87 50       	subi	r24, 0x07	; 7
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	68 f4       	brcc	.+26     	; 0x998 <Next7+0x8c>
	{
		PORTB = BMASK;
     97e:	8f ef       	ldi	r24, 0xFF	; 255
     980:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     982:	9f e3       	ldi	r25, 0x3F	; 63
     984:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     986:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     988:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	e7 5a       	subi	r30, 0xA7	; 167
     990:	fe 4f       	sbci	r31, 0xFE	; 254
     992:	80 81       	ld	r24, Z
     994:	87 70       	andi	r24, 0x07	; 7
     996:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     998:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     99c:	89 50       	subi	r24, 0x09	; 9
     99e:	82 30       	cpi	r24, 0x02	; 2
     9a0:	68 f4       	brcc	.+26     	; 0x9bc <Next7+0xb0>
	{
		PORTB = BMASK;
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     9a6:	8f e3       	ldi	r24, 0x3F	; 63
     9a8:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     9aa:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	e2 5a       	subi	r30, 0xA2	; 162
     9b2:	fe 4f       	sbci	r31, 0xFE	; 254
     9b4:	80 81       	ld	r24, Z
     9b6:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     9b8:	87 e0       	ldi	r24, 0x07	; 7
     9ba:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED_7);// + ((curLed + 1)/NUMLED);
     9bc:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	01 96       	adiw	r24, 0x01	; 1
     9c4:	6b e0       	ldi	r22, 0x0B	; 11
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	0e 94 0a 14 	call	0x2814	; 0x2814 <__divmodhi4>
     9cc:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <curLed>
     9d0:	08 95       	ret

000009d2 <Next8>:
}

void Next8(void)	//A B C D E F G
{
		if(3 > curLed)		//A
     9d2:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     9d6:	83 30       	cpi	r24, 0x03	; 3
     9d8:	68 f4       	brcc	.+26     	; 0x9f4 <Next8+0x22>
		{
			PORTB = BMASK;
     9da:	9f ef       	ldi	r25, 0xFF	; 255
     9dc:	95 b9       	out	0x05, r25	; 5
			PORTC = CMASK&LED_BANKC_TAB[curLed];
     9de:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	e1 59       	subi	r30, 0x91	; 145
     9e6:	fe 4f       	sbci	r31, 0xFE	; 254
     9e8:	80 81       	ld	r24, Z
     9ea:	8f 73       	andi	r24, 0x3F	; 63
     9ec:	88 b9       	out	0x08, r24	; 8
			PORTD = DMASK;
     9ee:	9b b9       	out	0x0b, r25	; 11
			PORTE = EMASK;
     9f0:	87 e0       	ldi	r24, 0x07	; 7
     9f2:	8e b9       	out	0x0e, r24	; 14
		}
		
		if((6 > curLed)&&(3 <= curLed))	//B
     9f4:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     9f8:	83 50       	subi	r24, 0x03	; 3
     9fa:	83 30       	cpi	r24, 0x03	; 3
     9fc:	68 f4       	brcc	.+26     	; 0xa18 <Next8+0x46>
		{
			PORTB = BMASK;
     9fe:	9f ef       	ldi	r25, 0xFF	; 255
     a00:	95 b9       	out	0x05, r25	; 5
			PORTC = CMASK&LED_BANKC_TAB[curLed];
     a02:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	e1 59       	subi	r30, 0x91	; 145
     a0a:	fe 4f       	sbci	r31, 0xFE	; 254
     a0c:	80 81       	ld	r24, Z
     a0e:	8f 73       	andi	r24, 0x3F	; 63
     a10:	88 b9       	out	0x08, r24	; 8
			PORTD = DMASK;
     a12:	9b b9       	out	0x0b, r25	; 11
			PORTE = EMASK;
     a14:	87 e0       	ldi	r24, 0x07	; 7
     a16:	8e b9       	out	0x0e, r24	; 14
		}
		if((7 > curLed)&&(6 <= curLed))	//B
     a18:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     a1c:	86 30       	cpi	r24, 0x06	; 6
     a1e:	69 f4       	brne	.+26     	; 0xa3a <Next8+0x68>
		{
			PORTB = BMASK;
     a20:	8f ef       	ldi	r24, 0xFF	; 255
     a22:	85 b9       	out	0x05, r24	; 5
			PORTC = CMASK;
     a24:	9f e3       	ldi	r25, 0x3F	; 63
     a26:	98 b9       	out	0x08, r25	; 8
			PORTD = DMASK;
     a28:	8b b9       	out	0x0b, r24	; 11
			PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     a2a:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	e7 5a       	subi	r30, 0xA7	; 167
     a32:	fe 4f       	sbci	r31, 0xFE	; 254
     a34:	80 81       	ld	r24, Z
     a36:	87 70       	andi	r24, 0x07	; 7
     a38:	8e b9       	out	0x0e, r24	; 14
		}
		
		if((9> curLed)&&(7 <= curLed)) //C
     a3a:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     a3e:	87 50       	subi	r24, 0x07	; 7
     a40:	82 30       	cpi	r24, 0x02	; 2
     a42:	68 f4       	brcc	.+26     	; 0xa5e <Next8+0x8c>
		{
			PORTB = BMASK;
     a44:	8f ef       	ldi	r24, 0xFF	; 255
     a46:	85 b9       	out	0x05, r24	; 5
			PORTC = CMASK;
     a48:	9f e3       	ldi	r25, 0x3F	; 63
     a4a:	98 b9       	out	0x08, r25	; 8
			PORTD = DMASK;
     a4c:	8b b9       	out	0x0b, r24	; 11
			PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     a4e:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	e7 5a       	subi	r30, 0xA7	; 167
     a56:	fe 4f       	sbci	r31, 0xFE	; 254
     a58:	80 81       	ld	r24, Z
     a5a:	87 70       	andi	r24, 0x07	; 7
     a5c:	8e b9       	out	0x0e, r24	; 14
		}
		if( (11 > curLed) && (9 <= curLed))	//C
     a5e:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     a62:	89 50       	subi	r24, 0x09	; 9
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	68 f4       	brcc	.+26     	; 0xa82 <Next8+0xb0>
		{
			PORTB = BMASK;
     a68:	8f ef       	ldi	r24, 0xFF	; 255
     a6a:	85 b9       	out	0x05, r24	; 5
			PORTC = CMASK;
     a6c:	8f e3       	ldi	r24, 0x3F	; 63
     a6e:	88 b9       	out	0x08, r24	; 8
			PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     a70:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	e2 5a       	subi	r30, 0xA2	; 162
     a78:	fe 4f       	sbci	r31, 0xFE	; 254
     a7a:	80 81       	ld	r24, Z
     a7c:	8b b9       	out	0x0b, r24	; 11
			PORTE = EMASK;
     a7e:	87 e0       	ldi	r24, 0x07	; 7
     a80:	8e b9       	out	0x0e, r24	; 14
		}
		
		if( (14 > curLed) && (11 <= curLed))	//D
     a82:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     a86:	8b 50       	subi	r24, 0x0B	; 11
     a88:	83 30       	cpi	r24, 0x03	; 3
     a8a:	68 f4       	brcc	.+26     	; 0xaa6 <Next8+0xd4>
		{
			PORTB = BMASK;
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	85 b9       	out	0x05, r24	; 5
			PORTC = CMASK;
     a90:	8f e3       	ldi	r24, 0x3F	; 63
     a92:	88 b9       	out	0x08, r24	; 8
			PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     a94:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	e2 5a       	subi	r30, 0xA2	; 162
     a9c:	fe 4f       	sbci	r31, 0xFE	; 254
     a9e:	80 81       	ld	r24, Z
     aa0:	8b b9       	out	0x0b, r24	; 11
			PORTE = EMASK;
     aa2:	87 e0       	ldi	r24, 0x07	; 7
     aa4:	8e b9       	out	0x0e, r24	; 14
		}
		
		if( (17 > curLed) && (14 <= curLed))	//E
     aa6:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     aaa:	8e 50       	subi	r24, 0x0E	; 14
     aac:	83 30       	cpi	r24, 0x03	; 3
     aae:	68 f4       	brcc	.+26     	; 0xaca <Next8+0xf8>
		{
			PORTB = BMASK;
     ab0:	8f ef       	ldi	r24, 0xFF	; 255
     ab2:	85 b9       	out	0x05, r24	; 5
			PORTC = CMASK;
     ab4:	8f e3       	ldi	r24, 0x3F	; 63
     ab6:	88 b9       	out	0x08, r24	; 8
			PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     ab8:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	e2 5a       	subi	r30, 0xA2	; 162
     ac0:	fe 4f       	sbci	r31, 0xFE	; 254
     ac2:	80 81       	ld	r24, Z
     ac4:	8b b9       	out	0x0b, r24	; 11
			PORTE = EMASK;
     ac6:	87 e0       	ldi	r24, 0x07	; 7
     ac8:	8e b9       	out	0x0e, r24	; 14
		}
		if( (18 > curLed) && (17 <= curLed))	//E
     aca:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     ace:	81 31       	cpi	r24, 0x11	; 17
     ad0:	41 f4       	brne	.+16     	; 0xae2 <Next8+0x110>
		{
			PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     ad2:	8e ef       	ldi	r24, 0xFE	; 254
     ad4:	85 b9       	out	0x05, r24	; 5
			PORTC = CMASK;
     ad6:	8f e3       	ldi	r24, 0x3F	; 63
     ad8:	88 b9       	out	0x08, r24	; 8
			PORTD = DMASK;
     ada:	8f ef       	ldi	r24, 0xFF	; 255
     adc:	8b b9       	out	0x0b, r24	; 11
			PORTE = EMASK;
     ade:	87 e0       	ldi	r24, 0x07	; 7
     ae0:	8e b9       	out	0x0e, r24	; 14
		}
		
		if( (22 > curLed) && (18 <= curLed))	//F
     ae2:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     ae6:	8e ee       	ldi	r24, 0xEE	; 238
     ae8:	8e 0f       	add	r24, r30
     aea:	84 30       	cpi	r24, 0x04	; 4
     aec:	58 f4       	brcc	.+22     	; 0xb04 <Next8+0x132>
		{
			PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	ea 59       	subi	r30, 0x9A	; 154
     af2:	fe 4f       	sbci	r31, 0xFE	; 254
     af4:	80 81       	ld	r24, Z
     af6:	85 b9       	out	0x05, r24	; 5
			PORTC = CMASK;
     af8:	8f e3       	ldi	r24, 0x3F	; 63
     afa:	88 b9       	out	0x08, r24	; 8
			PORTD = DMASK;
     afc:	8f ef       	ldi	r24, 0xFF	; 255
     afe:	8b b9       	out	0x0b, r24	; 11
			PORTE = EMASK;
     b00:	87 e0       	ldi	r24, 0x07	; 7
     b02:	8e b9       	out	0x0e, r24	; 14
		}
		
		if( (25 > curLed) && (22 <= curLed))	//G
     b04:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     b08:	8a ee       	ldi	r24, 0xEA	; 234
     b0a:	8e 0f       	add	r24, r30
     b0c:	83 30       	cpi	r24, 0x03	; 3
     b0e:	58 f4       	brcc	.+22     	; 0xb26 <Next8+0x154>
		{
			PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	ea 59       	subi	r30, 0x9A	; 154
     b14:	fe 4f       	sbci	r31, 0xFE	; 254
     b16:	80 81       	ld	r24, Z
     b18:	85 b9       	out	0x05, r24	; 5
			PORTC = CMASK;
     b1a:	8f e3       	ldi	r24, 0x3F	; 63
     b1c:	88 b9       	out	0x08, r24	; 8
			PORTD = DMASK;
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	8b b9       	out	0x0b, r24	; 11
			PORTE = EMASK;
     b22:	87 e0       	ldi	r24, 0x07	; 7
     b24:	8e b9       	out	0x0e, r24	; 14
		}
		
	curLed = ((curLed + 1)%NUMLED_8);// + ((curLed + 1)/NUMLED);
     b26:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	69 e1       	ldi	r22, 0x19	; 25
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	0e 94 0a 14 	call	0x2814	; 0x2814 <__divmodhi4>
     b36:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <curLed>
     b3a:	08 95       	ret

00000b3c <Next9>:
}

void Next9(void)	//A B C D F G
{
	
	if(3 > curLed)		//A
     b3c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     b40:	83 30       	cpi	r24, 0x03	; 3
     b42:	68 f4       	brcc	.+26     	; 0xb5e <Next9+0x22>
	{
		PORTB = BMASK;
     b44:	9f ef       	ldi	r25, 0xFF	; 255
     b46:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     b48:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	e1 59       	subi	r30, 0x91	; 145
     b50:	fe 4f       	sbci	r31, 0xFE	; 254
     b52:	80 81       	ld	r24, Z
     b54:	8f 73       	andi	r24, 0x3F	; 63
     b56:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     b58:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     b5a:	87 e0       	ldi	r24, 0x07	; 7
     b5c:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
     b5e:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     b62:	83 50       	subi	r24, 0x03	; 3
     b64:	83 30       	cpi	r24, 0x03	; 3
     b66:	68 f4       	brcc	.+26     	; 0xb82 <Next9+0x46>
	{
		PORTB = BMASK;
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     b6c:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	e1 59       	subi	r30, 0x91	; 145
     b74:	fe 4f       	sbci	r31, 0xFE	; 254
     b76:	80 81       	ld	r24, Z
     b78:	8f 73       	andi	r24, 0x3F	; 63
     b7a:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     b7c:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     b7e:	87 e0       	ldi	r24, 0x07	; 7
     b80:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     b82:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     b86:	86 30       	cpi	r24, 0x06	; 6
     b88:	69 f4       	brne	.+26     	; 0xba4 <Next9+0x68>
	{
		PORTB = BMASK;
     b8a:	8f ef       	ldi	r24, 0xFF	; 255
     b8c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     b8e:	9f e3       	ldi	r25, 0x3F	; 63
     b90:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     b92:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     b94:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	e7 5a       	subi	r30, 0xA7	; 167
     b9c:	fe 4f       	sbci	r31, 0xFE	; 254
     b9e:	80 81       	ld	r24, Z
     ba0:	87 70       	andi	r24, 0x07	; 7
     ba2:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     ba4:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     ba8:	87 50       	subi	r24, 0x07	; 7
     baa:	82 30       	cpi	r24, 0x02	; 2
     bac:	68 f4       	brcc	.+26     	; 0xbc8 <Next9+0x8c>
	{
		PORTB = BMASK;
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     bb2:	9f e3       	ldi	r25, 0x3F	; 63
     bb4:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     bb6:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     bb8:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	e7 5a       	subi	r30, 0xA7	; 167
     bc0:	fe 4f       	sbci	r31, 0xFE	; 254
     bc2:	80 81       	ld	r24, Z
     bc4:	87 70       	andi	r24, 0x07	; 7
     bc6:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     bc8:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     bcc:	89 50       	subi	r24, 0x09	; 9
     bce:	82 30       	cpi	r24, 0x02	; 2
     bd0:	68 f4       	brcc	.+26     	; 0xbec <Next9+0xb0>
	{
		PORTB = BMASK;
     bd2:	8f ef       	ldi	r24, 0xFF	; 255
     bd4:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     bd6:	8f e3       	ldi	r24, 0x3F	; 63
     bd8:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     bda:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	e2 5a       	subi	r30, 0xA2	; 162
     be2:	fe 4f       	sbci	r31, 0xFE	; 254
     be4:	80 81       	ld	r24, Z
     be6:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     be8:	87 e0       	ldi	r24, 0x07	; 7
     bea:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
     bec:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     bf0:	8b 50       	subi	r24, 0x0B	; 11
     bf2:	83 30       	cpi	r24, 0x03	; 3
     bf4:	68 f4       	brcc	.+26     	; 0xc10 <Next9+0xd4>
	{
		PORTB = BMASK;
     bf6:	8f ef       	ldi	r24, 0xFF	; 255
     bf8:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     bfa:	8f e3       	ldi	r24, 0x3F	; 63
     bfc:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     bfe:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	e2 5a       	subi	r30, 0xA2	; 162
     c06:	fe 4f       	sbci	r31, 0xFE	; 254
     c08:	80 81       	ld	r24, Z
     c0a:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     c0c:	87 e0       	ldi	r24, 0x07	; 7
     c0e:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
     c10:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     c14:	8e ee       	ldi	r24, 0xEE	; 238
     c16:	8e 0f       	add	r24, r30
     c18:	84 30       	cpi	r24, 0x04	; 4
     c1a:	58 f4       	brcc	.+22     	; 0xc32 <Next9+0xf6>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	ea 59       	subi	r30, 0x9A	; 154
     c20:	fe 4f       	sbci	r31, 0xFE	; 254
     c22:	80 81       	ld	r24, Z
     c24:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     c2a:	8f ef       	ldi	r24, 0xFF	; 255
     c2c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     c2e:	87 e0       	ldi	r24, 0x07	; 7
     c30:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
     c32:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <curLed>
     c36:	8a ee       	ldi	r24, 0xEA	; 234
     c38:	8e 0f       	add	r24, r30
     c3a:	83 30       	cpi	r24, 0x03	; 3
     c3c:	58 f4       	brcc	.+22     	; 0xc54 <Next9+0x118>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	ea 59       	subi	r30, 0x9A	; 154
     c42:	fe 4f       	sbci	r31, 0xFE	; 254
     c44:	80 81       	ld	r24, Z
     c46:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     c48:	8f e3       	ldi	r24, 0x3F	; 63
     c4a:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     c4c:	8f ef       	ldi	r24, 0xFF	; 255
     c4e:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     c50:	87 e0       	ldi	r24, 0x07	; 7
     c52:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED_9);// + ((curLed + 1)/NUMLED);
     c54:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	65 e1       	ldi	r22, 0x15	; 21
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	0e 94 0a 14 	call	0x2814	; 0x2814 <__divmodhi4>
     c64:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <curLed>
     c68:	08 95       	ret

00000c6a <ReportScore>:
}

void ReportScore(uint8_t S)
{
	uint8_t hundreds = S/100;
     c6a:	29 e2       	ldi	r18, 0x29	; 41
     c6c:	82 9f       	mul	r24, r18
     c6e:	21 2d       	mov	r18, r1
     c70:	11 24       	eor	r1, r1
     c72:	22 95       	swap	r18
     c74:	2f 70       	andi	r18, 0x0F	; 15
	uint8_t remainder = S%100;
     c76:	34 e6       	ldi	r19, 0x64	; 100
     c78:	23 9f       	mul	r18, r19
     c7a:	80 19       	sub	r24, r0
     c7c:	11 24       	eor	r1, r1
	uint8_t tens = remainder/10;
     c7e:	9d ec       	ldi	r25, 0xCD	; 205
     c80:	89 9f       	mul	r24, r25
     c82:	91 2d       	mov	r25, r1
     c84:	11 24       	eor	r1, r1
     c86:	96 95       	lsr	r25
     c88:	96 95       	lsr	r25
     c8a:	96 95       	lsr	r25
	remainder = remainder%10;
     c8c:	49 2f       	mov	r20, r25
     c8e:	44 0f       	add	r20, r20
     c90:	34 2f       	mov	r19, r20
     c92:	33 0f       	add	r19, r19
     c94:	33 0f       	add	r19, r19
     c96:	34 0f       	add	r19, r20
     c98:	83 1b       	sub	r24, r19
	uint8_t ones = remainder;
	if(hundreds)
     c9a:	22 23       	and	r18, r18
     c9c:	61 f0       	breq	.+24     	; 0xcb6 <ReportScore+0x4c>
	{
		ledMode = hundreds + 3;			//Definitions of ledModes for displaying digits is the digit value + 3...
     c9e:	2d 5f       	subi	r18, 0xFD	; 253
     ca0:	20 93 88 01 	sts	0x0188, r18	; 0x800188 <ledMode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ca4:	4f e7       	ldi	r20, 0x7F	; 127
     ca6:	2f e4       	ldi	r18, 0x4F	; 79
     ca8:	32 e1       	ldi	r19, 0x12	; 18
     caa:	41 50       	subi	r20, 0x01	; 1
     cac:	20 40       	sbci	r18, 0x00	; 0
     cae:	30 40       	sbci	r19, 0x00	; 0
     cb0:	e1 f7       	brne	.-8      	; 0xcaa <ReportScore+0x40>
     cb2:	00 c0       	rjmp	.+0      	; 0xcb4 <ReportScore+0x4a>
     cb4:	00 00       	nop
		_delay_ms(750);
	}
	if(tens)
     cb6:	99 23       	and	r25, r25
     cb8:	61 f0       	breq	.+24     	; 0xcd2 <ReportScore+0x68>
	{
		ledMode = tens + 3;				//Definitions of ledModes for displaying digits is the digit value + 3...
     cba:	9d 5f       	subi	r25, 0xFD	; 253
     cbc:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <ledMode>
     cc0:	4f e7       	ldi	r20, 0x7F	; 127
     cc2:	9f e4       	ldi	r25, 0x4F	; 79
     cc4:	22 e1       	ldi	r18, 0x12	; 18
     cc6:	41 50       	subi	r20, 0x01	; 1
     cc8:	90 40       	sbci	r25, 0x00	; 0
     cca:	20 40       	sbci	r18, 0x00	; 0
     ccc:	e1 f7       	brne	.-8      	; 0xcc6 <ReportScore+0x5c>
     cce:	00 c0       	rjmp	.+0      	; 0xcd0 <ReportScore+0x66>
     cd0:	00 00       	nop
		_delay_ms(750);
	}
	ledMode = ones + 3;
     cd2:	8d 5f       	subi	r24, 0xFD	; 253
     cd4:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <ledMode>
     cd8:	3f e7       	ldi	r19, 0x7F	; 127
     cda:	4f e4       	ldi	r20, 0x4F	; 79
     cdc:	82 e1       	ldi	r24, 0x12	; 18
     cde:	31 50       	subi	r19, 0x01	; 1
     ce0:	40 40       	sbci	r20, 0x00	; 0
     ce2:	80 40       	sbci	r24, 0x00	; 0
     ce4:	e1 f7       	brne	.-8      	; 0xcde <ReportScore+0x74>
     ce6:	00 c0       	rjmp	.+0      	; 0xce8 <ReportScore+0x7e>
     ce8:	00 00       	nop
     cea:	08 95       	ret

00000cec <main>:
{
	uint8_t key_status0 = 0;
	//uint8_t key_status1 = 0;

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     cec:	0e 94 85 00 	call	0x10a	; 0x10a <atmel_start_init>
	init();
     cf0:	0e 94 b5 00 	call	0x16a	; 0x16a <init>
	ledIntEnable();
     cf4:	0e 94 af 00 	call	0x15e	; 0x15e <ledIntEnable>
const uint8_t	LED_BANKE_TAB[] = {	(EMASK&~(0b1<<0)),	(EMASK&~(0b1<<1)),	(EMASK&~(0b1<<2)),	(EMASK&~(0b1<<3)),	(EMASK&~(0b1<<4)),	(EMASK&~(0b1<<5)),	(EMASK&~(0b1<<6)),	(EMASK&~(0b1<<7))};


void ledIntSetup(void)
{
	OCR2B = 0xFF;				//Set Timer 0 INT B Compare Register value.
     cf8:	8f ef       	ldi	r24, 0xFF	; 255
     cfa:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	atmel_start_init();
	init();
	ledIntEnable();
	ledIntSetup();
	/* Enable interrupts */
	cpu_irq_enable();
     cfe:	78 94       	sei

			key_status0 = get_sensor_state(0) & 0x80;

			if ((0u != key_status0))
			{
				ledMode = PAUSEDMODE;	
     d00:	c2 e0       	ldi	r28, 0x02	; 2
				}
				else
				{
					ReportScore(score);
					score = 0;				//Reset game to start state...
					ledMode = NORMALMODE;
     d02:	d1 e0       	ldi	r29, 0x01	; 1
	/** If any of the two self-capacitance buttons is touched, the LED is turned ON
	 * When touch is released, the LED is turned OFF
	 */
	while (1) {
		/* Does acquisition and post-processing */
		touch_process();
     d04:	0e 94 96 07 	call	0xf2c	; 0xf2c <touch_process>
		if (measurement_done_touch == 1) {
     d08:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <measurement_done_touch>
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	d1 f7       	brne	.-12     	; 0xd04 <main+0x18>
			measurement_done_touch = 0;
     d10:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <measurement_done_touch>

			key_status0 = get_sensor_state(0) & 0x80;
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 de 07 	call	0xfbc	; 0xfbc <get_sensor_state>

			if ((0u != key_status0))
     d1c:	88 23       	and	r24, r24
     d1e:	94 f7       	brge	.-28     	; 0xd04 <main+0x18>
			{
				ledMode = PAUSEDMODE;	
     d20:	c0 93 88 01 	sts	0x0188, r28	; 0x800188 <ledMode>
				if(TARGETLED == curLed)		// Target Hit!
     d24:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <curLed>
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	31 f4       	brne	.+12     	; 0xd38 <main+0x4c>
				{
					score++;
     d2c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <score>
     d30:	8f 5f       	subi	r24, 0xFF	; 255
     d32:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <score>
     d36:	e6 cf       	rjmp	.-52     	; 0xd04 <main+0x18>
				}
				else
				{
					ReportScore(score);
     d38:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <score>
     d3c:	0e 94 35 06 	call	0xc6a	; 0xc6a <ReportScore>
					score = 0;				//Reset game to start state...
     d40:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <score>
					ledMode = NORMALMODE;
     d44:	d0 93 88 01 	sts	0x0188, r29	; 0x800188 <ledMode>
     d48:	dd cf       	rjmp	.-70     	; 0xd04 <main+0x18>

00000d4a <__vector_15>:
		}
	}
}

ISR (TIMER0_COMPB_vect)
{
     d4a:	1f 92       	push	r1
     d4c:	0f 92       	push	r0
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	0f 92       	push	r0
     d52:	11 24       	eor	r1, r1
     d54:	2f 93       	push	r18
     d56:	3f 93       	push	r19
     d58:	4f 93       	push	r20
     d5a:	5f 93       	push	r21
     d5c:	6f 93       	push	r22
     d5e:	7f 93       	push	r23
     d60:	8f 93       	push	r24
     d62:	9f 93       	push	r25
     d64:	af 93       	push	r26
     d66:	bf 93       	push	r27
     d68:	ef 93       	push	r30
     d6a:	ff 93       	push	r31
	switch(ledMode)
     d6c:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <ledMode>
     d70:	8e 2f       	mov	r24, r30
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	fc 01       	movw	r30, r24
     d76:	31 97       	sbiw	r30, 0x01	; 1
     d78:	ec 30       	cpi	r30, 0x0C	; 12
     d7a:	f1 05       	cpc	r31, r1
     d7c:	08 f0       	brcs	.+2      	; 0xd80 <__vector_15+0x36>
     d7e:	43 c0       	rjmp	.+134    	; 0xe06 <__vector_15+0xbc>
     d80:	e6 5a       	subi	r30, 0xA6	; 166
     d82:	ff 4f       	sbci	r31, 0xFF	; 255
     d84:	0c 94 1e 14 	jmp	0x283c	; 0x283c <__tablejump2__>
	{
		case NORMALMODE:
			if(150 == cScaler)	//cScaler of 16 is fast but okay, 100 is slow enough to check each LED
     d88:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <cScaler>
     d8c:	86 39       	cpi	r24, 0x96	; 150
     d8e:	21 f4       	brne	.+8      	; 0xd98 <__vector_15+0x4e>
			{
				NextLed();
     d90:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <NextLed>
				cScaler = 0;
     d94:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <cScaler>
			}
			cScaler++;
     d98:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <cScaler>
     d9c:	8f 5f       	subi	r24, 0xFF	; 255
     d9e:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <cScaler>
			break;
     da2:	31 c0       	rjmp	.+98     	; 0xe06 <__vector_15+0xbc>
		
		case PAUSEDMODE:
			delayScaler++;
     da4:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end>
     da8:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <__data_end+0x1>
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <__data_end+0x1>
     db2:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__data_end>
			if(3000 == delayScaler)
     db6:	88 3b       	cpi	r24, 0xB8	; 184
     db8:	9b 40       	sbci	r25, 0x0B	; 11
     dba:	29 f5       	brne	.+74     	; 0xe06 <__vector_15+0xbc>
			{
				ledMode = NORMALMODE;
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <ledMode>
				delayScaler = 0;
     dc2:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <__data_end+0x1>
     dc6:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <__data_end>
     dca:	1d c0       	rjmp	.+58     	; 0xe06 <__vector_15+0xbc>
			}
			break;
		
		case DISPLAY0:
			Next0();
     dcc:	0e 94 23 01 	call	0x246	; 0x246 <Next0>
			break;
     dd0:	1a c0       	rjmp	.+52     	; 0xe06 <__vector_15+0xbc>
		
		case DISPLAY1:
			Next1();
     dd2:	0e 94 c7 01 	call	0x38e	; 0x38e <Next1>
			break;
     dd6:	17 c0       	rjmp	.+46     	; 0xe06 <__vector_15+0xbc>
		
		case DISPLAY2:
			Next2();
     dd8:	0e 94 06 02 	call	0x40c	; 0x40c <Next2>
			break;
     ddc:	14 c0       	rjmp	.+40     	; 0xe06 <__vector_15+0xbc>
		
		case DISPLAY3:
			Next3();
     dde:	0e 94 86 02 	call	0x50c	; 0x50c <Next3>
			break;
     de2:	11 c0       	rjmp	.+34     	; 0xe06 <__vector_15+0xbc>
		
		case DISPLAY4:
			Next4();
     de4:	0e 94 0c 03 	call	0x618	; 0x618 <Next4>
			break;
     de8:	0e c0       	rjmp	.+28     	; 0xe06 <__vector_15+0xbc>
		
		case DISPLAY5:
			Next5();
     dea:	0e 94 80 03 	call	0x700	; 0x700 <Next5>
			break;
     dee:	0b c0       	rjmp	.+22     	; 0xe06 <__vector_15+0xbc>
		
		case DISPLAY6:
			Next6();
     df0:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <Next6>
			break;
     df4:	08 c0       	rjmp	.+16     	; 0xe06 <__vector_15+0xbc>
			
		case DISPLAY7:
			Next7();
     df6:	0e 94 86 04 	call	0x90c	; 0x90c <Next7>
			break;
     dfa:	05 c0       	rjmp	.+10     	; 0xe06 <__vector_15+0xbc>
			
		case DISPLAY8:
			Next8();
     dfc:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <Next8>
			break;
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <__vector_15+0xbc>
			
		case DISPLAY9:
			Next9();
     e02:	0e 94 9e 05 	call	0xb3c	; 0xb3c <Next9>
			break;
		
		default:
		break;
	}
     e06:	ff 91       	pop	r31
     e08:	ef 91       	pop	r30
     e0a:	bf 91       	pop	r27
     e0c:	af 91       	pop	r26
     e0e:	9f 91       	pop	r25
     e10:	8f 91       	pop	r24
     e12:	7f 91       	pop	r23
     e14:	6f 91       	pop	r22
     e16:	5f 91       	pop	r21
     e18:	4f 91       	pop	r20
     e1a:	3f 91       	pop	r19
     e1c:	2f 91       	pop	r18
     e1e:	0f 90       	pop	r0
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	0f 90       	pop	r0
     e24:	1f 90       	pop	r1
     e26:	18 95       	reti

00000e28 <qtm_measure_complete_callback>:
{
	/* Calibrate Node */
	qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
	/* Initialize key */
	qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
}
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <touch_postprocess_request>
     e2e:	08 95       	ret

00000e30 <qtm_post_process_complete>:
     e30:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <qtlib_key_set1>
     e34:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <qtlib_key_set1+0x1>
     e38:	80 81       	ld	r24, Z
     e3a:	88 23       	and	r24, r24
     e3c:	44 f4       	brge	.+16     	; 0xe4e <qtm_post_process_complete+0x1e>
     e3e:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <p_qtm_control>
     e42:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <p_qtm_control+0x1>
     e46:	80 81       	ld	r24, Z
     e48:	84 60       	ori	r24, 0x04	; 4
     e4a:	80 83       	st	Z, r24
     e4c:	08 95       	ret
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <measurement_done_touch>
     e54:	08 95       	ret

00000e56 <qtm_error_callback>:
     e56:	88 23       	and	r24, r24
     e58:	24 f4       	brge	.+8      	; 0xe62 <qtm_error_callback+0xc>
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <module_error_code>
     e60:	08 95       	ret
     e62:	86 fd       	sbrc	r24, 6
     e64:	03 c0       	rjmp	.+6      	; 0xe6c <qtm_error_callback+0x16>
     e66:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <module_error_code>
     e6a:	08 95       	ret
     e6c:	8f 70       	andi	r24, 0x0F	; 15
     e6e:	8e 5f       	subi	r24, 0xFE	; 254
     e70:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <module_error_code>
     e74:	08 95       	ret

00000e76 <init_complete_callback>:
     e76:	8a eb       	ldi	r24, 0xBA	; 186
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	0e 94 67 12 	call	0x24ce	; 0x24ce <qtm_ptc_qtlib_assign_signal_memory>
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	8a e4       	ldi	r24, 0x4A	; 74
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <qtm_enable_sensor_node>
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	8a e4       	ldi	r24, 0x4A	; 74
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	0e 94 89 13 	call	0x2712	; 0x2712 <qtm_calibrate_sensor_node>
     e96:	45 eb       	ldi	r20, 0xB5	; 181
     e98:	51 e0       	ldi	r21, 0x01	; 1
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	8c e1       	ldi	r24, 0x1C	; 28
     e9e:	91 e0       	ldi	r25, 0x01	; 1
     ea0:	0e 94 c0 08 	call	0x1180	; 0x1180 <qtm_init_sensor_key>
     ea4:	08 95       	ret

00000ea6 <touch_init>:
     ea6:	88 e0       	ldi	r24, 0x08	; 8
     ea8:	87 bd       	out	0x27, r24	; 39
     eaa:	e5 e6       	ldi	r30, 0x65	; 101
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8f 7e       	andi	r24, 0xEF	; 239
     eb2:	80 83       	st	Z, r24
     eb4:	73 98       	cbi	0x0e, 3	; 14
     eb6:	ee eb       	ldi	r30, 0xBE	; 190
     eb8:	f1 e0       	ldi	r31, 0x01	; 1
     eba:	10 82       	st	Z, r1
     ebc:	88 e1       	ldi	r24, 0x18	; 24
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	92 83       	std	Z+2, r25	; 0x02
     ec2:	81 83       	std	Z+1, r24	; 0x01
     ec4:	82 e1       	ldi	r24, 0x12	; 18
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	94 83       	std	Z+4, r25	; 0x04
     eca:	83 83       	std	Z+3, r24	; 0x03
     ecc:	8a e0       	ldi	r24, 0x0A	; 10
     ece:	91 e0       	ldi	r25, 0x01	; 1
     ed0:	96 83       	std	Z+6, r25	; 0x06
     ed2:	85 83       	std	Z+5, r24	; 0x05
     ed4:	8e e0       	ldi	r24, 0x0E	; 14
     ed6:	91 e0       	ldi	r25, 0x01	; 1
     ed8:	90 87       	std	Z+8, r25	; 0x08
     eda:	87 83       	std	Z+7, r24	; 0x07
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	92 87       	std	Z+10, r25	; 0x0a
     ee2:	81 87       	std	Z+9, r24	; 0x09
     ee4:	86 e0       	ldi	r24, 0x06	; 6
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	94 87       	std	Z+12, r25	; 0x0c
     eea:	83 87       	std	Z+11, r24	; 0x0b
     eec:	89 e7       	ldi	r24, 0x79	; 121
     eee:	90 e1       	ldi	r25, 0x10	; 16
     ef0:	96 87       	std	Z+14, r25	; 0x0e
     ef2:	85 87       	std	Z+13, r24	; 0x0d
     ef4:	8b e3       	ldi	r24, 0x3B	; 59
     ef6:	97 e0       	ldi	r25, 0x07	; 7
     ef8:	90 8b       	std	Z+16, r25	; 0x10
     efa:	87 87       	std	Z+15, r24	; 0x0f
     efc:	8b e2       	ldi	r24, 0x2B	; 43
     efe:	97 e0       	ldi	r25, 0x07	; 7
     f00:	92 8b       	std	Z+18, r25	; 0x12
     f02:	81 8b       	std	Z+17, r24	; 0x11
     f04:	84 e1       	ldi	r24, 0x14	; 20
     f06:	97 e0       	ldi	r25, 0x07	; 7
     f08:	94 8b       	std	Z+20, r25	; 0x14
     f0a:	83 8b       	std	Z+19, r24	; 0x13
     f0c:	16 8a       	std	Z+22, r1	; 0x16
     f0e:	15 8a       	std	Z+21, r1	; 0x15
     f10:	88 e1       	ldi	r24, 0x18	; 24
     f12:	97 e0       	ldi	r25, 0x07	; 7
     f14:	90 8f       	std	Z+24, r25	; 0x18
     f16:	87 8b       	std	Z+23, r24	; 0x17
     f18:	cf 01       	movw	r24, r30
     f1a:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <qtm_binding_layer_init>
     f1e:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <qmt_get_binding_layer_ptr>
     f22:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <p_qtm_control+0x1>
     f26:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <p_qtm_control>
     f2a:	08 95       	ret

00000f2c <touch_process>:
     f2c:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <time_to_measure_touch_flag>
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	39 f4       	brne	.+14     	; 0xf42 <touch_process+0x16>
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <qtm_lib_start_acquisition>
     f3a:	81 11       	cpse	r24, r1
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <touch_process+0x16>
     f3e:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <time_to_measure_touch_flag>
     f42:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <touch_postprocess_request>
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	c9 f4       	brne	.+50     	; 0xf7c <touch_process+0x50>
     f4a:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <qtm_lib_acq_process>
     f4e:	81 11       	cpse	r24, r1
     f50:	03 c0       	rjmp	.+6      	; 0xf58 <touch_process+0x2c>
     f52:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <qtm_lib_post_process>
     f56:	03 c0       	rjmp	.+6      	; 0xf5e <touch_process+0x32>
     f58:	80 e8       	ldi	r24, 0x80	; 128
     f5a:	0e 94 2b 07 	call	0xe56	; 0xe56 <qtm_error_callback>
     f5e:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <touch_postprocess_request>
     f62:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <p_qtm_control>
     f66:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <p_qtm_control+0x1>
     f6a:	80 81       	ld	r24, Z
     f6c:	82 ff       	sbrs	r24, 2
     f6e:	06 c0       	rjmp	.+12     	; 0xf7c <touch_process+0x50>
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <time_to_measure_touch_flag>
     f76:	80 81       	ld	r24, Z
     f78:	8b 7f       	andi	r24, 0xFB	; 251
     f7a:	80 83       	st	Z, r24
     f7c:	08 95       	ret

00000f7e <touch_timer_handler>:
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <time_to_measure_touch_flag>
     f84:	84 e1       	ldi	r24, 0x14	; 20
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0e 94 b5 08 	call	0x116a	; 0x116a <qtm_update_qtlib_timer>
     f8c:	08 95       	ret

00000f8e <mega_touch_timer>:
     f8e:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <touch_time_counter.2416>
     f92:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <touch_time_counter.2416+0x1>
     f96:	44 97       	sbiw	r24, 0x14	; 20
     f98:	39 f4       	brne	.+14     	; 0xfa8 <mega_touch_timer+0x1a>
     f9a:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <touch_time_counter.2416+0x1>
     f9e:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <touch_time_counter.2416>
     fa2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <touch_timer_handler>
     fa6:	08 95       	ret
     fa8:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <touch_time_counter.2416>
     fac:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <touch_time_counter.2416+0x1>
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <touch_time_counter.2416+0x1>
     fb6:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <touch_time_counter.2416>
     fba:	08 95       	ret

00000fbc <get_sensor_state>:
     fbc:	9c 01       	movw	r18, r24
     fbe:	22 0f       	add	r18, r18
     fc0:	33 1f       	adc	r19, r19
     fc2:	82 0f       	add	r24, r18
     fc4:	93 1f       	adc	r25, r19
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <qtlib_key_set1+0x4>
     fce:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <qtlib_key_set1+0x5>
     fd2:	e8 0f       	add	r30, r24
     fd4:	f9 1f       	adc	r31, r25
     fd6:	80 81       	ld	r24, Z
     fd8:	08 95       	ret

00000fda <__vector_37>:
Input  : none
Output : none
Notes  : none
============================================================================*/
ISR(PTC_EOC_vect)
{
     fda:	1f 92       	push	r1
     fdc:	0f 92       	push	r0
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	0f 92       	push	r0
     fe2:	11 24       	eor	r1, r1
     fe4:	2f 93       	push	r18
     fe6:	3f 93       	push	r19
     fe8:	4f 93       	push	r20
     fea:	5f 93       	push	r21
     fec:	6f 93       	push	r22
     fee:	7f 93       	push	r23
     ff0:	8f 93       	push	r24
     ff2:	9f 93       	push	r25
     ff4:	af 93       	push	r26
     ff6:	bf 93       	push	r27
     ff8:	ef 93       	push	r30
     ffa:	ff 93       	push	r31
	qtm_m328pb_ptc_handler_eoc();
     ffc:	0e 94 c9 13 	call	0x2792	; 0x2792 <qtm_m328pb_ptc_handler_eoc>
}
    1000:	ff 91       	pop	r31
    1002:	ef 91       	pop	r30
    1004:	bf 91       	pop	r27
    1006:	af 91       	pop	r26
    1008:	9f 91       	pop	r25
    100a:	8f 91       	pop	r24
    100c:	7f 91       	pop	r23
    100e:	6f 91       	pop	r22
    1010:	5f 91       	pop	r21
    1012:	4f 91       	pop	r20
    1014:	3f 91       	pop	r19
    1016:	2f 91       	pop	r18
    1018:	0f 90       	pop	r0
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	0f 90       	pop	r0
    101e:	1f 90       	pop	r1
    1020:	18 95       	reti

00001022 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
    1022:	8d e3       	ldi	r24, 0x3D	; 61
    1024:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f8065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
    1028:	8f ef       	ldi	r24, 0xFF	; 255
    102a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
    102e:	94 b1       	in	r25, 0x04	; 4
    1030:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
    1032:	95 b1       	in	r25, 0x05	; 5
    1034:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
    1036:	97 b1       	in	r25, 0x07	; 7
    1038:	90 78       	andi	r25, 0x80	; 128
    103a:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
    103c:	98 b1       	in	r25, 0x08	; 8
    103e:	9f 67       	ori	r25, 0x7F	; 127
    1040:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
    1042:	9a b1       	in	r25, 0x0a	; 10
    1044:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
    1046:	9b b1       	in	r25, 0x0b	; 11
    1048:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
    104a:	8d b1       	in	r24, 0x0d	; 13
    104c:	80 7f       	andi	r24, 0xF0	; 240
    104e:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
    1050:	8e b1       	in	r24, 0x0e	; 14
    1052:	8f 60       	ori	r24, 0x0F	; 15
    1054:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
    1056:	40 e0       	ldi	r20, 0x00	; 0
    1058:	60 e8       	ldi	r22, 0x80	; 128
    105a:	81 e6       	ldi	r24, 0x61	; 97
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 38 08 	call	0x1070	; 0x1070 <protected_write_io>

	SMCR = (0 << SM2) | (1 << SM1) | (1 << SM0) | // Power Save
    1062:	86 e0       	ldi	r24, 0x06	; 6
    1064:	83 bf       	out	0x33, r24	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
    1066:	15 be       	out	0x35, r1	; 53

	ENABLE_INTERRUPTS();
    1068:	78 94       	sei
#include <system.h>

void Timer_initialization(void)
{

	Timer_init();
    106a:	0e 94 3f 08 	call	0x107e	; 0x107e <Timer_init>
    106e:	08 95       	ret

00001070 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
    1070:	2f b7       	in	r18, 0x3f	; 63
	cli
    1072:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
    1074:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
    1076:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
    1078:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
    107a:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
    107c:	08 95       	ret

0000107e <Timer_init>:
 */
int8_t Timer_init()
{

	/* Enable TC0 */
	PRR0 &= ~(1 << PRTIM0);
    107e:	e4 e6       	ldi	r30, 0x64	; 100
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	8f 7d       	andi	r24, 0xDF	; 223
    1086:	80 83       	st	Z, r24

	TCCR0A = (0 << COM0A1) | (0 << COM0A0)   /* Normal port operation, OCA disconnected */
    1088:	82 e0       	ldi	r24, 0x02	; 2
    108a:	84 bd       	out	0x24, r24	; 36
	         | (0 << COM0B1) | (0 << COM0B0) /* Normal port operation, OCB disconnected */
	         | (1 << WGM01) | (0 << WGM00);  /* TC8 Mode 2 CTC */

	TCCR0B = 0                                          /* TC8 Mode 2 CTC */
    108c:	95 e0       	ldi	r25, 0x05	; 5
    108e:	95 bd       	out	0x25, r25	; 37
			 | (1 << CS02) | (0 << CS01) | (1 << CS00); /* IO clock divided by 1024 */
			
	TIMSK0 = 0 << OCIE0B   /* Output Compare B Match Interrupt Enable: disabled */
    1090:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	// GTCCR = 0 << TSM /* Timer/Counter Synchronization Mode: disabled */
	//		 | 0 << PSRASY /* Prescaler Reset Timer/Counter2: disabled */
	//		 | 0 << PSRSYNC; /* Prescaler Reset: disabled */

	return 0;
}
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	08 95       	ret

00001098 <check_for_aks_block>:
    1098:	cf 92       	push	r12
    109a:	df 92       	push	r13
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	ec 01       	movw	r28, r24
    10a8:	ae 81       	ldd	r26, Y+6	; 0x06
    10aa:	bf 81       	ldd	r27, Y+7	; 0x07
    10ac:	eb 01       	movw	r28, r22
    10ae:	cc 0f       	add	r28, r28
    10b0:	dd 1f       	adc	r29, r29
    10b2:	c6 0f       	add	r28, r22
    10b4:	d7 1f       	adc	r29, r23
    10b6:	ca 0f       	add	r28, r26
    10b8:	db 1f       	adc	r29, r27
    10ba:	fa 80       	ldd	r15, Y+2	; 0x02
    10bc:	fc 01       	movw	r30, r24
    10be:	44 81       	ldd	r20, Z+4	; 0x04
    10c0:	55 81       	ldd	r21, Z+5	; 0x05
    10c2:	e6 e0       	ldi	r30, 0x06	; 6
    10c4:	e6 9f       	mul	r30, r22
    10c6:	90 01       	movw	r18, r0
    10c8:	e7 9f       	mul	r30, r23
    10ca:	30 0d       	add	r19, r0
    10cc:	11 24       	eor	r1, r1
    10ce:	8a 01       	movw	r16, r20
    10d0:	02 0f       	add	r16, r18
    10d2:	13 1f       	adc	r17, r19
    10d4:	f8 01       	movw	r30, r16
    10d6:	22 81       	ldd	r18, Z+2	; 0x02
    10d8:	33 81       	ldd	r19, Z+3	; 0x03
    10da:	f9 01       	movw	r30, r18
    10dc:	21 81       	ldd	r18, Z+1	; 0x01
    10de:	32 81       	ldd	r19, Z+2	; 0x02
    10e0:	f8 01       	movw	r30, r16
    10e2:	04 81       	ldd	r16, Z+4	; 0x04
    10e4:	15 81       	ldd	r17, Z+5	; 0x05
    10e6:	20 1b       	sub	r18, r16
    10e8:	31 0b       	sbc	r19, r17
    10ea:	e8 81       	ld	r30, Y
    10ec:	2e 1b       	sub	r18, r30
    10ee:	31 09       	sbc	r19, r1
    10f0:	ec 01       	movw	r28, r24
    10f2:	ea 81       	ldd	r30, Y+2	; 0x02
    10f4:	fb 81       	ldd	r31, Y+3	; 0x03
    10f6:	00 81       	ld	r16, Z
    10f8:	11 81       	ldd	r17, Z+1	; 0x01
    10fa:	fa 01       	movw	r30, r20
    10fc:	40 e0       	ldi	r20, 0x00	; 0
    10fe:	50 e0       	ldi	r21, 0x00	; 0
    1100:	40 17       	cp	r20, r16
    1102:	51 07       	cpc	r21, r17
    1104:	39 f1       	breq	.+78     	; 0x1154 <check_for_aks_block+0xbc>
    1106:	46 17       	cp	r20, r22
    1108:	57 07       	cpc	r21, r23
    110a:	f9 f0       	breq	.+62     	; 0x114a <check_for_aks_block+0xb2>
    110c:	12 96       	adiw	r26, 0x02	; 2
    110e:	8c 91       	ld	r24, X
    1110:	12 97       	sbiw	r26, 0x02	; 2
    1112:	f8 12       	cpse	r15, r24
    1114:	1a c0       	rjmp	.+52     	; 0x114a <check_for_aks_block+0xb2>
    1116:	80 81       	ld	r24, Z
    1118:	85 58       	subi	r24, 0x85	; 133
    111a:	82 30       	cpi	r24, 0x02	; 2
    111c:	e8 f0       	brcs	.+58     	; 0x1158 <check_for_aks_block+0xc0>
    111e:	c4 80       	ldd	r12, Z+4	; 0x04
    1120:	d5 80       	ldd	r13, Z+5	; 0x05
    1122:	82 81       	ldd	r24, Z+2	; 0x02
    1124:	93 81       	ldd	r25, Z+3	; 0x03
    1126:	ec 01       	movw	r28, r24
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	9a 81       	ldd	r25, Y+2	; 0x02
    112c:	c8 16       	cp	r12, r24
    112e:	d9 06       	cpc	r13, r25
    1130:	60 f4       	brcc	.+24     	; 0x114a <check_for_aks_block+0xb2>
    1132:	8c 19       	sub	r24, r12
    1134:	9d 09       	sbc	r25, r13
    1136:	cc 91       	ld	r28, X
    1138:	d0 e0       	ldi	r29, 0x00	; 0
    113a:	c8 17       	cp	r28, r24
    113c:	d9 07       	cpc	r29, r25
    113e:	28 f4       	brcc	.+10     	; 0x114a <check_for_aks_block+0xb2>
    1140:	8c 1b       	sub	r24, r28
    1142:	9d 0b       	sbc	r25, r29
    1144:	28 17       	cp	r18, r24
    1146:	39 07       	cpc	r19, r25
    1148:	38 f0       	brcs	.+14     	; 0x1158 <check_for_aks_block+0xc0>
    114a:	4f 5f       	subi	r20, 0xFF	; 255
    114c:	5f 4f       	sbci	r21, 0xFF	; 255
    114e:	13 96       	adiw	r26, 0x03	; 3
    1150:	36 96       	adiw	r30, 0x06	; 6
    1152:	d6 cf       	rjmp	.-84     	; 0x1100 <check_for_aks_block+0x68>
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	01 c0       	rjmp	.+2      	; 0x115a <check_for_aks_block+0xc2>
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	ff 90       	pop	r15
    1164:	df 90       	pop	r13
    1166:	cf 90       	pop	r12
    1168:	08 95       	ret

0000116a <qtm_update_qtlib_timer>:
    116a:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <qtm_local_ms_timecount>
    116e:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <qtm_local_ms_timecount+0x1>
    1172:	82 0f       	add	r24, r18
    1174:	93 1f       	adc	r25, r19
    1176:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <qtm_local_ms_timecount+0x1>
    117a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <qtm_local_ms_timecount>
    117e:	08 95       	ret

00001180 <qtm_init_sensor_key>:
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	d9 f0       	breq	.+54     	; 0x11ba <qtm_init_sensor_key+0x3a>
    1184:	41 15       	cp	r20, r1
    1186:	51 05       	cpc	r21, r1
    1188:	c1 f0       	breq	.+48     	; 0x11ba <qtm_init_sensor_key+0x3a>
    118a:	26 e0       	ldi	r18, 0x06	; 6
    118c:	62 9f       	mul	r22, r18
    118e:	b0 01       	movw	r22, r0
    1190:	11 24       	eor	r1, r1
    1192:	dc 01       	movw	r26, r24
    1194:	14 96       	adiw	r26, 0x04	; 4
    1196:	ed 91       	ld	r30, X+
    1198:	fc 91       	ld	r31, X
    119a:	15 97       	sbiw	r26, 0x05	; 5
    119c:	e6 0f       	add	r30, r22
    119e:	f7 1f       	adc	r31, r23
    11a0:	21 e0       	ldi	r18, 0x01	; 1
    11a2:	20 83       	st	Z, r18
    11a4:	14 96       	adiw	r26, 0x04	; 4
    11a6:	8d 91       	ld	r24, X+
    11a8:	9c 91       	ld	r25, X
    11aa:	15 97       	sbiw	r26, 0x05	; 5
    11ac:	fc 01       	movw	r30, r24
    11ae:	e6 0f       	add	r30, r22
    11b0:	f7 1f       	adc	r31, r23
    11b2:	53 83       	std	Z+3, r21	; 0x03
    11b4:	42 83       	std	Z+2, r20	; 0x02
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	08 95       	ret
    11ba:	8b e0       	ldi	r24, 0x0B	; 11
    11bc:	08 95       	ret

000011be <qtm_key_sensors_process>:
    11be:	2f 92       	push	r2
    11c0:	3f 92       	push	r3
    11c2:	4f 92       	push	r4
    11c4:	5f 92       	push	r5
    11c6:	6f 92       	push	r6
    11c8:	7f 92       	push	r7
    11ca:	8f 92       	push	r8
    11cc:	9f 92       	push	r9
    11ce:	af 92       	push	r10
    11d0:	bf 92       	push	r11
    11d2:	cf 92       	push	r12
    11d4:	df 92       	push	r13
    11d6:	ef 92       	push	r14
    11d8:	ff 92       	push	r15
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <qtm_key_sensors_process+0x2a>
    11e6:	7d c3       	rjmp	.+1786   	; 0x18e2 <qtm_key_sensors_process+0x724>
    11e8:	ec 01       	movw	r28, r24
    11ea:	a1 2c       	mov	r10, r1
    11ec:	b1 2c       	mov	r11, r1
    11ee:	81 2c       	mov	r8, r1
    11f0:	91 2c       	mov	r9, r1
    11f2:	21 2c       	mov	r2, r1
    11f4:	d1 2c       	mov	r13, r1
    11f6:	33 e0       	ldi	r19, 0x03	; 3
    11f8:	c3 2e       	mov	r12, r19
    11fa:	45 e8       	ldi	r20, 0x85	; 133
    11fc:	64 2e       	mov	r6, r20
    11fe:	56 e8       	ldi	r21, 0x86	; 134
    1200:	75 2e       	mov	r7, r21
    1202:	67 e0       	ldi	r22, 0x07	; 7
    1204:	36 2e       	mov	r3, r22
    1206:	72 e0       	ldi	r23, 0x02	; 2
    1208:	47 2e       	mov	r4, r23
    120a:	e8 e0       	ldi	r30, 0x08	; 8
    120c:	5e 2e       	mov	r5, r30
    120e:	ea 81       	ldd	r30, Y+2	; 0x02
    1210:	fb 81       	ldd	r31, Y+3	; 0x03
    1212:	80 81       	ld	r24, Z
    1214:	91 81       	ldd	r25, Z+1	; 0x01
    1216:	88 16       	cp	r8, r24
    1218:	99 06       	cpc	r9, r25
    121a:	08 f0       	brcs	.+2      	; 0x121e <qtm_key_sensors_process+0x60>
    121c:	a5 c1       	rjmp	.+842    	; 0x1568 <qtm_key_sensors_process+0x3aa>
    121e:	75 01       	movw	r14, r10
    1220:	ee 0c       	add	r14, r14
    1222:	ff 1c       	adc	r15, r15
    1224:	0c 81       	ldd	r16, Y+4	; 0x04
    1226:	1d 81       	ldd	r17, Y+5	; 0x05
    1228:	0e 0d       	add	r16, r14
    122a:	1f 1d       	adc	r17, r15
    122c:	d8 01       	movw	r26, r16
    122e:	8c 91       	ld	r24, X
    1230:	84 30       	cpi	r24, 0x04	; 4
    1232:	09 f4       	brne	.+2      	; 0x1236 <qtm_key_sensors_process+0x78>
    1234:	a2 c0       	rjmp	.+324    	; 0x137a <qtm_key_sensors_process+0x1bc>
    1236:	38 f4       	brcc	.+14     	; 0x1246 <qtm_key_sensors_process+0x88>
    1238:	82 30       	cpi	r24, 0x02	; 2
    123a:	01 f1       	breq	.+64     	; 0x127c <qtm_key_sensors_process+0xbe>
    123c:	08 f0       	brcs	.+2      	; 0x1240 <qtm_key_sensors_process+0x82>
    123e:	49 c0       	rjmp	.+146    	; 0x12d2 <qtm_key_sensors_process+0x114>
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	59 f0       	breq	.+22     	; 0x125a <qtm_key_sensors_process+0x9c>
    1244:	8a c1       	rjmp	.+788    	; 0x155a <qtm_key_sensors_process+0x39c>
    1246:	85 38       	cpi	r24, 0x85	; 133
    1248:	09 f4       	brne	.+2      	; 0x124c <qtm_key_sensors_process+0x8e>
    124a:	c4 c0       	rjmp	.+392    	; 0x13d4 <qtm_key_sensors_process+0x216>
    124c:	86 38       	cpi	r24, 0x86	; 134
    124e:	09 f4       	brne	.+2      	; 0x1252 <qtm_key_sensors_process+0x94>
    1250:	f8 c0       	rjmp	.+496    	; 0x1442 <qtm_key_sensors_process+0x284>
    1252:	87 30       	cpi	r24, 0x07	; 7
    1254:	09 f0       	breq	.+2      	; 0x1258 <qtm_key_sensors_process+0x9a>
    1256:	81 c1       	rjmp	.+770    	; 0x155a <qtm_key_sensors_process+0x39c>
    1258:	39 c1       	rjmp	.+626    	; 0x14cc <qtm_key_sensors_process+0x30e>
    125a:	d8 01       	movw	r26, r16
    125c:	12 96       	adiw	r26, 0x02	; 2
    125e:	ed 91       	ld	r30, X+
    1260:	fc 91       	ld	r31, X
    1262:	13 97       	sbiw	r26, 0x03	; 3
    1264:	80 81       	ld	r24, Z
    1266:	8e 71       	andi	r24, 0x1E	; 30
    1268:	09 f0       	breq	.+2      	; 0x126c <qtm_key_sensors_process+0xae>
    126a:	69 c1       	rjmp	.+722    	; 0x153e <qtm_key_sensors_process+0x380>
    126c:	4c 92       	st	X, r4
    126e:	8c 81       	ldd	r24, Y+4	; 0x04
    1270:	9d 81       	ldd	r25, Y+5	; 0x05
    1272:	fc 01       	movw	r30, r24
    1274:	ee 0d       	add	r30, r14
    1276:	ff 1d       	adc	r31, r15
    1278:	51 82       	std	Z+1, r5	; 0x01
    127a:	61 c1       	rjmp	.+706    	; 0x153e <qtm_key_sensors_process+0x380>
    127c:	f8 01       	movw	r30, r16
    127e:	21 81       	ldd	r18, Z+1	; 0x01
    1280:	22 23       	and	r18, r18
    1282:	29 f1       	breq	.+74     	; 0x12ce <qtm_key_sensors_process+0x110>
    1284:	02 80       	ldd	r0, Z+2	; 0x02
    1286:	f3 81       	ldd	r31, Z+3	; 0x03
    1288:	e0 2d       	mov	r30, r0
    128a:	25 30       	cpi	r18, 0x05	; 5
    128c:	20 f0       	brcs	.+8      	; 0x1296 <qtm_key_sensors_process+0xd8>
    128e:	81 81       	ldd	r24, Z+1	; 0x01
    1290:	92 81       	ldd	r25, Z+2	; 0x02
    1292:	d8 01       	movw	r26, r16
    1294:	0e c0       	rjmp	.+28     	; 0x12b2 <qtm_key_sensors_process+0xf4>
    1296:	d8 01       	movw	r26, r16
    1298:	14 96       	adiw	r26, 0x04	; 4
    129a:	8d 91       	ld	r24, X+
    129c:	9c 91       	ld	r25, X
    129e:	15 97       	sbiw	r26, 0x05	; 5
    12a0:	41 81       	ldd	r20, Z+1	; 0x01
    12a2:	52 81       	ldd	r21, Z+2	; 0x02
    12a4:	84 17       	cp	r24, r20
    12a6:	95 07       	cpc	r25, r21
    12a8:	69 f0       	breq	.+26     	; 0x12c4 <qtm_key_sensors_process+0x106>
    12aa:	48 17       	cp	r20, r24
    12ac:	59 07       	cpc	r21, r25
    12ae:	30 f4       	brcc	.+12     	; 0x12bc <qtm_key_sensors_process+0xfe>
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	15 96       	adiw	r26, 0x05	; 5
    12b4:	9c 93       	st	X, r25
    12b6:	8e 93       	st	-X, r24
    12b8:	14 97       	sbiw	r26, 0x04	; 4
    12ba:	04 c0       	rjmp	.+8      	; 0x12c4 <qtm_key_sensors_process+0x106>
    12bc:	01 96       	adiw	r24, 0x01	; 1
    12be:	f8 01       	movw	r30, r16
    12c0:	95 83       	std	Z+5, r25	; 0x05
    12c2:	84 83       	std	Z+4, r24	; 0x04
    12c4:	21 50       	subi	r18, 0x01	; 1
    12c6:	d8 01       	movw	r26, r16
    12c8:	11 96       	adiw	r26, 0x01	; 1
    12ca:	2c 93       	st	X, r18
    12cc:	38 c1       	rjmp	.+624    	; 0x153e <qtm_key_sensors_process+0x380>
    12ce:	f8 01       	movw	r30, r16
    12d0:	30 c1       	rjmp	.+608    	; 0x1532 <qtm_key_sensors_process+0x374>
    12d2:	d8 01       	movw	r26, r16
    12d4:	14 96       	adiw	r26, 0x04	; 4
    12d6:	2d 91       	ld	r18, X+
    12d8:	3c 91       	ld	r19, X
    12da:	15 97       	sbiw	r26, 0x05	; 5
    12dc:	12 96       	adiw	r26, 0x02	; 2
    12de:	8d 91       	ld	r24, X+
    12e0:	9c 91       	ld	r25, X
    12e2:	13 97       	sbiw	r26, 0x03	; 3
    12e4:	dc 01       	movw	r26, r24
    12e6:	11 96       	adiw	r26, 0x01	; 1
    12e8:	4d 91       	ld	r20, X+
    12ea:	5c 91       	ld	r21, X
    12ec:	12 97       	sbiw	r26, 0x02	; 2
    12ee:	24 17       	cp	r18, r20
    12f0:	35 07       	cpc	r19, r21
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <qtm_key_sensors_process+0x138>
    12f4:	32 c1       	rjmp	.+612    	; 0x155a <qtm_key_sensors_process+0x39c>
    12f6:	8e 81       	ldd	r24, Y+6	; 0x06
    12f8:	9f 81       	ldd	r25, Y+7	; 0x07
    12fa:	42 17       	cp	r20, r18
    12fc:	53 07       	cpc	r21, r19
    12fe:	e0 f4       	brcc	.+56     	; 0x1338 <qtm_key_sensors_process+0x17a>
    1300:	24 1b       	sub	r18, r20
    1302:	35 0b       	sbc	r19, r21
    1304:	dc 01       	movw	r26, r24
    1306:	aa 0d       	add	r26, r10
    1308:	bb 1d       	adc	r27, r11
    130a:	8c 91       	ld	r24, X
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	05 80       	ldd	r0, Z+5	; 0x05
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <qtm_key_sensors_process+0x158>
    1312:	95 95       	asr	r25
    1314:	87 95       	ror	r24
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <qtm_key_sensors_process+0x154>
    131a:	99 27       	eor	r25, r25
    131c:	28 17       	cp	r18, r24
    131e:	39 07       	cpc	r19, r25
    1320:	08 f4       	brcc	.+2      	; 0x1324 <qtm_key_sensors_process+0x166>
    1322:	1b c1       	rjmp	.+566    	; 0x155a <qtm_key_sensors_process+0x39c>
    1324:	84 81       	ldd	r24, Z+4	; 0x04
    1326:	88 23       	and	r24, r24
    1328:	09 f4       	brne	.+2      	; 0x132c <qtm_key_sensors_process+0x16e>
    132a:	17 c1       	rjmp	.+558    	; 0x155a <qtm_key_sensors_process+0x39c>
    132c:	f8 01       	movw	r30, r16
    132e:	30 82       	st	Z, r3
    1330:	ea 81       	ldd	r30, Y+2	; 0x02
    1332:	fb 81       	ldd	r31, Y+3	; 0x03
    1334:	24 81       	ldd	r18, Z+4	; 0x04
    1336:	1a c0       	rjmp	.+52     	; 0x136c <qtm_key_sensors_process+0x1ae>
    1338:	fc 01       	movw	r30, r24
    133a:	ea 0d       	add	r30, r10
    133c:	fb 1d       	adc	r31, r11
    133e:	42 1b       	sub	r20, r18
    1340:	53 0b       	sbc	r21, r19
    1342:	80 81       	ld	r24, Z
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	48 17       	cp	r20, r24
    1348:	59 07       	cpc	r21, r25
    134a:	08 f4       	brcc	.+2      	; 0x134e <qtm_key_sensors_process+0x190>
    134c:	06 c1       	rjmp	.+524    	; 0x155a <qtm_key_sensors_process+0x39c>
    134e:	82 81       	ldd	r24, Z+2	; 0x02
    1350:	88 23       	and	r24, r24
    1352:	31 f0       	breq	.+12     	; 0x1360 <qtm_key_sensors_process+0x1a2>
    1354:	b4 01       	movw	r22, r8
    1356:	ce 01       	movw	r24, r28
    1358:	0e 94 4c 08 	call	0x1098	; 0x1098 <check_for_aks_block>
    135c:	81 11       	cpse	r24, r1
    135e:	fd c0       	rjmp	.+506    	; 0x155a <qtm_key_sensors_process+0x39c>
    1360:	e4 e0       	ldi	r30, 0x04	; 4
    1362:	d8 01       	movw	r26, r16
    1364:	ec 93       	st	X, r30
    1366:	ea 81       	ldd	r30, Y+2	; 0x02
    1368:	fb 81       	ldd	r31, Y+3	; 0x03
    136a:	22 81       	ldd	r18, Z+2	; 0x02
    136c:	8c 81       	ldd	r24, Y+4	; 0x04
    136e:	9d 81       	ldd	r25, Y+5	; 0x05
    1370:	fc 01       	movw	r30, r24
    1372:	ee 0d       	add	r30, r14
    1374:	ff 1d       	adc	r31, r15
    1376:	21 83       	std	Z+1, r18	; 0x01
    1378:	e2 c0       	rjmp	.+452    	; 0x153e <qtm_key_sensors_process+0x380>
    137a:	d8 01       	movw	r26, r16
    137c:	14 96       	adiw	r26, 0x04	; 4
    137e:	2d 91       	ld	r18, X+
    1380:	3c 91       	ld	r19, X
    1382:	15 97       	sbiw	r26, 0x05	; 5
    1384:	12 96       	adiw	r26, 0x02	; 2
    1386:	ed 91       	ld	r30, X+
    1388:	fc 91       	ld	r31, X
    138a:	13 97       	sbiw	r26, 0x03	; 3
    138c:	81 81       	ldd	r24, Z+1	; 0x01
    138e:	92 81       	ldd	r25, Z+2	; 0x02
    1390:	82 17       	cp	r24, r18
    1392:	93 07       	cpc	r25, r19
    1394:	10 f4       	brcc	.+4      	; 0x139a <qtm_key_sensors_process+0x1dc>
    1396:	cc 92       	st	X, r12
    1398:	d7 c0       	rjmp	.+430    	; 0x1548 <qtm_key_sensors_process+0x38a>
    139a:	ee 81       	ldd	r30, Y+6	; 0x06
    139c:	ff 81       	ldd	r31, Y+7	; 0x07
    139e:	ea 0d       	add	r30, r10
    13a0:	fb 1d       	adc	r31, r11
    13a2:	82 1b       	sub	r24, r18
    13a4:	93 0b       	sbc	r25, r19
    13a6:	20 81       	ld	r18, Z
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	28 17       	cp	r18, r24
    13ac:	39 07       	cpc	r19, r25
    13ae:	08 f0       	brcs	.+2      	; 0x13b2 <qtm_key_sensors_process+0x1f4>
    13b0:	c9 c0       	rjmp	.+402    	; 0x1544 <qtm_key_sensors_process+0x386>
    13b2:	82 81       	ldd	r24, Z+2	; 0x02
    13b4:	88 23       	and	r24, r24
    13b6:	31 f0       	breq	.+12     	; 0x13c4 <qtm_key_sensors_process+0x206>
    13b8:	b4 01       	movw	r22, r8
    13ba:	ce 01       	movw	r24, r28
    13bc:	0e 94 4c 08 	call	0x1098	; 0x1098 <check_for_aks_block>
    13c0:	81 11       	cpse	r24, r1
    13c2:	cb c0       	rjmp	.+406    	; 0x155a <qtm_key_sensors_process+0x39c>
    13c4:	f8 01       	movw	r30, r16
    13c6:	81 81       	ldd	r24, Z+1	; 0x01
    13c8:	88 23       	and	r24, r24
    13ca:	09 f4       	brne	.+2      	; 0x13ce <qtm_key_sensors_process+0x210>
    13cc:	68 c0       	rjmp	.+208    	; 0x149e <qtm_key_sensors_process+0x2e0>
    13ce:	81 50       	subi	r24, 0x01	; 1
    13d0:	81 83       	std	Z+1, r24	; 0x01
    13d2:	b5 c0       	rjmp	.+362    	; 0x153e <qtm_key_sensors_process+0x380>
    13d4:	a8 81       	ld	r26, Y
    13d6:	b9 81       	ldd	r27, Y+1	; 0x01
    13d8:	80 85       	ldd	r24, Z+8	; 0x08
    13da:	13 96       	adiw	r26, 0x03	; 3
    13dc:	8c 93       	st	X, r24
    13de:	ec 81       	ldd	r30, Y+4	; 0x04
    13e0:	fd 81       	ldd	r31, Y+5	; 0x05
    13e2:	ee 0d       	add	r30, r14
    13e4:	ff 1d       	adc	r31, r15
    13e6:	44 81       	ldd	r20, Z+4	; 0x04
    13e8:	55 81       	ldd	r21, Z+5	; 0x05
    13ea:	a2 81       	ldd	r26, Z+2	; 0x02
    13ec:	b3 81       	ldd	r27, Z+3	; 0x03
    13ee:	11 96       	adiw	r26, 0x01	; 1
    13f0:	8d 91       	ld	r24, X+
    13f2:	9c 91       	ld	r25, X
    13f4:	12 97       	sbiw	r26, 0x02	; 2
    13f6:	84 17       	cp	r24, r20
    13f8:	95 07       	cpc	r25, r21
    13fa:	c0 f0       	brcs	.+48     	; 0x142c <qtm_key_sensors_process+0x26e>
    13fc:	ae 81       	ldd	r26, Y+6	; 0x06
    13fe:	bf 81       	ldd	r27, Y+7	; 0x07
    1400:	aa 0d       	add	r26, r10
    1402:	bb 1d       	adc	r27, r11
    1404:	6c 91       	ld	r22, X
    1406:	26 2f       	mov	r18, r22
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	11 96       	adiw	r26, 0x01	; 1
    140c:	7c 91       	ld	r23, X
    140e:	7f 5f       	subi	r23, 0xFF	; 255
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <qtm_key_sensors_process+0x258>
    1412:	35 95       	asr	r19
    1414:	27 95       	ror	r18
    1416:	7a 95       	dec	r23
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <qtm_key_sensors_process+0x254>
    141a:	84 1b       	sub	r24, r20
    141c:	95 0b       	sbc	r25, r21
    141e:	62 1b       	sub	r22, r18
    1420:	26 2f       	mov	r18, r22
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	28 17       	cp	r18, r24
    1426:	39 07       	cpc	r19, r25
    1428:	08 f4       	brcc	.+2      	; 0x142c <qtm_key_sensors_process+0x26e>
    142a:	95 c0       	rjmp	.+298    	; 0x1556 <qtm_key_sensors_process+0x398>
    142c:	70 82       	st	Z, r7
    142e:	ea 81       	ldd	r30, Y+2	; 0x02
    1430:	fb 81       	ldd	r31, Y+3	; 0x03
    1432:	22 81       	ldd	r18, Z+2	; 0x02
    1434:	8c 81       	ldd	r24, Y+4	; 0x04
    1436:	9d 81       	ldd	r25, Y+5	; 0x05
    1438:	fc 01       	movw	r30, r24
    143a:	ee 0d       	add	r30, r14
    143c:	ff 1d       	adc	r31, r15
    143e:	21 83       	std	Z+1, r18	; 0x01
    1440:	42 c0       	rjmp	.+132    	; 0x14c6 <qtm_key_sensors_process+0x308>
    1442:	d8 01       	movw	r26, r16
    1444:	14 96       	adiw	r26, 0x04	; 4
    1446:	6d 91       	ld	r22, X+
    1448:	7c 91       	ld	r23, X
    144a:	15 97       	sbiw	r26, 0x05	; 5
    144c:	12 96       	adiw	r26, 0x02	; 2
    144e:	ed 91       	ld	r30, X+
    1450:	fc 91       	ld	r31, X
    1452:	13 97       	sbiw	r26, 0x03	; 3
    1454:	21 81       	ldd	r18, Z+1	; 0x01
    1456:	32 81       	ldd	r19, Z+2	; 0x02
    1458:	26 17       	cp	r18, r22
    145a:	37 07       	cpc	r19, r23
    145c:	58 f4       	brcc	.+22     	; 0x1474 <qtm_key_sensors_process+0x2b6>
    145e:	11 96       	adiw	r26, 0x01	; 1
    1460:	8c 91       	ld	r24, X
    1462:	11 97       	sbiw	r26, 0x01	; 1
    1464:	81 11       	cpse	r24, r1
    1466:	02 c0       	rjmp	.+4      	; 0x146c <qtm_key_sensors_process+0x2ae>
    1468:	cc 92       	st	X, r12
    146a:	75 c0       	rjmp	.+234    	; 0x1556 <qtm_key_sensors_process+0x398>
    146c:	81 50       	subi	r24, 0x01	; 1
    146e:	f8 01       	movw	r30, r16
    1470:	81 83       	std	Z+1, r24	; 0x01
    1472:	71 c0       	rjmp	.+226    	; 0x1556 <qtm_key_sensors_process+0x398>
    1474:	ee 81       	ldd	r30, Y+6	; 0x06
    1476:	ff 81       	ldd	r31, Y+7	; 0x07
    1478:	ea 0d       	add	r30, r10
    147a:	fb 1d       	adc	r31, r11
    147c:	80 81       	ld	r24, Z
    147e:	48 2f       	mov	r20, r24
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	91 81       	ldd	r25, Z+1	; 0x01
    1484:	9f 5f       	subi	r25, 0xFF	; 255
    1486:	02 c0       	rjmp	.+4      	; 0x148c <qtm_key_sensors_process+0x2ce>
    1488:	55 95       	asr	r21
    148a:	47 95       	ror	r20
    148c:	9a 95       	dec	r25
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <qtm_key_sensors_process+0x2ca>
    1490:	26 1b       	sub	r18, r22
    1492:	37 0b       	sbc	r19, r23
    1494:	84 1b       	sub	r24, r20
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	82 17       	cp	r24, r18
    149a:	93 07       	cpc	r25, r19
    149c:	60 f4       	brcc	.+24     	; 0x14b6 <qtm_key_sensors_process+0x2f8>
    149e:	d8 01       	movw	r26, r16
    14a0:	6c 92       	st	X, r6
    14a2:	ea 81       	ldd	r30, Y+2	; 0x02
    14a4:	fb 81       	ldd	r31, Y+3	; 0x03
    14a6:	23 81       	ldd	r18, Z+3	; 0x03
    14a8:	8c 81       	ldd	r24, Y+4	; 0x04
    14aa:	9d 81       	ldd	r25, Y+5	; 0x05
    14ac:	fc 01       	movw	r30, r24
    14ae:	ee 0d       	add	r30, r14
    14b0:	ff 1d       	adc	r31, r15
    14b2:	21 83       	std	Z+1, r18	; 0x01
    14b4:	50 c0       	rjmp	.+160    	; 0x1556 <qtm_key_sensors_process+0x398>
    14b6:	f8 01       	movw	r30, r16
    14b8:	81 81       	ldd	r24, Z+1	; 0x01
    14ba:	81 11       	cpse	r24, r1
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <qtm_key_sensors_process+0x304>
    14be:	c0 82       	st	Z, r12
    14c0:	4a c0       	rjmp	.+148    	; 0x1556 <qtm_key_sensors_process+0x398>
    14c2:	81 50       	subi	r24, 0x01	; 1
    14c4:	81 83       	std	Z+1, r24	; 0x01
    14c6:	22 24       	eor	r2, r2
    14c8:	23 94       	inc	r2
    14ca:	39 c0       	rjmp	.+114    	; 0x153e <qtm_key_sensors_process+0x380>
    14cc:	d8 01       	movw	r26, r16
    14ce:	14 96       	adiw	r26, 0x04	; 4
    14d0:	2d 91       	ld	r18, X+
    14d2:	3c 91       	ld	r19, X
    14d4:	15 97       	sbiw	r26, 0x05	; 5
    14d6:	12 96       	adiw	r26, 0x02	; 2
    14d8:	8d 91       	ld	r24, X+
    14da:	9c 91       	ld	r25, X
    14dc:	13 97       	sbiw	r26, 0x03	; 3
    14de:	dc 01       	movw	r26, r24
    14e0:	11 96       	adiw	r26, 0x01	; 1
    14e2:	8d 91       	ld	r24, X+
    14e4:	9c 91       	ld	r25, X
    14e6:	12 97       	sbiw	r26, 0x02	; 2
    14e8:	82 17       	cp	r24, r18
    14ea:	93 07       	cpc	r25, r19
    14ec:	58 f5       	brcc	.+86     	; 0x1544 <qtm_key_sensors_process+0x386>
    14ee:	28 1b       	sub	r18, r24
    14f0:	39 0b       	sbc	r19, r25
    14f2:	ae 81       	ldd	r26, Y+6	; 0x06
    14f4:	bf 81       	ldd	r27, Y+7	; 0x07
    14f6:	aa 0d       	add	r26, r10
    14f8:	bb 1d       	adc	r27, r11
    14fa:	8c 91       	ld	r24, X
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	05 80       	ldd	r0, Z+5	; 0x05
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <qtm_key_sensors_process+0x348>
    1502:	95 95       	asr	r25
    1504:	87 95       	ror	r24
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <qtm_key_sensors_process+0x344>
    150a:	99 27       	eor	r25, r25
    150c:	28 17       	cp	r18, r24
    150e:	39 07       	cpc	r19, r25
    1510:	c8 f0       	brcs	.+50     	; 0x1544 <qtm_key_sensors_process+0x386>
    1512:	d8 01       	movw	r26, r16
    1514:	11 96       	adiw	r26, 0x01	; 1
    1516:	8c 91       	ld	r24, X
    1518:	11 97       	sbiw	r26, 0x01	; 1
    151a:	81 11       	cpse	r24, r1
    151c:	0c c0       	rjmp	.+24     	; 0x1536 <qtm_key_sensors_process+0x378>
    151e:	e1 e0       	ldi	r30, 0x01	; 1
    1520:	ec 93       	st	X, r30
    1522:	8c 81       	ldd	r24, Y+4	; 0x04
    1524:	9d 81       	ldd	r25, Y+5	; 0x05
    1526:	fc 01       	movw	r30, r24
    1528:	ee 0d       	add	r30, r14
    152a:	ff 1d       	adc	r31, r15
    152c:	02 80       	ldd	r0, Z+2	; 0x02
    152e:	f3 81       	ldd	r31, Z+3	; 0x03
    1530:	e0 2d       	mov	r30, r0
    1532:	c0 82       	st	Z, r12
    1534:	12 c0       	rjmp	.+36     	; 0x155a <qtm_key_sensors_process+0x39c>
    1536:	81 50       	subi	r24, 0x01	; 1
    1538:	d8 01       	movw	r26, r16
    153a:	11 96       	adiw	r26, 0x01	; 1
    153c:	8c 93       	st	X, r24
    153e:	dd 24       	eor	r13, r13
    1540:	d3 94       	inc	r13
    1542:	0b c0       	rjmp	.+22     	; 0x155a <qtm_key_sensors_process+0x39c>
    1544:	f8 01       	movw	r30, r16
    1546:	c0 82       	st	Z, r12
    1548:	8c 81       	ldd	r24, Y+4	; 0x04
    154a:	9d 81       	ldd	r25, Y+5	; 0x05
    154c:	fc 01       	movw	r30, r24
    154e:	ee 0d       	add	r30, r14
    1550:	ff 1d       	adc	r31, r15
    1552:	11 82       	std	Z+1, r1	; 0x01
    1554:	02 c0       	rjmp	.+4      	; 0x155a <qtm_key_sensors_process+0x39c>
    1556:	22 24       	eor	r2, r2
    1558:	23 94       	inc	r2
    155a:	ff ef       	ldi	r31, 0xFF	; 255
    155c:	8f 1a       	sub	r8, r31
    155e:	9f 0a       	sbc	r9, r31
    1560:	83 e0       	ldi	r24, 0x03	; 3
    1562:	a8 0e       	add	r10, r24
    1564:	b1 1c       	adc	r11, r1
    1566:	53 ce       	rjmp	.-858    	; 0x120e <qtm_key_sensors_process+0x50>
    1568:	e8 81       	ld	r30, Y
    156a:	f9 81       	ldd	r31, Y+1	; 0x01
    156c:	80 81       	ld	r24, Z
    156e:	87 ff       	sbrs	r24, 7
    1570:	23 c0       	rjmp	.+70     	; 0x15b8 <qtm_key_sensors_process+0x3fa>
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	50 e0       	ldi	r21, 0x00	; 0
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	ea 81       	ldd	r30, Y+2	; 0x02
    157c:	fb 81       	ldd	r31, Y+3	; 0x03
    157e:	80 81       	ld	r24, Z
    1580:	91 81       	ldd	r25, Z+1	; 0x01
    1582:	28 17       	cp	r18, r24
    1584:	39 07       	cpc	r19, r25
    1586:	98 f4       	brcc	.+38     	; 0x15ae <qtm_key_sensors_process+0x3f0>
    1588:	ec 81       	ldd	r30, Y+4	; 0x04
    158a:	fd 81       	ldd	r31, Y+5	; 0x05
    158c:	e4 0f       	add	r30, r20
    158e:	f5 1f       	adc	r31, r21
    1590:	a2 81       	ldd	r26, Z+2	; 0x02
    1592:	b3 81       	ldd	r27, Z+3	; 0x03
    1594:	8c 91       	ld	r24, X
    1596:	80 fd       	sbrc	r24, 0
    1598:	05 c0       	rjmp	.+10     	; 0x15a4 <qtm_key_sensors_process+0x3e6>
    159a:	90 81       	ld	r25, Z
    159c:	97 7f       	andi	r25, 0xF7	; 247
    159e:	11 f0       	breq	.+4      	; 0x15a4 <qtm_key_sensors_process+0x3e6>
    15a0:	81 60       	ori	r24, 0x01	; 1
    15a2:	8c 93       	st	X, r24
    15a4:	2f 5f       	subi	r18, 0xFF	; 255
    15a6:	3f 4f       	sbci	r19, 0xFF	; 255
    15a8:	4a 5f       	subi	r20, 0xFA	; 250
    15aa:	5f 4f       	sbci	r21, 0xFF	; 255
    15ac:	e6 cf       	rjmp	.-52     	; 0x157a <qtm_key_sensors_process+0x3bc>
    15ae:	e8 81       	ld	r30, Y
    15b0:	f9 81       	ldd	r31, Y+1	; 0x01
    15b2:	80 81       	ld	r24, Z
    15b4:	8f 77       	andi	r24, 0x7F	; 127
    15b6:	80 83       	st	Z, r24
    15b8:	d1 10       	cpse	r13, r1
    15ba:	07 c0       	rjmp	.+14     	; 0x15ca <qtm_key_sensors_process+0x40c>
    15bc:	e8 81       	ld	r30, Y
    15be:	f9 81       	ldd	r31, Y+1	; 0x01
    15c0:	21 10       	cpse	r2, r1
    15c2:	6f c0       	rjmp	.+222    	; 0x16a2 <qtm_key_sensors_process+0x4e4>
    15c4:	80 81       	ld	r24, Z
    15c6:	8e 7f       	andi	r24, 0xFE	; 254
    15c8:	6e c0       	rjmp	.+220    	; 0x16a6 <qtm_key_sensors_process+0x4e8>
    15ca:	ea 81       	ldd	r30, Y+2	; 0x02
    15cc:	fb 81       	ldd	r31, Y+3	; 0x03
    15ce:	81 85       	ldd	r24, Z+9	; 0x09
    15d0:	88 23       	and	r24, r24
    15d2:	a1 f3       	breq	.-24     	; 0x15bc <qtm_key_sensors_process+0x3fe>
    15d4:	e8 81       	ld	r30, Y
    15d6:	f9 81       	ldd	r31, Y+1	; 0x01
    15d8:	80 81       	ld	r24, Z
    15da:	80 68       	ori	r24, 0x80	; 128
    15dc:	80 83       	st	Z, r24
    15de:	ea 81       	ldd	r30, Y+2	; 0x02
    15e0:	fb 81       	ldd	r31, Y+3	; 0x03
    15e2:	81 85       	ldd	r24, Z+9	; 0x09
    15e4:	81 30       	cpi	r24, 0x01	; 1
    15e6:	51 f7       	brne	.-44     	; 0x15bc <qtm_key_sensors_process+0x3fe>
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	96 e0       	ldi	r25, 0x06	; 6
    15f2:	d9 2e       	mov	r13, r25
    15f4:	ea 81       	ldd	r30, Y+2	; 0x02
    15f6:	fb 81       	ldd	r31, Y+3	; 0x03
    15f8:	60 81       	ld	r22, Z
    15fa:	71 81       	ldd	r23, Z+1	; 0x01
    15fc:	26 17       	cp	r18, r22
    15fe:	37 07       	cpc	r19, r23
    1600:	e8 f6       	brcc	.-70     	; 0x15bc <qtm_key_sensors_process+0x3fe>
    1602:	0c 81       	ldd	r16, Y+4	; 0x04
    1604:	1d 81       	ldd	r17, Y+5	; 0x05
    1606:	fa 01       	movw	r30, r20
    1608:	ee 0f       	add	r30, r30
    160a:	ff 1f       	adc	r31, r31
    160c:	e0 0f       	add	r30, r16
    160e:	f1 1f       	adc	r31, r17
    1610:	80 81       	ld	r24, Z
    1612:	98 2f       	mov	r25, r24
    1614:	97 7f       	andi	r25, 0xF7	; 247
    1616:	a1 f1       	breq	.+104    	; 0x1680 <qtm_key_sensors_process+0x4c2>
    1618:	85 38       	cpi	r24, 0x85	; 133
    161a:	11 f0       	breq	.+4      	; 0x1620 <qtm_key_sensors_process+0x462>
    161c:	83 30       	cpi	r24, 0x03	; 3
    161e:	b1 f5       	brne	.+108    	; 0x168c <qtm_key_sensors_process+0x4ce>
    1620:	ee 80       	ldd	r14, Y+6	; 0x06
    1622:	ff 80       	ldd	r15, Y+7	; 0x07
    1624:	d7 01       	movw	r26, r14
    1626:	a4 0f       	add	r26, r20
    1628:	b5 1f       	adc	r27, r21
    162a:	12 96       	adiw	r26, 0x02	; 2
    162c:	bc 90       	ld	r11, X
    162e:	bb 20       	and	r11, r11
    1630:	39 f1       	breq	.+78     	; 0x1680 <qtm_key_sensors_process+0x4c2>
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	c1 2c       	mov	r12, r1
    1638:	86 17       	cp	r24, r22
    163a:	97 07       	cpc	r25, r23
    163c:	f8 f4       	brcc	.+62     	; 0x167c <qtm_key_sensors_process+0x4be>
    163e:	28 17       	cp	r18, r24
    1640:	39 07       	cpc	r19, r25
    1642:	d1 f0       	breq	.+52     	; 0x1678 <qtm_key_sensors_process+0x4ba>
    1644:	d8 9e       	mul	r13, r24
    1646:	d0 01       	movw	r26, r0
    1648:	d9 9e       	mul	r13, r25
    164a:	b0 0d       	add	r27, r0
    164c:	11 24       	eor	r1, r1
    164e:	a0 0f       	add	r26, r16
    1650:	b1 1f       	adc	r27, r17
    1652:	ac 91       	ld	r26, X
    1654:	a4 30       	cpi	r26, 0x04	; 4
    1656:	11 f0       	breq	.+4      	; 0x165c <qtm_key_sensors_process+0x49e>
    1658:	a6 38       	cpi	r26, 0x86	; 134
    165a:	71 f4       	brne	.+28     	; 0x1678 <qtm_key_sensors_process+0x4ba>
    165c:	dc 01       	movw	r26, r24
    165e:	aa 0f       	add	r26, r26
    1660:	bb 1f       	adc	r27, r27
    1662:	a8 0f       	add	r26, r24
    1664:	b9 1f       	adc	r27, r25
    1666:	ae 0d       	add	r26, r14
    1668:	bf 1d       	adc	r27, r15
    166a:	12 96       	adiw	r26, 0x02	; 2
    166c:	ac 91       	ld	r26, X
    166e:	ba 12       	cpse	r11, r26
    1670:	03 c0       	rjmp	.+6      	; 0x1678 <qtm_key_sensors_process+0x4ba>
    1672:	cb 01       	movw	r24, r22
    1674:	cc 24       	eor	r12, r12
    1676:	c3 94       	inc	r12
    1678:	01 96       	adiw	r24, 0x01	; 1
    167a:	de cf       	rjmp	.-68     	; 0x1638 <qtm_key_sensors_process+0x47a>
    167c:	c1 10       	cpse	r12, r1
    167e:	06 c0       	rjmp	.+12     	; 0x168c <qtm_key_sensors_process+0x4ce>
    1680:	02 80       	ldd	r0, Z+2	; 0x02
    1682:	f3 81       	ldd	r31, Z+3	; 0x03
    1684:	e0 2d       	mov	r30, r0
    1686:	80 81       	ld	r24, Z
    1688:	8e 7f       	andi	r24, 0xFE	; 254
    168a:	05 c0       	rjmp	.+10     	; 0x1696 <qtm_key_sensors_process+0x4d8>
    168c:	02 80       	ldd	r0, Z+2	; 0x02
    168e:	f3 81       	ldd	r31, Z+3	; 0x03
    1690:	e0 2d       	mov	r30, r0
    1692:	80 81       	ld	r24, Z
    1694:	81 60       	ori	r24, 0x01	; 1
    1696:	80 83       	st	Z, r24
    1698:	2f 5f       	subi	r18, 0xFF	; 255
    169a:	3f 4f       	sbci	r19, 0xFF	; 255
    169c:	4d 5f       	subi	r20, 0xFD	; 253
    169e:	5f 4f       	sbci	r21, 0xFF	; 255
    16a0:	a9 cf       	rjmp	.-174    	; 0x15f4 <qtm_key_sensors_process+0x436>
    16a2:	80 81       	ld	r24, Z
    16a4:	81 60       	ori	r24, 0x01	; 1
    16a6:	80 83       	st	Z, r24
    16a8:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <qtm_local_ms_timecount>
    16ac:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <qtm_local_ms_timecount+0x1>
    16b0:	e8 81       	ld	r30, Y
    16b2:	f9 81       	ldd	r31, Y+1	; 0x01
    16b4:	21 81       	ldd	r18, Z+1	; 0x01
    16b6:	32 81       	ldd	r19, Z+2	; 0x02
    16b8:	a9 01       	movw	r20, r18
    16ba:	48 53       	subi	r20, 0x38	; 56
    16bc:	5f 4f       	sbci	r21, 0xFF	; 255
    16be:	48 17       	cp	r20, r24
    16c0:	59 07       	cpc	r21, r25
    16c2:	38 f4       	brcc	.+14     	; 0x16d2 <qtm_key_sensors_process+0x514>
    16c4:	82 1b       	sub	r24, r18
    16c6:	93 0b       	sbc	r25, r19
    16c8:	aa 24       	eor	r10, r10
    16ca:	a3 94       	inc	r10
    16cc:	a3 e0       	ldi	r26, 0x03	; 3
    16ce:	ba 2e       	mov	r11, r26
    16d0:	44 c0       	rjmp	.+136    	; 0x175a <qtm_key_sensors_process+0x59c>
    16d2:	82 17       	cp	r24, r18
    16d4:	93 07       	cpc	r25, r19
    16d6:	10 f0       	brcs	.+4      	; 0x16dc <qtm_key_sensors_process+0x51e>
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	04 c1       	rjmp	.+520    	; 0x18e4 <qtm_key_sensors_process+0x726>
    16dc:	82 1b       	sub	r24, r18
    16de:	93 0b       	sbc	r25, r19
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	89 3c       	cpi	r24, 0xC9	; 201
    16e4:	91 05       	cpc	r25, r1
    16e6:	c0 f3       	brcs	.-16     	; 0x16d8 <qtm_key_sensors_process+0x51a>
    16e8:	ef cf       	rjmp	.-34     	; 0x16c8 <qtm_key_sensors_process+0x50a>
    16ea:	88 5c       	subi	r24, 0xC8	; 200
    16ec:	91 09       	sbc	r25, r1
    16ee:	e8 81       	ld	r30, Y
    16f0:	f9 81       	ldd	r31, Y+1	; 0x01
    16f2:	21 81       	ldd	r18, Z+1	; 0x01
    16f4:	32 81       	ldd	r19, Z+2	; 0x02
    16f6:	28 53       	subi	r18, 0x38	; 56
    16f8:	3f 4f       	sbci	r19, 0xFF	; 255
    16fa:	32 83       	std	Z+2, r19	; 0x02
    16fc:	21 83       	std	Z+1, r18	; 0x01
    16fe:	23 81       	ldd	r18, Z+3	; 0x03
    1700:	21 11       	cpse	r18, r1
    1702:	96 c0       	rjmp	.+300    	; 0x1830 <qtm_key_sensors_process+0x672>
    1704:	24 81       	ldd	r18, Z+4	; 0x04
    1706:	22 23       	and	r18, r18
    1708:	11 f0       	breq	.+4      	; 0x170e <qtm_key_sensors_process+0x550>
    170a:	21 50       	subi	r18, 0x01	; 1
    170c:	24 83       	std	Z+4, r18	; 0x04
    170e:	e8 81       	ld	r30, Y
    1710:	f9 81       	ldd	r31, Y+1	; 0x01
    1712:	25 81       	ldd	r18, Z+5	; 0x05
    1714:	22 23       	and	r18, r18
    1716:	11 f0       	breq	.+4      	; 0x171c <qtm_key_sensors_process+0x55e>
    1718:	21 50       	subi	r18, 0x01	; 1
    171a:	25 83       	std	Z+5, r18	; 0x05
    171c:	8a 80       	ldd	r8, Y+2	; 0x02
    171e:	9b 80       	ldd	r9, Y+3	; 0x03
    1720:	d4 01       	movw	r26, r8
    1722:	16 96       	adiw	r26, 0x06	; 6
    1724:	2c 91       	ld	r18, X
    1726:	16 97       	sbiw	r26, 0x06	; 6
    1728:	21 11       	cpse	r18, r1
    172a:	1b c0       	rjmp	.+54     	; 0x1762 <qtm_key_sensors_process+0x5a4>
    172c:	8a 80       	ldd	r8, Y+2	; 0x02
    172e:	9b 80       	ldd	r9, Y+3	; 0x03
    1730:	f4 01       	movw	r30, r8
    1732:	27 81       	ldd	r18, Z+7	; 0x07
    1734:	21 11       	cpse	r18, r1
    1736:	48 c0       	rjmp	.+144    	; 0x17c8 <qtm_key_sensors_process+0x60a>
    1738:	ea 81       	ldd	r30, Y+2	; 0x02
    173a:	fb 81       	ldd	r31, Y+3	; 0x03
    173c:	23 81       	ldd	r18, Z+3	; 0x03
    173e:	22 23       	and	r18, r18
    1740:	61 f0       	breq	.+24     	; 0x175a <qtm_key_sensors_process+0x59c>
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	a0 e0       	ldi	r26, 0x00	; 0
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	ea 81       	ldd	r30, Y+2	; 0x02
    174c:	fb 81       	ldd	r31, Y+3	; 0x03
    174e:	40 81       	ld	r20, Z
    1750:	51 81       	ldd	r21, Z+1	; 0x01
    1752:	a4 17       	cp	r26, r20
    1754:	b5 07       	cpc	r27, r21
    1756:	08 f4       	brcc	.+2      	; 0x175a <qtm_key_sensors_process+0x59c>
    1758:	6e c0       	rjmp	.+220    	; 0x1836 <qtm_key_sensors_process+0x678>
    175a:	89 3c       	cpi	r24, 0xC9	; 201
    175c:	91 05       	cpc	r25, r1
    175e:	28 f6       	brcc	.-118    	; 0x16ea <qtm_key_sensors_process+0x52c>
    1760:	bb cf       	rjmp	.-138    	; 0x16d8 <qtm_key_sensors_process+0x51a>
    1762:	08 81       	ld	r16, Y
    1764:	19 81       	ldd	r17, Y+1	; 0x01
    1766:	f8 01       	movw	r30, r16
    1768:	24 81       	ldd	r18, Z+4	; 0x04
    176a:	21 11       	cpse	r18, r1
    176c:	df cf       	rjmp	.-66     	; 0x172c <qtm_key_sensors_process+0x56e>
    176e:	ed 90       	ld	r14, X+
    1770:	fc 90       	ld	r15, X
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	40 e0       	ldi	r20, 0x00	; 0
    1778:	50 e0       	ldi	r21, 0x00	; 0
    177a:	4e 15       	cp	r20, r14
    177c:	5f 05       	cpc	r21, r15
    177e:	f1 f0       	breq	.+60     	; 0x17bc <qtm_key_sensors_process+0x5fe>
    1780:	ec 81       	ldd	r30, Y+4	; 0x04
    1782:	fd 81       	ldd	r31, Y+5	; 0x05
    1784:	e6 0f       	add	r30, r22
    1786:	f7 1f       	adc	r31, r23
    1788:	20 81       	ld	r18, Z
    178a:	23 30       	cpi	r18, 0x03	; 3
    178c:	11 f0       	breq	.+4      	; 0x1792 <qtm_key_sensors_process+0x5d4>
    178e:	28 30       	cpi	r18, 0x08	; 8
    1790:	81 f4       	brne	.+32     	; 0x17b2 <qtm_key_sensors_process+0x5f4>
    1792:	24 81       	ldd	r18, Z+4	; 0x04
    1794:	35 81       	ldd	r19, Z+5	; 0x05
    1796:	c2 80       	ldd	r12, Z+2	; 0x02
    1798:	d3 80       	ldd	r13, Z+3	; 0x03
    179a:	d6 01       	movw	r26, r12
    179c:	11 96       	adiw	r26, 0x01	; 1
    179e:	cd 90       	ld	r12, X+
    17a0:	dc 90       	ld	r13, X
    17a2:	12 97       	sbiw	r26, 0x02	; 2
    17a4:	2c 15       	cp	r18, r12
    17a6:	3d 05       	cpc	r19, r13
    17a8:	20 f4       	brcc	.+8      	; 0x17b2 <qtm_key_sensors_process+0x5f4>
    17aa:	2f 5f       	subi	r18, 0xFF	; 255
    17ac:	3f 4f       	sbci	r19, 0xFF	; 255
    17ae:	35 83       	std	Z+5, r19	; 0x05
    17b0:	24 83       	std	Z+4, r18	; 0x04
    17b2:	4f 5f       	subi	r20, 0xFF	; 255
    17b4:	5f 4f       	sbci	r21, 0xFF	; 255
    17b6:	6a 5f       	subi	r22, 0xFA	; 250
    17b8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ba:	df cf       	rjmp	.-66     	; 0x177a <qtm_key_sensors_process+0x5bc>
    17bc:	f4 01       	movw	r30, r8
    17be:	26 81       	ldd	r18, Z+6	; 0x06
    17c0:	d8 01       	movw	r26, r16
    17c2:	14 96       	adiw	r26, 0x04	; 4
    17c4:	2c 93       	st	X, r18
    17c6:	b2 cf       	rjmp	.-156    	; 0x172c <qtm_key_sensors_process+0x56e>
    17c8:	08 81       	ld	r16, Y
    17ca:	19 81       	ldd	r17, Y+1	; 0x01
    17cc:	d8 01       	movw	r26, r16
    17ce:	15 96       	adiw	r26, 0x05	; 5
    17d0:	2c 91       	ld	r18, X
    17d2:	21 11       	cpse	r18, r1
    17d4:	b1 cf       	rjmp	.-158    	; 0x1738 <qtm_key_sensors_process+0x57a>
    17d6:	e0 80       	ld	r14, Z
    17d8:	f1 80       	ldd	r15, Z+1	; 0x01
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	40 e0       	ldi	r20, 0x00	; 0
    17e0:	50 e0       	ldi	r21, 0x00	; 0
    17e2:	4e 15       	cp	r20, r14
    17e4:	5f 05       	cpc	r21, r15
    17e6:	f1 f0       	breq	.+60     	; 0x1824 <qtm_key_sensors_process+0x666>
    17e8:	ec 81       	ldd	r30, Y+4	; 0x04
    17ea:	fd 81       	ldd	r31, Y+5	; 0x05
    17ec:	e6 0f       	add	r30, r22
    17ee:	f7 1f       	adc	r31, r23
    17f0:	20 81       	ld	r18, Z
    17f2:	23 30       	cpi	r18, 0x03	; 3
    17f4:	11 f0       	breq	.+4      	; 0x17fa <qtm_key_sensors_process+0x63c>
    17f6:	28 30       	cpi	r18, 0x08	; 8
    17f8:	81 f4       	brne	.+32     	; 0x181a <qtm_key_sensors_process+0x65c>
    17fa:	24 81       	ldd	r18, Z+4	; 0x04
    17fc:	35 81       	ldd	r19, Z+5	; 0x05
    17fe:	c2 80       	ldd	r12, Z+2	; 0x02
    1800:	d3 80       	ldd	r13, Z+3	; 0x03
    1802:	d6 01       	movw	r26, r12
    1804:	11 96       	adiw	r26, 0x01	; 1
    1806:	cd 90       	ld	r12, X+
    1808:	dc 90       	ld	r13, X
    180a:	12 97       	sbiw	r26, 0x02	; 2
    180c:	c2 16       	cp	r12, r18
    180e:	d3 06       	cpc	r13, r19
    1810:	20 f4       	brcc	.+8      	; 0x181a <qtm_key_sensors_process+0x65c>
    1812:	21 50       	subi	r18, 0x01	; 1
    1814:	31 09       	sbc	r19, r1
    1816:	35 83       	std	Z+5, r19	; 0x05
    1818:	24 83       	std	Z+4, r18	; 0x04
    181a:	4f 5f       	subi	r20, 0xFF	; 255
    181c:	5f 4f       	sbci	r21, 0xFF	; 255
    181e:	6a 5f       	subi	r22, 0xFA	; 250
    1820:	7f 4f       	sbci	r23, 0xFF	; 255
    1822:	df cf       	rjmp	.-66     	; 0x17e2 <qtm_key_sensors_process+0x624>
    1824:	f4 01       	movw	r30, r8
    1826:	27 81       	ldd	r18, Z+7	; 0x07
    1828:	d8 01       	movw	r26, r16
    182a:	15 96       	adiw	r26, 0x05	; 5
    182c:	2c 93       	st	X, r18
    182e:	84 cf       	rjmp	.-248    	; 0x1738 <qtm_key_sensors_process+0x57a>
    1830:	21 50       	subi	r18, 0x01	; 1
    1832:	23 83       	std	Z+3, r18	; 0x03
    1834:	81 cf       	rjmp	.-254    	; 0x1738 <qtm_key_sensors_process+0x57a>
    1836:	a9 01       	movw	r20, r18
    1838:	44 0f       	add	r20, r20
    183a:	55 1f       	adc	r21, r21
    183c:	ec 81       	ldd	r30, Y+4	; 0x04
    183e:	fd 81       	ldd	r31, Y+5	; 0x05
    1840:	e4 0f       	add	r30, r20
    1842:	f5 1f       	adc	r31, r21
    1844:	60 81       	ld	r22, Z
    1846:	65 38       	cpi	r22, 0x85	; 133
    1848:	09 f0       	breq	.+2      	; 0x184c <qtm_key_sensors_process+0x68e>
    184a:	47 c0       	rjmp	.+142    	; 0x18da <qtm_key_sensors_process+0x71c>
    184c:	61 81       	ldd	r22, Z+1	; 0x01
    184e:	66 23       	and	r22, r22
    1850:	19 f0       	breq	.+6      	; 0x1858 <qtm_key_sensors_process+0x69a>
    1852:	61 50       	subi	r22, 0x01	; 1
    1854:	61 83       	std	Z+1, r22	; 0x01
    1856:	41 c0       	rjmp	.+130    	; 0x18da <qtm_key_sensors_process+0x71c>
    1858:	a0 82       	st	Z, r10
    185a:	6c 81       	ldd	r22, Y+4	; 0x04
    185c:	7d 81       	ldd	r23, Y+5	; 0x05
    185e:	fb 01       	movw	r30, r22
    1860:	e4 0f       	add	r30, r20
    1862:	f5 1f       	adc	r31, r21
    1864:	02 80       	ldd	r0, Z+2	; 0x02
    1866:	f3 81       	ldd	r31, Z+3	; 0x03
    1868:	e0 2d       	mov	r30, r0
    186a:	b0 82       	st	Z, r11
    186c:	ee 81       	ldd	r30, Y+6	; 0x06
    186e:	ff 81       	ldd	r31, Y+7	; 0x07
    1870:	e2 0f       	add	r30, r18
    1872:	f3 1f       	adc	r31, r19
    1874:	d2 80       	ldd	r13, Z+2	; 0x02
    1876:	dd 20       	and	r13, r13
    1878:	81 f1       	breq	.+96     	; 0x18da <qtm_key_sensors_process+0x71c>
    187a:	40 e0       	ldi	r20, 0x00	; 0
    187c:	50 e0       	ldi	r21, 0x00	; 0
    187e:	00 e0       	ldi	r16, 0x00	; 0
    1880:	10 e0       	ldi	r17, 0x00	; 0
    1882:	ea 81       	ldd	r30, Y+2	; 0x02
    1884:	fb 81       	ldd	r31, Y+3	; 0x03
    1886:	60 81       	ld	r22, Z
    1888:	71 81       	ldd	r23, Z+1	; 0x01
    188a:	06 17       	cp	r16, r22
    188c:	17 07       	cpc	r17, r23
    188e:	28 f5       	brcc	.+74     	; 0x18da <qtm_key_sensors_process+0x71c>
    1890:	ee 81       	ldd	r30, Y+6	; 0x06
    1892:	ff 81       	ldd	r31, Y+7	; 0x07
    1894:	e4 0f       	add	r30, r20
    1896:	f5 1f       	adc	r31, r21
    1898:	62 81       	ldd	r22, Z+2	; 0x02
    189a:	d6 12       	cpse	r13, r22
    189c:	19 c0       	rjmp	.+50     	; 0x18d0 <qtm_key_sensors_process+0x712>
    189e:	ba 01       	movw	r22, r20
    18a0:	66 0f       	add	r22, r22
    18a2:	77 1f       	adc	r23, r23
    18a4:	ec 81       	ldd	r30, Y+4	; 0x04
    18a6:	fd 81       	ldd	r31, Y+5	; 0x05
    18a8:	4f 01       	movw	r8, r30
    18aa:	86 0e       	add	r8, r22
    18ac:	97 1e       	adc	r9, r23
    18ae:	f4 01       	movw	r30, r8
    18b0:	e2 80       	ldd	r14, Z+2	; 0x02
    18b2:	f3 80       	ldd	r15, Z+3	; 0x03
    18b4:	f7 01       	movw	r30, r14
    18b6:	f0 80       	ld	r15, Z
    18b8:	f0 fe       	sbrs	r15, 0
    18ba:	0a c0       	rjmp	.+20     	; 0x18d0 <qtm_key_sensors_process+0x712>
    18bc:	f4 01       	movw	r30, r8
    18be:	a0 82       	st	Z, r10
    18c0:	ec 81       	ldd	r30, Y+4	; 0x04
    18c2:	fd 81       	ldd	r31, Y+5	; 0x05
    18c4:	e6 0f       	add	r30, r22
    18c6:	f7 1f       	adc	r31, r23
    18c8:	02 80       	ldd	r0, Z+2	; 0x02
    18ca:	f3 81       	ldd	r31, Z+3	; 0x03
    18cc:	e0 2d       	mov	r30, r0
    18ce:	b0 82       	st	Z, r11
    18d0:	0f 5f       	subi	r16, 0xFF	; 255
    18d2:	1f 4f       	sbci	r17, 0xFF	; 255
    18d4:	4d 5f       	subi	r20, 0xFD	; 253
    18d6:	5f 4f       	sbci	r21, 0xFF	; 255
    18d8:	d4 cf       	rjmp	.-88     	; 0x1882 <qtm_key_sensors_process+0x6c4>
    18da:	11 96       	adiw	r26, 0x01	; 1
    18dc:	2d 5f       	subi	r18, 0xFD	; 253
    18de:	3f 4f       	sbci	r19, 0xFF	; 255
    18e0:	34 cf       	rjmp	.-408    	; 0x174a <qtm_key_sensors_process+0x58c>
    18e2:	8b e0       	ldi	r24, 0x0B	; 11
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	ff 90       	pop	r15
    18ee:	ef 90       	pop	r14
    18f0:	df 90       	pop	r13
    18f2:	cf 90       	pop	r12
    18f4:	bf 90       	pop	r11
    18f6:	af 90       	pop	r10
    18f8:	9f 90       	pop	r9
    18fa:	8f 90       	pop	r8
    18fc:	7f 90       	pop	r7
    18fe:	6f 90       	pop	r6
    1900:	5f 90       	pop	r5
    1902:	4f 90       	pop	r4
    1904:	3f 90       	pop	r3
    1906:	2f 90       	pop	r2
    1908:	08 95       	ret

0000190a <qtm_freq_hop_autotune>:
    190a:	2f 92       	push	r2
    190c:	3f 92       	push	r3
    190e:	4f 92       	push	r4
    1910:	5f 92       	push	r5
    1912:	6f 92       	push	r6
    1914:	7f 92       	push	r7
    1916:	8f 92       	push	r8
    1918:	9f 92       	push	r9
    191a:	af 92       	push	r10
    191c:	bf 92       	push	r11
    191e:	cf 92       	push	r12
    1920:	df 92       	push	r13
    1922:	ef 92       	push	r14
    1924:	ff 92       	push	r15
    1926:	0f 93       	push	r16
    1928:	1f 93       	push	r17
    192a:	cf 93       	push	r28
    192c:	df 93       	push	r29
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	2c 97       	sbiw	r28, 0x0c	; 12
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	2c 01       	movw	r4, r24
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	09 f4       	brne	.+2      	; 0x1946 <qtm_freq_hop_autotune+0x3c>
    1944:	63 c1       	rjmp	.+710    	; 0x1c0c <qtm_freq_hop_autotune+0x302>
    1946:	dc 01       	movw	r26, r24
    1948:	12 96       	adiw	r26, 0x02	; 2
    194a:	2d 90       	ld	r2, X+
    194c:	3c 90       	ld	r3, X
    194e:	13 97       	sbiw	r26, 0x03	; 3
    1950:	f1 01       	movw	r30, r2
    1952:	72 80       	ldd	r7, Z+2	; 0x02
    1954:	ed 91       	ld	r30, X+
    1956:	fc 91       	ld	r31, X
    1958:	61 80       	ldd	r6, Z+1	; 0x01
    195a:	d1 01       	movw	r26, r2
    195c:	17 96       	adiw	r26, 0x07	; 7
    195e:	8c 91       	ld	r24, X
    1960:	17 97       	sbiw	r26, 0x07	; 7
    1962:	e7 2c       	mov	r14, r7
    1964:	f1 2c       	mov	r15, r1
    1966:	fc 82       	std	Y+4, r15	; 0x04
    1968:	eb 82       	std	Y+3, r14	; 0x03
    196a:	26 2d       	mov	r18, r6
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	88 23       	and	r24, r24
    1970:	09 f4       	brne	.+2      	; 0x1974 <qtm_freq_hop_autotune+0x6a>
    1972:	a9 c0       	rjmp	.+338    	; 0x1ac6 <qtm_freq_hop_autotune+0x1bc>
    1974:	8d 90       	ld	r8, X+
    1976:	9c 90       	ld	r9, X
    1978:	57 01       	movw	r10, r14
    197a:	aa 0c       	add	r10, r10
    197c:	bb 1c       	adc	r11, r11
    197e:	69 01       	movw	r12, r18
    1980:	cc 0c       	add	r12, r12
    1982:	dd 1c       	adc	r13, r13
    1984:	e1 2c       	mov	r14, r1
    1986:	f1 2c       	mov	r15, r1
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	00 e0       	ldi	r16, 0x00	; 0
    198e:	10 e0       	ldi	r17, 0x00	; 0
    1990:	08 15       	cp	r16, r8
    1992:	19 05       	cpc	r17, r9
    1994:	49 f1       	breq	.+82     	; 0x19e8 <qtm_freq_hop_autotune+0xde>
    1996:	84 81       	ldd	r24, Z+4	; 0x04
    1998:	95 81       	ldd	r25, Z+5	; 0x05
    199a:	8e 0d       	add	r24, r14
    199c:	9f 1d       	adc	r25, r15
    199e:	dc 01       	movw	r26, r24
    19a0:	11 96       	adiw	r26, 0x01	; 1
    19a2:	6d 91       	ld	r22, X+
    19a4:	7c 91       	ld	r23, X
    19a6:	12 97       	sbiw	r26, 0x02	; 2
    19a8:	82 81       	ldd	r24, Z+2	; 0x02
    19aa:	93 81       	ldd	r25, Z+3	; 0x03
    19ac:	8c 0d       	add	r24, r12
    19ae:	9d 1d       	adc	r25, r13
    19b0:	dc 01       	movw	r26, r24
    19b2:	8d 91       	ld	r24, X+
    19b4:	9c 91       	ld	r25, X
    19b6:	86 17       	cp	r24, r22
    19b8:	97 07       	cpc	r25, r23
    19ba:	28 f4       	brcc	.+10     	; 0x19c6 <qtm_freq_hop_autotune+0xbc>
    19bc:	db 01       	movw	r26, r22
    19be:	a8 1b       	sub	r26, r24
    19c0:	b9 0b       	sbc	r27, r25
    19c2:	cd 01       	movw	r24, r26
    19c4:	05 c0       	rjmp	.+10     	; 0x19d0 <qtm_freq_hop_autotune+0xc6>
    19c6:	68 17       	cp	r22, r24
    19c8:	79 07       	cpc	r23, r25
    19ca:	30 f4       	brcc	.+12     	; 0x19d8 <qtm_freq_hop_autotune+0xce>
    19cc:	86 1b       	sub	r24, r22
    19ce:	97 0b       	sbc	r25, r23
    19d0:	48 17       	cp	r20, r24
    19d2:	59 07       	cpc	r21, r25
    19d4:	08 f4       	brcc	.+2      	; 0x19d8 <qtm_freq_hop_autotune+0xce>
    19d6:	ac 01       	movw	r20, r24
    19d8:	0f 5f       	subi	r16, 0xFF	; 255
    19da:	1f 4f       	sbci	r17, 0xFF	; 255
    19dc:	b5 e0       	ldi	r27, 0x05	; 5
    19de:	eb 0e       	add	r14, r27
    19e0:	f1 1c       	adc	r15, r1
    19e2:	ca 0c       	add	r12, r10
    19e4:	db 1c       	adc	r13, r11
    19e6:	d4 cf       	rjmp	.-88     	; 0x1990 <qtm_freq_hop_autotune+0x86>
    19e8:	d1 01       	movw	r26, r2
    19ea:	18 96       	adiw	r26, 0x08	; 8
    19ec:	8c 91       	ld	r24, X
    19ee:	68 2f       	mov	r22, r24
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	64 17       	cp	r22, r20
    19f4:	75 07       	cpc	r23, r21
    19f6:	08 f0       	brcs	.+2      	; 0x19fa <qtm_freq_hop_autotune+0xf0>
    19f8:	57 c0       	rjmp	.+174    	; 0x1aa8 <qtm_freq_hop_autotune+0x19e>
    19fa:	06 80       	ldd	r0, Z+6	; 0x06
    19fc:	f7 81       	ldd	r31, Z+7	; 0x07
    19fe:	e0 2d       	mov	r30, r0
    1a00:	e2 0f       	add	r30, r18
    1a02:	f3 1f       	adc	r31, r19
    1a04:	80 81       	ld	r24, Z
    1a06:	8f 5f       	subi	r24, 0xFF	; 255
    1a08:	80 83       	st	Z, r24
    1a0a:	f2 01       	movw	r30, r4
    1a0c:	40 81       	ld	r20, Z
    1a0e:	51 81       	ldd	r21, Z+1	; 0x01
    1a10:	a2 81       	ldd	r26, Z+2	; 0x02
    1a12:	b3 81       	ldd	r27, Z+3	; 0x03
    1a14:	fa 01       	movw	r30, r20
    1a16:	81 81       	ldd	r24, Z+1	; 0x01
    1a18:	46 81       	ldd	r20, Z+6	; 0x06
    1a1a:	57 81       	ldd	r21, Z+7	; 0x07
    1a1c:	fa 01       	movw	r30, r20
    1a1e:	e8 0f       	add	r30, r24
    1a20:	f1 1d       	adc	r31, r1
    1a22:	90 81       	ld	r25, Z
    1a24:	19 96       	adiw	r26, 0x09	; 9
    1a26:	8c 91       	ld	r24, X
    1a28:	19 97       	sbiw	r26, 0x09	; 9
    1a2a:	98 13       	cpse	r25, r24
    1a2c:	4c c0       	rjmp	.+152    	; 0x1ac6 <qtm_freq_hop_autotune+0x1bc>
    1a2e:	15 96       	adiw	r26, 0x05	; 5
    1a30:	0d 91       	ld	r16, X+
    1a32:	1c 91       	ld	r17, X
    1a34:	16 97       	sbiw	r26, 0x06	; 6
    1a36:	d8 01       	movw	r26, r16
    1a38:	a2 0f       	add	r26, r18
    1a3a:	b3 1f       	adc	r27, r19
    1a3c:	8c 91       	ld	r24, X
    1a3e:	88 23       	and	r24, r24
    1a40:	11 f0       	breq	.+4      	; 0x1a46 <qtm_freq_hop_autotune+0x13c>
    1a42:	81 50       	subi	r24, 0x01	; 1
    1a44:	01 c0       	rjmp	.+2      	; 0x1a48 <qtm_freq_hop_autotune+0x13e>
    1a46:	8f e0       	ldi	r24, 0x0F	; 15
    1a48:	f8 01       	movw	r30, r16
    1a4a:	61 e0       	ldi	r22, 0x01	; 1
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	50 e0       	ldi	r21, 0x00	; 0
    1a52:	eb 80       	ldd	r14, Y+3	; 0x03
    1a54:	fc 80       	ldd	r15, Y+4	; 0x04
    1a56:	4e 15       	cp	r20, r14
    1a58:	5f 05       	cpc	r21, r15
    1a5a:	60 f4       	brcc	.+24     	; 0x1a74 <qtm_freq_hop_autotune+0x16a>
    1a5c:	42 17       	cp	r20, r18
    1a5e:	53 07       	cpc	r21, r19
    1a60:	29 f0       	breq	.+10     	; 0x1a6c <qtm_freq_hop_autotune+0x162>
    1a62:	90 81       	ld	r25, Z
    1a64:	98 13       	cpse	r25, r24
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <qtm_freq_hop_autotune+0x162>
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	4f 5f       	subi	r20, 0xFF	; 255
    1a6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a70:	31 96       	adiw	r30, 0x01	; 1
    1a72:	ef cf       	rjmp	.-34     	; 0x1a52 <qtm_freq_hop_autotune+0x148>
    1a74:	67 2b       	or	r22, r23
    1a76:	19 f3       	breq	.-58     	; 0x1a3e <qtm_freq_hop_autotune+0x134>
    1a78:	8c 93       	st	X, r24
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	d2 01       	movw	r26, r4
    1a80:	12 96       	adiw	r26, 0x02	; 2
    1a82:	ed 91       	ld	r30, X+
    1a84:	fc 91       	ld	r31, X
    1a86:	13 97       	sbiw	r26, 0x03	; 3
    1a88:	42 81       	ldd	r20, Z+2	; 0x02
    1a8a:	50 e0       	ldi	r21, 0x00	; 0
    1a8c:	84 17       	cp	r24, r20
    1a8e:	95 07       	cpc	r25, r21
    1a90:	d0 f4       	brcc	.+52     	; 0x1ac6 <qtm_freq_hop_autotune+0x1bc>
    1a92:	d2 01       	movw	r26, r4
    1a94:	ed 91       	ld	r30, X+
    1a96:	fc 91       	ld	r31, X
    1a98:	06 80       	ldd	r0, Z+6	; 0x06
    1a9a:	f7 81       	ldd	r31, Z+7	; 0x07
    1a9c:	e0 2d       	mov	r30, r0
    1a9e:	e8 0f       	add	r30, r24
    1aa0:	f9 1f       	adc	r31, r25
    1aa2:	10 82       	st	Z, r1
    1aa4:	01 96       	adiw	r24, 0x01	; 1
    1aa6:	eb cf       	rjmp	.-42     	; 0x1a7e <qtm_freq_hop_autotune+0x174>
    1aa8:	86 95       	lsr	r24
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	48 17       	cp	r20, r24
    1aae:	59 07       	cpc	r21, r25
    1ab0:	50 f4       	brcc	.+20     	; 0x1ac6 <qtm_freq_hop_autotune+0x1bc>
    1ab2:	06 80       	ldd	r0, Z+6	; 0x06
    1ab4:	f7 81       	ldd	r31, Z+7	; 0x07
    1ab6:	e0 2d       	mov	r30, r0
    1ab8:	e2 0f       	add	r30, r18
    1aba:	f3 1f       	adc	r31, r19
    1abc:	80 81       	ld	r24, Z
    1abe:	88 23       	and	r24, r24
    1ac0:	11 f0       	breq	.+4      	; 0x1ac6 <qtm_freq_hop_autotune+0x1bc>
    1ac2:	81 50       	subi	r24, 0x01	; 1
    1ac4:	80 83       	st	Z, r24
    1ac6:	f2 01       	movw	r30, r4
    1ac8:	02 80       	ldd	r0, Z+2	; 0x02
    1aca:	f3 81       	ldd	r31, Z+3	; 0x03
    1acc:	e0 2d       	mov	r30, r0
    1ace:	fa 83       	std	Y+2, r31	; 0x02
    1ad0:	e9 83       	std	Y+1, r30	; 0x01
    1ad2:	eb 80       	ldd	r14, Y+3	; 0x03
    1ad4:	fc 80       	ldd	r15, Y+4	; 0x04
    1ad6:	ee 0c       	add	r14, r14
    1ad8:	ff 1c       	adc	r15, r15
    1ada:	fc 82       	std	Y+4, r15	; 0x04
    1adc:	eb 82       	std	Y+3, r14	; 0x03
    1ade:	b9 01       	movw	r22, r18
    1ae0:	66 0f       	add	r22, r22
    1ae2:	77 1f       	adc	r23, r23
    1ae4:	7e 83       	std	Y+6, r23	; 0x06
    1ae6:	6d 83       	std	Y+5, r22	; 0x05
    1ae8:	d7 2c       	mov	r13, r7
    1aea:	d6 94       	lsr	r13
    1aec:	d3 94       	inc	r13
    1aee:	40 e0       	ldi	r20, 0x00	; 0
    1af0:	50 e0       	ldi	r21, 0x00	; 0
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	e1 2c       	mov	r14, r1
    1af8:	f1 2c       	mov	r15, r1
    1afa:	8d 2d       	mov	r24, r13
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	98 87       	std	Y+8, r25	; 0x08
    1b00:	8f 83       	std	Y+7, r24	; 0x07
    1b02:	a9 81       	ldd	r26, Y+1	; 0x01
    1b04:	ba 81       	ldd	r27, Y+2	; 0x02
    1b06:	8d 91       	ld	r24, X+
    1b08:	9c 91       	ld	r25, X
    1b0a:	e8 16       	cp	r14, r24
    1b0c:	f9 06       	cpc	r15, r25
    1b0e:	08 f0       	brcs	.+2      	; 0x1b12 <qtm_freq_hop_autotune+0x208>
    1b10:	68 c0       	rjmp	.+208    	; 0x1be2 <qtm_freq_hop_autotune+0x2d8>
    1b12:	d2 01       	movw	r26, r4
    1b14:	ed 91       	ld	r30, X+
    1b16:	fc 91       	ld	r31, X
    1b18:	a4 81       	ldd	r26, Z+4	; 0x04
    1b1a:	b5 81       	ldd	r27, Z+5	; 0x05
    1b1c:	bd 01       	movw	r22, r26
    1b1e:	62 0f       	add	r22, r18
    1b20:	73 1f       	adc	r23, r19
    1b22:	7c 87       	std	Y+12, r23	; 0x0c
    1b24:	6b 87       	std	Y+11, r22	; 0x0b
    1b26:	db 01       	movw	r26, r22
    1b28:	8c 91       	ld	r24, X
    1b2a:	8c 71       	andi	r24, 0x1C	; 28
    1b2c:	09 f0       	breq	.+2      	; 0x1b30 <qtm_freq_hop_autotune+0x226>
    1b2e:	4f c0       	rjmp	.+158    	; 0x1bce <qtm_freq_hop_autotune+0x2c4>
    1b30:	11 96       	adiw	r26, 0x01	; 1
    1b32:	6d 91       	ld	r22, X+
    1b34:	7c 91       	ld	r23, X
    1b36:	12 97       	sbiw	r26, 0x02	; 2
    1b38:	82 81       	ldd	r24, Z+2	; 0x02
    1b3a:	93 81       	ldd	r25, Z+3	; 0x03
    1b3c:	84 0f       	add	r24, r20
    1b3e:	95 1f       	adc	r25, r21
    1b40:	ed 81       	ldd	r30, Y+5	; 0x05
    1b42:	fe 81       	ldd	r31, Y+6	; 0x06
    1b44:	e8 0f       	add	r30, r24
    1b46:	f9 1f       	adc	r31, r25
    1b48:	71 83       	std	Z+1, r23	; 0x01
    1b4a:	60 83       	st	Z, r22
    1b4c:	a1 2c       	mov	r10, r1
    1b4e:	b1 2c       	mov	r11, r1
    1b50:	c1 2c       	mov	r12, r1
    1b52:	c7 14       	cp	r12, r7
    1b54:	c0 f5       	brcc	.+112    	; 0x1bc6 <qtm_freq_hop_autotune+0x2bc>
    1b56:	fc 01       	movw	r30, r24
    1b58:	ec 0d       	add	r30, r12
    1b5a:	f1 1d       	adc	r31, r1
    1b5c:	ec 0d       	add	r30, r12
    1b5e:	f1 1d       	adc	r31, r1
    1b60:	9a 87       	std	Y+10, r25	; 0x0a
    1b62:	89 87       	std	Y+9, r24	; 0x09
    1b64:	99 24       	eor	r9, r9
    1b66:	93 94       	inc	r9
    1b68:	81 2c       	mov	r8, r1
    1b6a:	31 2c       	mov	r3, r1
    1b6c:	73 14       	cp	r7, r3
    1b6e:	c9 f0       	breq	.+50     	; 0x1ba2 <qtm_freq_hop_autotune+0x298>
    1b70:	c3 14       	cp	r12, r3
    1b72:	79 f0       	breq	.+30     	; 0x1b92 <qtm_freq_hop_autotune+0x288>
    1b74:	a9 85       	ldd	r26, Y+9	; 0x09
    1b76:	ba 85       	ldd	r27, Y+10	; 0x0a
    1b78:	0d 91       	ld	r16, X+
    1b7a:	1c 91       	ld	r17, X
    1b7c:	60 81       	ld	r22, Z
    1b7e:	71 81       	ldd	r23, Z+1	; 0x01
    1b80:	06 17       	cp	r16, r22
    1b82:	17 07       	cpc	r17, r23
    1b84:	11 f4       	brne	.+4      	; 0x1b8a <qtm_freq_hop_autotune+0x280>
    1b86:	93 94       	inc	r9
    1b88:	04 c0       	rjmp	.+8      	; 0x1b92 <qtm_freq_hop_autotune+0x288>
    1b8a:	06 17       	cp	r16, r22
    1b8c:	17 07       	cpc	r17, r23
    1b8e:	08 f4       	brcc	.+2      	; 0x1b92 <qtm_freq_hop_autotune+0x288>
    1b90:	83 94       	inc	r8
    1b92:	33 94       	inc	r3
    1b94:	69 85       	ldd	r22, Y+9	; 0x09
    1b96:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b98:	6e 5f       	subi	r22, 0xFE	; 254
    1b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9c:	7a 87       	std	Y+10, r23	; 0x0a
    1b9e:	69 87       	std	Y+9, r22	; 0x09
    1ba0:	e5 cf       	rjmp	.-54     	; 0x1b6c <qtm_freq_hop_autotune+0x262>
    1ba2:	9d 14       	cp	r9, r13
    1ba4:	58 f4       	brcc	.+22     	; 0x1bbc <qtm_freq_hop_autotune+0x2b2>
    1ba6:	8d 14       	cp	r8, r13
    1ba8:	60 f4       	brcc	.+24     	; 0x1bc2 <qtm_freq_hop_autotune+0x2b8>
    1baa:	69 2d       	mov	r22, r9
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	68 0d       	add	r22, r8
    1bb0:	71 1d       	adc	r23, r1
    1bb2:	af 81       	ldd	r26, Y+7	; 0x07
    1bb4:	b8 85       	ldd	r27, Y+8	; 0x08
    1bb6:	6a 17       	cp	r22, r26
    1bb8:	7b 07       	cpc	r23, r27
    1bba:	1c f0       	brlt	.+6      	; 0x1bc2 <qtm_freq_hop_autotune+0x2b8>
    1bbc:	a0 80       	ld	r10, Z
    1bbe:	b1 80       	ldd	r11, Z+1	; 0x01
    1bc0:	c7 2c       	mov	r12, r7
    1bc2:	c3 94       	inc	r12
    1bc4:	c6 cf       	rjmp	.-116    	; 0x1b52 <qtm_freq_hop_autotune+0x248>
    1bc6:	eb 85       	ldd	r30, Y+11	; 0x0b
    1bc8:	fc 85       	ldd	r31, Y+12	; 0x0c
    1bca:	b2 82       	std	Z+2, r11	; 0x02
    1bcc:	a1 82       	std	Z+1, r10	; 0x01
    1bce:	ff ef       	ldi	r31, 0xFF	; 255
    1bd0:	ef 1a       	sub	r14, r31
    1bd2:	ff 0a       	sbc	r15, r31
    1bd4:	2b 5f       	subi	r18, 0xFB	; 251
    1bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd8:	6b 81       	ldd	r22, Y+3	; 0x03
    1bda:	7c 81       	ldd	r23, Y+4	; 0x04
    1bdc:	46 0f       	add	r20, r22
    1bde:	57 1f       	adc	r21, r23
    1be0:	90 cf       	rjmp	.-224    	; 0x1b02 <qtm_freq_hop_autotune+0x1f8>
    1be2:	63 94       	inc	r6
    1be4:	67 14       	cp	r6, r7
    1be6:	08 f0       	brcs	.+2      	; 0x1bea <qtm_freq_hop_autotune+0x2e0>
    1be8:	61 2c       	mov	r6, r1
    1bea:	e9 81       	ldd	r30, Y+1	; 0x01
    1bec:	fa 81       	ldd	r31, Y+2	; 0x02
    1bee:	a3 81       	ldd	r26, Z+3	; 0x03
    1bf0:	b4 81       	ldd	r27, Z+4	; 0x04
    1bf2:	85 81       	ldd	r24, Z+5	; 0x05
    1bf4:	96 81       	ldd	r25, Z+6	; 0x06
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	e6 0d       	add	r30, r6
    1bfa:	f1 1d       	adc	r31, r1
    1bfc:	80 81       	ld	r24, Z
    1bfe:	8c 93       	st	X, r24
    1c00:	d2 01       	movw	r26, r4
    1c02:	ed 91       	ld	r30, X+
    1c04:	fc 91       	ld	r31, X
    1c06:	61 82       	std	Z+1, r6	; 0x01
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	01 c0       	rjmp	.+2      	; 0x1c0e <qtm_freq_hop_autotune+0x304>
    1c0c:	8b e0       	ldi	r24, 0x0B	; 11
    1c0e:	2c 96       	adiw	r28, 0x0c	; 12
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	df 91       	pop	r29
    1c1c:	cf 91       	pop	r28
    1c1e:	1f 91       	pop	r17
    1c20:	0f 91       	pop	r16
    1c22:	ff 90       	pop	r15
    1c24:	ef 90       	pop	r14
    1c26:	df 90       	pop	r13
    1c28:	cf 90       	pop	r12
    1c2a:	bf 90       	pop	r11
    1c2c:	af 90       	pop	r10
    1c2e:	9f 90       	pop	r9
    1c30:	8f 90       	pop	r8
    1c32:	7f 90       	pop	r7
    1c34:	6f 90       	pop	r6
    1c36:	5f 90       	pop	r5
    1c38:	4f 90       	pop	r4
    1c3a:	3f 90       	pop	r3
    1c3c:	2f 90       	pop	r2
    1c3e:	08 95       	ret

00001c40 <qtm_error_handler>:
    1c40:	95 e0       	ldi	r25, 0x05	; 5
    1c42:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <qtm_state>
    1c46:	e0 91 dd 01 	lds	r30, 0x01DD	; 0x8001dd <qtm>
    1c4a:	f0 91 de 01 	lds	r31, 0x01DE	; 0x8001de <qtm+0x1>
    1c4e:	01 88       	ldd	r0, Z+17	; 0x11
    1c50:	f2 89       	ldd	r31, Z+18	; 0x12
    1c52:	e0 2d       	mov	r30, r0
    1c54:	30 97       	sbiw	r30, 0x00	; 0
    1c56:	09 f0       	breq	.+2      	; 0x1c5a <qtm_error_handler+0x1a>
    1c58:	09 94       	ijmp
    1c5a:	ff cf       	rjmp	.-2      	; 0x1c5a <qtm_error_handler+0x1a>

00001c5c <generic_callback_function>:
    1c5c:	e0 91 dd 01 	lds	r30, 0x01DD	; 0x8001dd <qtm>
    1c60:	f0 91 de 01 	lds	r31, 0x01DE	; 0x8001de <qtm+0x1>
    1c64:	03 88       	ldd	r0, Z+19	; 0x13
    1c66:	f4 89       	ldd	r31, Z+20	; 0x14
    1c68:	e0 2d       	mov	r30, r0
    1c6a:	30 97       	sbiw	r30, 0x00	; 0
    1c6c:	09 f0       	breq	.+2      	; 0x1c70 <generic_callback_function+0x14>
    1c6e:	09 94       	ijmp
    1c70:	80 e4       	ldi	r24, 0x40	; 64
    1c72:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <qtm_error_handler>

00001c76 <qmt_get_binding_layer_ptr>:
    1c76:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <qtm>
    1c7a:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <qtm+0x1>
    1c7e:	08 95       	ret

00001c80 <qtm_binding_layer_init>:
    1c80:	cf 93       	push	r28
    1c82:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <qtm+0x1>
    1c86:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <qtm>
    1c8a:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <qtm_state>
    1c8e:	85 30       	cpi	r24, 0x05	; 5
    1c90:	39 f0       	breq	.+14     	; 0x1ca0 <qtm_binding_layer_init+0x20>
    1c92:	82 30       	cpi	r24, 0x02	; 2
    1c94:	28 f0       	brcs	.+10     	; 0x1ca0 <qtm_binding_layer_init+0x20>
    1c96:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <errors>
    1c9a:	88 23       	and	r24, r24
    1c9c:	71 f1       	breq	.+92     	; 0x1cfa <qtm_binding_layer_init+0x7a>
    1c9e:	40 c0       	rjmp	.+128    	; 0x1d20 <qtm_binding_layer_init+0xa0>
    1ca0:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <errors>
    1ca4:	c0 e0       	ldi	r28, 0x00	; 0
    1ca6:	a0 91 dd 01 	lds	r26, 0x01DD	; 0x8001dd <qtm>
    1caa:	b0 91 de 01 	lds	r27, 0x01DE	; 0x8001de <qtm+0x1>
    1cae:	8c 2f       	mov	r24, r28
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	11 96       	adiw	r26, 0x01	; 1
    1cb8:	ed 91       	ld	r30, X+
    1cba:	fc 91       	ld	r31, X
    1cbc:	12 97       	sbiw	r26, 0x02	; 2
    1cbe:	e8 0f       	add	r30, r24
    1cc0:	f9 1f       	adc	r31, r25
    1cc2:	01 90       	ld	r0, Z+
    1cc4:	f0 81       	ld	r31, Z
    1cc6:	e0 2d       	mov	r30, r0
    1cc8:	30 97       	sbiw	r30, 0x00	; 0
    1cca:	29 f3       	breq	.-54     	; 0x1c96 <qtm_binding_layer_init+0x16>
    1ccc:	17 96       	adiw	r26, 0x07	; 7
    1cce:	2d 91       	ld	r18, X+
    1cd0:	3c 91       	ld	r19, X
    1cd2:	18 97       	sbiw	r26, 0x08	; 8
    1cd4:	d9 01       	movw	r26, r18
    1cd6:	a8 0f       	add	r26, r24
    1cd8:	b9 1f       	adc	r27, r25
    1cda:	8d 91       	ld	r24, X+
    1cdc:	9c 91       	ld	r25, X
    1cde:	09 95       	icall
    1ce0:	88 23       	and	r24, r24
    1ce2:	29 f0       	breq	.+10     	; 0x1cee <qtm_binding_layer_init+0x6e>
    1ce4:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <errors>
    1ce8:	8f 5f       	subi	r24, 0xFF	; 255
    1cea:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <errors>
    1cee:	cf 5f       	subi	r28, 0xFF	; 255
    1cf0:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <errors>
    1cf4:	88 23       	and	r24, r24
    1cf6:	b9 f2       	breq	.-82     	; 0x1ca6 <qtm_binding_layer_init+0x26>
    1cf8:	ce cf       	rjmp	.-100    	; 0x1c96 <qtm_binding_layer_init+0x16>
    1cfa:	82 e0       	ldi	r24, 0x02	; 2
    1cfc:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <qtm_state>
    1d00:	e0 91 dd 01 	lds	r30, 0x01DD	; 0x8001dd <qtm>
    1d04:	f0 91 de 01 	lds	r31, 0x01DE	; 0x8001de <qtm+0x1>
    1d08:	07 84       	ldd	r0, Z+15	; 0x0f
    1d0a:	f0 89       	ldd	r31, Z+16	; 0x10
    1d0c:	e0 2d       	mov	r30, r0
    1d0e:	30 97       	sbiw	r30, 0x00	; 0
    1d10:	11 f0       	breq	.+4      	; 0x1d16 <qtm_binding_layer_init+0x96>
    1d12:	09 95       	icall
    1d14:	08 c0       	rjmp	.+16     	; 0x1d26 <qtm_binding_layer_init+0xa6>
    1d16:	85 e0       	ldi	r24, 0x05	; 5
    1d18:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <qtm_state>
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	01 c0       	rjmp	.+2      	; 0x1d22 <qtm_binding_layer_init+0xa2>
    1d20:	8f 5f       	subi	r24, 0xFF	; 255
    1d22:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <errors>
    1d26:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <errors>
    1d2a:	88 23       	and	r24, r24
    1d2c:	31 f0       	breq	.+12     	; 0x1d3a <qtm_binding_layer_init+0xba>
    1d2e:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <errors>
    1d32:	80 e8       	ldi	r24, 0x80	; 128
    1d34:	cf 91       	pop	r28
    1d36:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <qtm_error_handler>
    1d3a:	cf 91       	pop	r28
    1d3c:	08 95       	ret

00001d3e <qtm_lib_start_acquisition>:
    1d3e:	1f 93       	push	r17
    1d40:	cf 93       	push	r28
    1d42:	df 93       	push	r29
    1d44:	18 2f       	mov	r17, r24
    1d46:	a0 91 dd 01 	lds	r26, 0x01DD	; 0x8001dd <qtm>
    1d4a:	b0 91 de 01 	lds	r27, 0x01DE	; 0x8001de <qtm+0x1>
    1d4e:	15 96       	adiw	r26, 0x05	; 5
    1d50:	2d 91       	ld	r18, X+
    1d52:	3c 91       	ld	r19, X
    1d54:	16 97       	sbiw	r26, 0x06	; 6
    1d56:	d0 e0       	ldi	r29, 0x00	; 0
    1d58:	f9 01       	movw	r30, r18
    1d5a:	ed 0f       	add	r30, r29
    1d5c:	f1 1d       	adc	r31, r1
    1d5e:	ed 0f       	add	r30, r29
    1d60:	f1 1d       	adc	r31, r1
    1d62:	80 81       	ld	r24, Z
    1d64:	91 81       	ldd	r25, Z+1	; 0x01
    1d66:	89 2b       	or	r24, r25
    1d68:	11 f0       	breq	.+4      	; 0x1d6e <qtm_lib_start_acquisition+0x30>
    1d6a:	df 5f       	subi	r29, 0xFF	; 255
    1d6c:	f5 cf       	rjmp	.-22     	; 0x1d58 <qtm_lib_start_acquisition+0x1a>
    1d6e:	53 96       	adiw	r26, 0x13	; 19
    1d70:	8d 91       	ld	r24, X+
    1d72:	9c 91       	ld	r25, X
    1d74:	54 97       	sbiw	r26, 0x14	; 20
    1d76:	89 2b       	or	r24, r25
    1d78:	49 f1       	breq	.+82     	; 0x1dcc <qtm_lib_start_acquisition+0x8e>
    1d7a:	81 2f       	mov	r24, r17
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	f9 01       	movw	r30, r18
    1d84:	e8 0f       	add	r30, r24
    1d86:	f9 1f       	adc	r31, r25
    1d88:	01 90       	ld	r0, Z+
    1d8a:	f0 81       	ld	r31, Z
    1d8c:	e0 2d       	mov	r30, r0
    1d8e:	30 97       	sbiw	r30, 0x00	; 0
    1d90:	e9 f0       	breq	.+58     	; 0x1dcc <qtm_lib_start_acquisition+0x8e>
    1d92:	1b 96       	adiw	r26, 0x0b	; 11
    1d94:	2d 91       	ld	r18, X+
    1d96:	3c 91       	ld	r19, X
    1d98:	1c 97       	sbiw	r26, 0x0c	; 12
    1d9a:	d9 01       	movw	r26, r18
    1d9c:	a8 0f       	add	r26, r24
    1d9e:	b9 1f       	adc	r27, r25
    1da0:	8d 91       	ld	r24, X+
    1da2:	9c 91       	ld	r25, X
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	91 f0       	breq	.+36     	; 0x1dcc <qtm_lib_start_acquisition+0x8e>
    1da8:	6e e2       	ldi	r22, 0x2E	; 46
    1daa:	7e e0       	ldi	r23, 0x0E	; 14
    1dac:	09 95       	icall
    1dae:	c8 2f       	mov	r28, r24
    1db0:	81 11       	cpse	r24, r1
    1db2:	06 c0       	rjmp	.+12     	; 0x1dc0 <qtm_lib_start_acquisition+0x82>
    1db4:	83 e0       	ldi	r24, 0x03	; 3
    1db6:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <qtm_state>
    1dba:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <current_process_id>
    1dbe:	03 c0       	rjmp	.+6      	; 0x1dc6 <qtm_lib_start_acquisition+0x88>
    1dc0:	82 e0       	ldi	r24, 0x02	; 2
    1dc2:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <qtm_state>
    1dc6:	1d 17       	cp	r17, r29
    1dc8:	28 f0       	brcs	.+10     	; 0x1dd4 <qtm_lib_start_acquisition+0x96>
    1dca:	01 c0       	rjmp	.+2      	; 0x1dce <qtm_lib_start_acquisition+0x90>
    1dcc:	c2 e0       	ldi	r28, 0x02	; 2
    1dce:	82 e8       	ldi	r24, 0x82	; 130
    1dd0:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <qtm_error_handler>
    1dd4:	8c 2f       	mov	r24, r28
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	1f 91       	pop	r17
    1ddc:	08 95       	ret

00001dde <qtm_lib_acq_process>:
    1dde:	e0 91 dd 01 	lds	r30, 0x01DD	; 0x8001dd <qtm>
    1de2:	f0 91 de 01 	lds	r31, 0x01DE	; 0x8001de <qtm+0x1>
    1de6:	05 84       	ldd	r0, Z+13	; 0x0d
    1de8:	f6 85       	ldd	r31, Z+14	; 0x0e
    1dea:	e0 2d       	mov	r30, r0
    1dec:	09 94       	ijmp

00001dee <qtm_lib_post_process>:
    1dee:	1f 93       	push	r17
    1df0:	cf 93       	push	r28
    1df2:	df 93       	push	r29
    1df4:	1f 92       	push	r1
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	19 82       	std	Y+1, r1	; 0x01
    1dfc:	e0 91 dd 01 	lds	r30, 0x01DD	; 0x8001dd <qtm>
    1e00:	f0 91 de 01 	lds	r31, 0x01DE	; 0x8001de <qtm+0x1>
    1e04:	05 88       	ldd	r0, Z+21	; 0x15
    1e06:	f6 89       	ldd	r31, Z+22	; 0x16
    1e08:	e0 2d       	mov	r30, r0
    1e0a:	30 97       	sbiw	r30, 0x00	; 0
    1e0c:	49 f0       	breq	.+18     	; 0x1e20 <qtm_lib_post_process+0x32>
    1e0e:	82 e0       	ldi	r24, 0x02	; 2
    1e10:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <qtm_state>
    1e14:	ce 01       	movw	r24, r28
    1e16:	01 96       	adiw	r24, 0x01	; 1
    1e18:	09 95       	icall
    1e1a:	83 e0       	ldi	r24, 0x03	; 3
    1e1c:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <qtm_state>
    1e20:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <errors>
    1e24:	81 11       	cpse	r24, r1
    1e26:	2c c0       	rjmp	.+88     	; 0x1e80 <qtm_lib_post_process+0x92>
    1e28:	19 81       	ldd	r17, Y+1	; 0x01
    1e2a:	11 11       	cpse	r17, r1
    1e2c:	29 c0       	rjmp	.+82     	; 0x1e80 <qtm_lib_post_process+0x92>
    1e2e:	84 e0       	ldi	r24, 0x04	; 4
    1e30:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <qtm_state>
    1e34:	a0 91 dd 01 	lds	r26, 0x01DD	; 0x8001dd <qtm>
    1e38:	b0 91 de 01 	lds	r27, 0x01DE	; 0x8001de <qtm+0x1>
    1e3c:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <current_process_id>
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	88 0f       	add	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	13 96       	adiw	r26, 0x03	; 3
    1e48:	ed 91       	ld	r30, X+
    1e4a:	fc 91       	ld	r31, X
    1e4c:	14 97       	sbiw	r26, 0x04	; 4
    1e4e:	e8 0f       	add	r30, r24
    1e50:	f9 1f       	adc	r31, r25
    1e52:	01 90       	ld	r0, Z+
    1e54:	f0 81       	ld	r31, Z
    1e56:	e0 2d       	mov	r30, r0
    1e58:	19 96       	adiw	r26, 0x09	; 9
    1e5a:	2d 91       	ld	r18, X+
    1e5c:	3c 91       	ld	r19, X
    1e5e:	1a 97       	sbiw	r26, 0x0a	; 10
    1e60:	30 97       	sbiw	r30, 0x00	; 0
    1e62:	81 f0       	breq	.+32     	; 0x1e84 <qtm_lib_post_process+0x96>
    1e64:	d9 01       	movw	r26, r18
    1e66:	a8 0f       	add	r26, r24
    1e68:	b9 1f       	adc	r27, r25
    1e6a:	8d 91       	ld	r24, X+
    1e6c:	9c 91       	ld	r25, X
    1e6e:	09 95       	icall
    1e70:	81 11       	cpse	r24, r1
    1e72:	3e c0       	rjmp	.+124    	; 0x1ef0 <qtm_lib_post_process+0x102>
    1e74:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <current_process_id>
    1e78:	8f 5f       	subi	r24, 0xFF	; 255
    1e7a:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <current_process_id>
    1e7e:	da cf       	rjmp	.-76     	; 0x1e34 <qtm_lib_post_process+0x46>
    1e80:	10 e0       	ldi	r17, 0x00	; 0
    1e82:	3d c0       	rjmp	.+122    	; 0x1efe <qtm_lib_post_process+0x110>
    1e84:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <current_process_id>
    1e88:	f9 01       	movw	r30, r18
    1e8a:	e1 0f       	add	r30, r17
    1e8c:	f1 1d       	adc	r31, r1
    1e8e:	e1 0f       	add	r30, r17
    1e90:	f1 1d       	adc	r31, r1
    1e92:	01 90       	ld	r0, Z+
    1e94:	f0 81       	ld	r31, Z
    1e96:	e0 2d       	mov	r30, r0
    1e98:	30 97       	sbiw	r30, 0x00	; 0
    1e9a:	59 f0       	breq	.+22     	; 0x1eb2 <qtm_lib_post_process+0xc4>
    1e9c:	01 90       	ld	r0, Z+
    1e9e:	f0 81       	ld	r31, Z
    1ea0:	e0 2d       	mov	r30, r0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	87 ff       	sbrs	r24, 7
    1ea6:	03 c0       	rjmp	.+6      	; 0x1eae <qtm_lib_post_process+0xc0>
    1ea8:	9c 91       	ld	r25, X
    1eaa:	94 60       	ori	r25, 0x04	; 4
    1eac:	9c 93       	st	X, r25
    1eae:	1f 5f       	subi	r17, 0xFF	; 255
    1eb0:	eb cf       	rjmp	.-42     	; 0x1e88 <qtm_lib_post_process+0x9a>
    1eb2:	10 93 95 01 	sts	0x0195, r17	; 0x800195 <current_process_id>
    1eb6:	82 e0       	ldi	r24, 0x02	; 2
    1eb8:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <qtm_state>
    1ebc:	57 96       	adiw	r26, 0x17	; 23
    1ebe:	ed 91       	ld	r30, X+
    1ec0:	fc 91       	ld	r31, X
    1ec2:	58 97       	sbiw	r26, 0x18	; 24
    1ec4:	30 97       	sbiw	r30, 0x00	; 0
    1ec6:	11 f0       	breq	.+4      	; 0x1ecc <qtm_lib_post_process+0xde>
    1ec8:	09 95       	icall
    1eca:	05 c0       	rjmp	.+10     	; 0x1ed6 <qtm_lib_post_process+0xe8>
    1ecc:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <errors>
    1ed0:	8f 5f       	subi	r24, 0xFF	; 255
    1ed2:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <errors>
    1ed6:	10 e0       	ldi	r17, 0x00	; 0
    1ed8:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <errors>
    1edc:	88 23       	and	r24, r24
    1ede:	79 f0       	breq	.+30     	; 0x1efe <qtm_lib_post_process+0x110>
    1ee0:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <errors>
    1ee4:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <current_process_id>
    1ee8:	80 64       	ori	r24, 0x40	; 64
    1eea:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <qtm_error_handler>
    1eee:	07 c0       	rjmp	.+14     	; 0x1efe <qtm_lib_post_process+0x110>
    1ef0:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <errors>
    1ef4:	8f 5f       	subi	r24, 0xFF	; 255
    1ef6:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <errors>
    1efa:	13 e0       	ldi	r17, 0x03	; 3
    1efc:	ed cf       	rjmp	.-38     	; 0x1ed8 <qtm_lib_post_process+0xea>
    1efe:	81 2f       	mov	r24, r17
    1f00:	0f 90       	pop	r0
    1f02:	df 91       	pop	r29
    1f04:	cf 91       	pop	r28
    1f06:	1f 91       	pop	r17
    1f08:	08 95       	ret

00001f0a <select_next_channel_to_measure>:
    1f0a:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <current_measure_channel>
    1f0e:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <current_measure_channel+0x1>
    1f12:	a0 91 df 01 	lds	r26, 0x01DF	; 0x8001df <qtm_acquisition_control_working_set_ptr>
    1f16:	b0 91 e0 01 	lds	r27, 0x01E0	; 0x8001e0 <qtm_acquisition_control_working_set_ptr+0x1>
    1f1a:	ed 91       	ld	r30, X+
    1f1c:	fc 91       	ld	r31, X
    1f1e:	11 97       	sbiw	r26, 0x01	; 1
    1f20:	40 81       	ld	r20, Z
    1f22:	51 81       	ldd	r21, Z+1	; 0x01
    1f24:	25 e0       	ldi	r18, 0x05	; 5
    1f26:	28 9f       	mul	r18, r24
    1f28:	b0 01       	movw	r22, r0
    1f2a:	29 9f       	mul	r18, r25
    1f2c:	70 0d       	add	r23, r0
    1f2e:	11 24       	eor	r1, r1
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	84 17       	cp	r24, r20
    1f36:	95 07       	cpc	r25, r21
    1f38:	a8 f4       	brcc	.+42     	; 0x1f64 <select_next_channel_to_measure+0x5a>
    1f3a:	14 96       	adiw	r26, 0x04	; 4
    1f3c:	ed 91       	ld	r30, X+
    1f3e:	fc 91       	ld	r31, X
    1f40:	15 97       	sbiw	r26, 0x05	; 5
    1f42:	e2 0f       	add	r30, r18
    1f44:	f3 1f       	adc	r31, r19
    1f46:	e6 0f       	add	r30, r22
    1f48:	f7 1f       	adc	r31, r23
    1f4a:	e0 81       	ld	r30, Z
    1f4c:	2b 5f       	subi	r18, 0xFB	; 251
    1f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f50:	e0 fd       	sbrc	r30, 0
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <select_next_channel_to_measure+0x4e>
    1f54:	01 96       	adiw	r24, 0x01	; 1
    1f56:	ee cf       	rjmp	.-36     	; 0x1f34 <select_next_channel_to_measure+0x2a>
    1f58:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <current_measure_channel+0x1>
    1f5c:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <current_measure_channel>
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	08 95       	ret
    1f64:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <current_measure_channel+0x1>
    1f68:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <current_measure_channel>
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	08 95       	ret

00001f70 <qtm_measure_node>:
    1f70:	4a e0       	ldi	r20, 0x0A	; 10
    1f72:	48 9f       	mul	r20, r24
    1f74:	90 01       	movw	r18, r0
    1f76:	49 9f       	mul	r20, r25
    1f78:	30 0d       	add	r19, r0
    1f7a:	11 24       	eor	r1, r1
    1f7c:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <qtm_acquisition_control_working_set_ptr>
    1f80:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <qtm_acquisition_control_working_set_ptr+0x1>
    1f84:	02 80       	ldd	r0, Z+2	; 0x02
    1f86:	f3 81       	ldd	r31, Z+3	; 0x03
    1f88:	e0 2d       	mov	r30, r0
    1f8a:	e2 0f       	add	r30, r18
    1f8c:	f3 1f       	adc	r31, r19
    1f8e:	42 81       	ldd	r20, Z+2	; 0x02
    1f90:	40 93 f8 00 	sts	0x00F8, r20	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7f80f8>
    1f94:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <qtm_acquisition_control_working_set_ptr>
    1f98:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <qtm_acquisition_control_working_set_ptr+0x1>
    1f9c:	02 80       	ldd	r0, Z+2	; 0x02
    1f9e:	f3 81       	ldd	r31, Z+3	; 0x03
    1fa0:	e0 2d       	mov	r30, r0
    1fa2:	e2 0f       	add	r30, r18
    1fa4:	f3 1f       	adc	r31, r19
    1fa6:	43 81       	ldd	r20, Z+3	; 0x03
    1fa8:	40 93 f9 00 	sts	0x00F9, r20	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7f80f9>
    1fac:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <qtm_acquisition_control_working_set_ptr>
    1fb0:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <qtm_acquisition_control_working_set_ptr+0x1>
    1fb4:	02 80       	ldd	r0, Z+2	; 0x02
    1fb6:	f3 81       	ldd	r31, Z+3	; 0x03
    1fb8:	e0 2d       	mov	r30, r0
    1fba:	e2 0f       	add	r30, r18
    1fbc:	f3 1f       	adc	r31, r19
    1fbe:	44 81       	ldd	r20, Z+4	; 0x04
    1fc0:	40 93 fa 00 	sts	0x00FA, r20	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f80fa>
    1fc4:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <qtm_acquisition_control_working_set_ptr>
    1fc8:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <qtm_acquisition_control_working_set_ptr+0x1>
    1fcc:	02 80       	ldd	r0, Z+2	; 0x02
    1fce:	f3 81       	ldd	r31, Z+3	; 0x03
    1fd0:	e0 2d       	mov	r30, r0
    1fd2:	e2 0f       	add	r30, r18
    1fd4:	f3 1f       	adc	r31, r19
    1fd6:	40 81       	ld	r20, Z
    1fd8:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    1fdc:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <qtm_acquisition_control_working_set_ptr>
    1fe0:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <qtm_acquisition_control_working_set_ptr+0x1>
    1fe4:	02 80       	ldd	r0, Z+2	; 0x02
    1fe6:	f3 81       	ldd	r31, Z+3	; 0x03
    1fe8:	e0 2d       	mov	r30, r0
    1fea:	e2 0f       	add	r30, r18
    1fec:	f3 1f       	adc	r31, r19
    1fee:	41 81       	ldd	r20, Z+1	; 0x01
    1ff0:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    1ff4:	65 e0       	ldi	r22, 0x05	; 5
    1ff6:	68 9f       	mul	r22, r24
    1ff8:	a0 01       	movw	r20, r0
    1ffa:	69 9f       	mul	r22, r25
    1ffc:	50 0d       	add	r21, r0
    1ffe:	11 24       	eor	r1, r1
    2000:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <qtm_acquisition_control_working_set_ptr>
    2004:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <qtm_acquisition_control_working_set_ptr+0x1>
    2008:	04 80       	ldd	r0, Z+4	; 0x04
    200a:	f5 81       	ldd	r31, Z+5	; 0x05
    200c:	e0 2d       	mov	r30, r0
    200e:	e4 0f       	add	r30, r20
    2010:	f5 1f       	adc	r31, r21
    2012:	83 81       	ldd	r24, Z+3	; 0x03
    2014:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
    2018:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <qtm_acquisition_control_working_set_ptr>
    201c:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <qtm_acquisition_control_working_set_ptr+0x1>
    2020:	04 80       	ldd	r0, Z+4	; 0x04
    2022:	f5 81       	ldd	r31, Z+5	; 0x05
    2024:	e0 2d       	mov	r30, r0
    2026:	e4 0f       	add	r30, r20
    2028:	f5 1f       	adc	r31, r21
    202a:	83 81       	ldd	r24, Z+3	; 0x03
    202c:	94 81       	ldd	r25, Z+4	; 0x04
    202e:	88 27       	eor	r24, r24
    2030:	9f 73       	andi	r25, 0x3F	; 63
    2032:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7f80e6>
    2036:	a0 91 df 01 	lds	r26, 0x01DF	; 0x8001df <qtm_acquisition_control_working_set_ptr>
    203a:	b0 91 e0 01 	lds	r27, 0x01E0	; 0x8001e0 <qtm_acquisition_control_working_set_ptr+0x1>
    203e:	14 96       	adiw	r26, 0x04	; 4
    2040:	ed 91       	ld	r30, X+
    2042:	fc 91       	ld	r31, X
    2044:	15 97       	sbiw	r26, 0x05	; 5
    2046:	e4 0f       	add	r30, r20
    2048:	f5 1f       	adc	r31, r21
    204a:	80 81       	ld	r24, Z
    204c:	81 fd       	sbrc	r24, 1
    204e:	60 83       	st	Z, r22
    2050:	14 96       	adiw	r26, 0x04	; 4
    2052:	8d 91       	ld	r24, X+
    2054:	9c 91       	ld	r25, X
    2056:	15 97       	sbiw	r26, 0x05	; 5
    2058:	fc 01       	movw	r30, r24
    205a:	e4 0f       	add	r30, r20
    205c:	f5 1f       	adc	r31, r21
    205e:	80 81       	ld	r24, Z
    2060:	8c 71       	andi	r24, 0x1C	; 28
    2062:	71 f4       	brne	.+28     	; 0x2080 <qtm_measure_node+0x110>
    2064:	12 96       	adiw	r26, 0x02	; 2
    2066:	ed 91       	ld	r30, X+
    2068:	fc 91       	ld	r31, X
    206a:	13 97       	sbiw	r26, 0x03	; 3
    206c:	e2 0f       	add	r30, r18
    206e:	f3 1f       	adc	r31, r19
    2070:	e0 85       	ldd	r30, Z+8	; 0x08
    2072:	e2 95       	swap	r30
    2074:	ef 70       	andi	r30, 0x0F	; 15
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	e1 58       	subi	r30, 0x81	; 129
    207a:	fe 4f       	sbci	r31, 0xFE	; 254
    207c:	80 81       	ld	r24, Z
    207e:	01 c0       	rjmp	.+2      	; 0x2082 <qtm_measure_node+0x112>
    2080:	8f e3       	ldi	r24, 0x3F	; 63
    2082:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7f80e7>
    2086:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <qtm_acquisition_control_working_set_ptr>
    208a:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <qtm_acquisition_control_working_set_ptr+0x1>
    208e:	02 80       	ldd	r0, Z+2	; 0x02
    2090:	f3 81       	ldd	r31, Z+3	; 0x03
    2092:	e0 2d       	mov	r30, r0
    2094:	e2 0f       	add	r30, r18
    2096:	f3 1f       	adc	r31, r19
    2098:	86 81       	ldd	r24, Z+6	; 0x06
    209a:	8b 3f       	cpi	r24, 0xFB	; 251
    209c:	10 f4       	brcc	.+4      	; 0x20a2 <qtm_measure_node+0x132>
    209e:	8c 5f       	subi	r24, 0xFC	; 252
    20a0:	01 c0       	rjmp	.+2      	; 0x20a4 <qtm_measure_node+0x134>
    20a2:	8f ef       	ldi	r24, 0xFF	; 255
    20a4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    20a8:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <qtm_acquisition_control_working_set_ptr>
    20ac:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <qtm_acquisition_control_working_set_ptr+0x1>
    20b0:	02 80       	ldd	r0, Z+2	; 0x02
    20b2:	f3 81       	ldd	r31, Z+3	; 0x03
    20b4:	e0 2d       	mov	r30, r0
    20b6:	e2 0f       	add	r30, r18
    20b8:	f3 1f       	adc	r31, r19
    20ba:	87 81       	ldd	r24, Z+7	; 0x07
    20bc:	80 7f       	andi	r24, 0xF0	; 240
    20be:	91 85       	ldd	r25, Z+9	; 0x09
    20c0:	89 2b       	or	r24, r25
    20c2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    20c6:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <qtm_acquisition_control_working_set_ptr>
    20ca:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <qtm_acquisition_control_working_set_ptr+0x1>
    20ce:	82 81       	ldd	r24, Z+2	; 0x02
    20d0:	93 81       	ldd	r25, Z+3	; 0x03
    20d2:	fc 01       	movw	r30, r24
    20d4:	e2 0f       	add	r30, r18
    20d6:	f3 1f       	adc	r31, r19
    20d8:	87 81       	ldd	r24, Z+7	; 0x07
    20da:	8f 70       	andi	r24, 0x0F	; 15
    20dc:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    20e0:	82 e1       	ldi	r24, 0x12	; 18
    20e2:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    20e6:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    20ea:	81 60       	ori	r24, 0x01	; 1
    20ec:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    20f0:	08 95       	ret

000020f2 <qtm_acquisition_process>:
    20f2:	4f 92       	push	r4
    20f4:	5f 92       	push	r5
    20f6:	6f 92       	push	r6
    20f8:	7f 92       	push	r7
    20fa:	8f 92       	push	r8
    20fc:	9f 92       	push	r9
    20fe:	af 92       	push	r10
    2100:	bf 92       	push	r11
    2102:	cf 92       	push	r12
    2104:	df 92       	push	r13
    2106:	ef 92       	push	r14
    2108:	ff 92       	push	r15
    210a:	0f 93       	push	r16
    210c:	1f 93       	push	r17
    210e:	cf 93       	push	r28
    2110:	df 93       	push	r29
    2112:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <touch_seq_lib_state>
    2116:	88 23       	and	r24, r24
    2118:	09 f4       	brne	.+2      	; 0x211c <qtm_acquisition_process+0x2a>
    211a:	31 c1       	rjmp	.+610    	; 0x237e <qtm_acquisition_process+0x28c>
    211c:	a0 91 df 01 	lds	r26, 0x01DF	; 0x8001df <qtm_acquisition_control_working_set_ptr>
    2120:	b0 91 e0 01 	lds	r27, 0x01E0	; 0x8001e0 <qtm_acquisition_control_working_set_ptr+0x1>
    2124:	e0 90 e1 01 	lds	r14, 0x01E1	; 0x8001e1 <qtm_raw_data_measurements_ptr>
    2128:	f0 90 e2 01 	lds	r15, 0x01E2	; 0x8001e2 <qtm_raw_data_measurements_ptr+0x1>
    212c:	41 2c       	mov	r4, r1
    212e:	51 2c       	mov	r5, r1
    2130:	60 e0       	ldi	r22, 0x00	; 0
    2132:	70 e0       	ldi	r23, 0x00	; 0
    2134:	00 e0       	ldi	r16, 0x00	; 0
    2136:	10 e0       	ldi	r17, 0x00	; 0
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	66 24       	eor	r6, r6
    213c:	63 94       	inc	r6
    213e:	91 e8       	ldi	r25, 0x81	; 129
    2140:	79 2e       	mov	r7, r25
    2142:	aa 24       	eor	r10, r10
    2144:	aa 94       	dec	r10
    2146:	bb 24       	eor	r11, r11
    2148:	b3 94       	inc	r11
    214a:	cd 90       	ld	r12, X+
    214c:	dc 90       	ld	r13, X
    214e:	11 97       	sbiw	r26, 0x01	; 1
    2150:	f6 01       	movw	r30, r12
    2152:	20 81       	ld	r18, Z
    2154:	31 81       	ldd	r19, Z+1	; 0x01
    2156:	02 17       	cp	r16, r18
    2158:	13 07       	cpc	r17, r19
    215a:	08 f0       	brcs	.+2      	; 0x215e <qtm_acquisition_process+0x6c>
    215c:	0c c1       	rjmp	.+536    	; 0x2376 <qtm_acquisition_process+0x284>
    215e:	e7 01       	movw	r28, r14
    2160:	29 91       	ld	r18, Y+
    2162:	39 91       	ld	r19, Y+
    2164:	7e 01       	movw	r14, r28
    2166:	14 96       	adiw	r26, 0x04	; 4
    2168:	ed 91       	ld	r30, X+
    216a:	fc 91       	ld	r31, X
    216c:	15 97       	sbiw	r26, 0x05	; 5
    216e:	e6 0f       	add	r30, r22
    2170:	f7 1f       	adc	r31, r23
    2172:	40 81       	ld	r20, Z
    2174:	4c 71       	andi	r20, 0x1C	; 28
    2176:	50 e0       	ldi	r21, 0x00	; 0
    2178:	56 95       	lsr	r21
    217a:	47 95       	ror	r20
    217c:	56 95       	lsr	r21
    217e:	47 95       	ror	r20
    2180:	41 15       	cp	r20, r1
    2182:	51 05       	cpc	r21, r1
    2184:	21 f0       	breq	.+8      	; 0x218e <qtm_acquisition_process+0x9c>
    2186:	41 30       	cpi	r20, 0x01	; 1
    2188:	51 05       	cpc	r21, r1
    218a:	c1 f0       	breq	.+48     	; 0x21bc <qtm_acquisition_process+0xca>
    218c:	eb c0       	rjmp	.+470    	; 0x2364 <qtm_acquisition_process+0x272>
    218e:	12 96       	adiw	r26, 0x02	; 2
    2190:	4d 91       	ld	r20, X+
    2192:	5c 91       	ld	r21, X
    2194:	13 97       	sbiw	r26, 0x03	; 3
    2196:	44 0d       	add	r20, r4
    2198:	55 1d       	adc	r21, r5
    219a:	ea 01       	movw	r28, r20
    219c:	98 85       	ldd	r25, Y+8	; 0x08
    219e:	9f 70       	andi	r25, 0x0F	; 15
    21a0:	49 85       	ldd	r20, Y+9	; 0x09
    21a2:	94 17       	cp	r25, r20
    21a4:	10 f4       	brcc	.+4      	; 0x21aa <qtm_acquisition_process+0xb8>
    21a6:	49 1b       	sub	r20, r25
    21a8:	01 c0       	rjmp	.+2      	; 0x21ac <qtm_acquisition_process+0xba>
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <qtm_acquisition_process+0xc0>
    21ae:	36 95       	lsr	r19
    21b0:	27 95       	ror	r18
    21b2:	4a 95       	dec	r20
    21b4:	e2 f7       	brpl	.-8      	; 0x21ae <qtm_acquisition_process+0xbc>
    21b6:	32 83       	std	Z+2, r19	; 0x02
    21b8:	21 83       	std	Z+1, r18	; 0x01
    21ba:	d5 c0       	rjmp	.+426    	; 0x2366 <qtm_acquisition_process+0x274>
    21bc:	12 96       	adiw	r26, 0x02	; 2
    21be:	4d 91       	ld	r20, X+
    21c0:	5c 91       	ld	r21, X
    21c2:	13 97       	sbiw	r26, 0x03	; 3
    21c4:	44 0d       	add	r20, r4
    21c6:	55 1d       	adc	r21, r5
    21c8:	ea 01       	movw	r28, r20
    21ca:	09 84       	ldd	r0, Y+9	; 0x09
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <qtm_acquisition_process+0xe0>
    21ce:	36 95       	lsr	r19
    21d0:	27 95       	ror	r18
    21d2:	0a 94       	dec	r0
    21d4:	e2 f7       	brpl	.-8      	; 0x21ce <qtm_acquisition_process+0xdc>
    21d6:	32 83       	std	Z+2, r19	; 0x02
    21d8:	21 83       	std	Z+1, r18	; 0x01
    21da:	43 81       	ldd	r20, Z+3	; 0x03
    21dc:	54 81       	ldd	r21, Z+4	; 0x04
    21de:	21 15       	cp	r18, r1
    21e0:	d2 e0       	ldi	r29, 0x02	; 2
    21e2:	3d 07       	cpc	r19, r29
    21e4:	20 f0       	brcs	.+8      	; 0x21ee <qtm_acquisition_process+0xfc>
    21e6:	2f 5f       	subi	r18, 0xFF	; 255
    21e8:	31 40       	sbci	r19, 0x01	; 1
    21ea:	91 e0       	ldi	r25, 0x01	; 1
    21ec:	05 c0       	rjmp	.+10     	; 0x21f8 <qtm_acquisition_process+0x106>
    21ee:	e5 01       	movw	r28, r10
    21f0:	c2 1b       	sub	r28, r18
    21f2:	d3 0b       	sbc	r29, r19
    21f4:	9e 01       	movw	r18, r28
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	e6 01       	movw	r28, r12
    21fa:	da 80       	ldd	r13, Y+2	; 0x02
    21fc:	d0 e4       	ldi	r29, 0x40	; 64
    21fe:	dd 12       	cpse	r13, r29
    2200:	05 c0       	rjmp	.+10     	; 0x220c <qtm_acquisition_process+0x11a>
    2202:	36 95       	lsr	r19
    2204:	27 95       	ror	r18
    2206:	99 23       	and	r25, r25
    2208:	19 f0       	breq	.+6      	; 0x2210 <qtm_acquisition_process+0x11e>
    220a:	09 c0       	rjmp	.+18     	; 0x221e <qtm_acquisition_process+0x12c>
    220c:	99 23       	and	r25, r25
    220e:	39 f0       	breq	.+14     	; 0x221e <qtm_acquisition_process+0x12c>
    2210:	4f 3f       	cpi	r20, 0xFF	; 255
    2212:	9f e3       	ldi	r25, 0x3F	; 63
    2214:	59 07       	cpc	r21, r25
    2216:	31 f4       	brne	.+12     	; 0x2224 <qtm_acquisition_process+0x132>
    2218:	70 82       	st	Z, r7
    221a:	8e e0       	ldi	r24, 0x0E	; 14
    221c:	07 c0       	rjmp	.+14     	; 0x222c <qtm_acquisition_process+0x13a>
    221e:	88 24       	eor	r8, r8
    2220:	83 94       	inc	r8
    2222:	01 c0       	rjmp	.+2      	; 0x2226 <qtm_acquisition_process+0x134>
    2224:	81 2c       	mov	r8, r1
    2226:	2a 30       	cpi	r18, 0x0A	; 10
    2228:	31 05       	cpc	r19, r1
    222a:	98 f4       	brcc	.+38     	; 0x2252 <qtm_acquisition_process+0x160>
    222c:	14 96       	adiw	r26, 0x04	; 4
    222e:	ed 91       	ld	r30, X+
    2230:	fc 91       	ld	r31, X
    2232:	15 97       	sbiw	r26, 0x05	; 5
    2234:	e6 0f       	add	r30, r22
    2236:	f7 1f       	adc	r31, r23
    2238:	20 81       	ld	r18, Z
    223a:	27 ff       	sbrs	r18, 7
    223c:	60 82       	st	Z, r6
    223e:	14 96       	adiw	r26, 0x04	; 4
    2240:	ed 91       	ld	r30, X+
    2242:	fc 91       	ld	r31, X
    2244:	15 97       	sbiw	r26, 0x05	; 5
    2246:	e6 0f       	add	r30, r22
    2248:	f7 1f       	adc	r31, r23
    224a:	5f 73       	andi	r21, 0x3F	; 63
    224c:	54 83       	std	Z+4, r21	; 0x04
    224e:	43 83       	std	Z+3, r20	; 0x03
    2250:	8a c0       	rjmp	.+276    	; 0x2366 <qtm_acquisition_process+0x274>
    2252:	6a 01       	movw	r12, r20
    2254:	cc 24       	eor	r12, r12
    2256:	c0 e3       	ldi	r28, 0x30	; 48
    2258:	dc 22       	and	r13, r28
    225a:	9d 2c       	mov	r9, r13
    225c:	92 94       	swap	r9
    225e:	df e0       	ldi	r29, 0x0F	; 15
    2260:	9d 22       	and	r9, r29
    2262:	6a 01       	movw	r12, r20
    2264:	cc 24       	eor	r12, r12
    2266:	df e0       	ldi	r29, 0x0F	; 15
    2268:	dd 22       	and	r13, r29
    226a:	9d 2d       	mov	r25, r13
    226c:	6a 01       	movw	r12, r20
    226e:	c0 ef       	ldi	r28, 0xF0	; 240
    2270:	cc 22       	and	r12, r28
    2272:	dd 24       	eor	r13, r13
    2274:	54 e0       	ldi	r21, 0x04	; 4
    2276:	d6 94       	lsr	r13
    2278:	c7 94       	ror	r12
    227a:	5a 95       	dec	r21
    227c:	e1 f7       	brne	.-8      	; 0x2276 <qtm_acquisition_process+0x184>
    227e:	5c 2d       	mov	r21, r12
    2280:	4f 70       	andi	r20, 0x0F	; 15
    2282:	81 10       	cpse	r8, r1
    2284:	32 c0       	rjmp	.+100    	; 0x22ea <qtm_acquisition_process+0x1f8>
    2286:	20 3d       	cpi	r18, 0xD0	; 208
    2288:	31 05       	cpc	r19, r1
    228a:	60 f0       	brcs	.+24     	; 0x22a4 <qtm_acquisition_process+0x1b2>
    228c:	d3 e0       	ldi	r29, 0x03	; 3
    228e:	9d 16       	cp	r9, r29
    2290:	49 f0       	breq	.+18     	; 0x22a4 <qtm_acquisition_process+0x1b2>
    2292:	93 94       	inc	r9
    2294:	2f 5c       	subi	r18, 0xCF	; 207
    2296:	31 09       	sbc	r19, r1
    2298:	f6 cf       	rjmp	.-20     	; 0x2286 <qtm_acquisition_process+0x194>
    229a:	9f 30       	cpi	r25, 0x0F	; 15
    229c:	41 f0       	breq	.+16     	; 0x22ae <qtm_acquisition_process+0x1bc>
    229e:	9f 5f       	subi	r25, 0xFF	; 255
    22a0:	25 51       	subi	r18, 0x15	; 21
    22a2:	31 09       	sbc	r19, r1
    22a4:	26 31       	cpi	r18, 0x16	; 22
    22a6:	31 05       	cpc	r19, r1
    22a8:	c0 f7       	brcc	.-16     	; 0x229a <qtm_acquisition_process+0x1a8>
    22aa:	9f 30       	cpi	r25, 0x0F	; 15
    22ac:	69 f4       	brne	.+26     	; 0x22c8 <qtm_acquisition_process+0x1d6>
    22ae:	93 e0       	ldi	r25, 0x03	; 3
    22b0:	99 12       	cpse	r9, r25
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <qtm_acquisition_process+0x1c6>
    22b4:	9f e0       	ldi	r25, 0x0F	; 15
    22b6:	08 c0       	rjmp	.+16     	; 0x22c8 <qtm_acquisition_process+0x1d6>
    22b8:	93 94       	inc	r9
    22ba:	95 e0       	ldi	r25, 0x05	; 5
    22bc:	05 c0       	rjmp	.+10     	; 0x22c8 <qtm_acquisition_process+0x1d6>
    22be:	5f 30       	cpi	r21, 0x0F	; 15
    22c0:	49 f0       	breq	.+18     	; 0x22d4 <qtm_acquisition_process+0x1e2>
    22c2:	5f 5f       	subi	r21, 0xFF	; 255
    22c4:	22 50       	subi	r18, 0x02	; 2
    22c6:	31 09       	sbc	r19, r1
    22c8:	23 30       	cpi	r18, 0x03	; 3
    22ca:	31 05       	cpc	r19, r1
    22cc:	c0 f7       	brcc	.-16     	; 0x22be <qtm_acquisition_process+0x1cc>
    22ce:	5f 30       	cpi	r21, 0x0F	; 15
    22d0:	09 f0       	breq	.+2      	; 0x22d4 <qtm_acquisition_process+0x1e2>
    22d2:	5b c0       	rjmp	.+182    	; 0x238a <qtm_acquisition_process+0x298>
    22d4:	9f 30       	cpi	r25, 0x0F	; 15
    22d6:	09 f4       	brne	.+2      	; 0x22da <qtm_acquisition_process+0x1e8>
    22d8:	54 c0       	rjmp	.+168    	; 0x2382 <qtm_acquisition_process+0x290>
    22da:	9f 5f       	subi	r25, 0xFF	; 255
    22dc:	55 e0       	ldi	r21, 0x05	; 5
    22de:	55 c0       	rjmp	.+170    	; 0x238a <qtm_acquisition_process+0x298>
    22e0:	99 20       	and	r9, r9
    22e2:	61 f0       	breq	.+24     	; 0x22fc <qtm_acquisition_process+0x20a>
    22e4:	9a 94       	dec	r9
    22e6:	2f 5c       	subi	r18, 0xCF	; 207
    22e8:	31 09       	sbc	r19, r1
    22ea:	20 3d       	cpi	r18, 0xD0	; 208
    22ec:	31 05       	cpc	r19, r1
    22ee:	c0 f7       	brcc	.-16     	; 0x22e0 <qtm_acquisition_process+0x1ee>
    22f0:	05 c0       	rjmp	.+10     	; 0x22fc <qtm_acquisition_process+0x20a>
    22f2:	99 23       	and	r25, r25
    22f4:	41 f0       	breq	.+16     	; 0x2306 <qtm_acquisition_process+0x214>
    22f6:	91 50       	subi	r25, 0x01	; 1
    22f8:	25 51       	subi	r18, 0x15	; 21
    22fa:	31 09       	sbc	r19, r1
    22fc:	26 31       	cpi	r18, 0x16	; 22
    22fe:	31 05       	cpc	r19, r1
    2300:	c0 f7       	brcc	.-16     	; 0x22f2 <qtm_acquisition_process+0x200>
    2302:	91 11       	cpse	r25, r1
    2304:	0c c0       	rjmp	.+24     	; 0x231e <qtm_acquisition_process+0x22c>
    2306:	91 10       	cpse	r9, r1
    2308:	02 c0       	rjmp	.+4      	; 0x230e <qtm_acquisition_process+0x21c>
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	08 c0       	rjmp	.+16     	; 0x231e <qtm_acquisition_process+0x22c>
    230e:	9a 94       	dec	r9
    2310:	9a e0       	ldi	r25, 0x0A	; 10
    2312:	05 c0       	rjmp	.+10     	; 0x231e <qtm_acquisition_process+0x22c>
    2314:	55 23       	and	r21, r21
    2316:	41 f0       	breq	.+16     	; 0x2328 <qtm_acquisition_process+0x236>
    2318:	51 50       	subi	r21, 0x01	; 1
    231a:	22 50       	subi	r18, 0x02	; 2
    231c:	31 09       	sbc	r19, r1
    231e:	23 30       	cpi	r18, 0x03	; 3
    2320:	31 05       	cpc	r19, r1
    2322:	c0 f7       	brcc	.-16     	; 0x2314 <qtm_acquisition_process+0x222>
    2324:	51 11       	cpse	r21, r1
    2326:	0d c0       	rjmp	.+26     	; 0x2342 <qtm_acquisition_process+0x250>
    2328:	99 23       	and	r25, r25
    232a:	b9 f1       	breq	.+110    	; 0x239a <qtm_acquisition_process+0x2a8>
    232c:	91 50       	subi	r25, 0x01	; 1
    232e:	5a e0       	ldi	r21, 0x0A	; 10
    2330:	23 30       	cpi	r18, 0x03	; 3
    2332:	31 05       	cpc	r19, r1
    2334:	d0 f6       	brcc	.-76     	; 0x22ea <qtm_acquisition_process+0x1f8>
    2336:	05 c0       	rjmp	.+10     	; 0x2342 <qtm_acquisition_process+0x250>
    2338:	23 30       	cpi	r18, 0x03	; 3
    233a:	31 05       	cpc	r19, r1
    233c:	58 f1       	brcs	.+86     	; 0x2394 <qtm_acquisition_process+0x2a2>
    233e:	4f e0       	ldi	r20, 0x0F	; 15
    2340:	5f e0       	ldi	r21, 0x0F	; 15
    2342:	29 2d       	mov	r18, r9
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	32 2f       	mov	r19, r18
    2348:	22 27       	eor	r18, r18
    234a:	32 95       	swap	r19
    234c:	30 7f       	andi	r19, 0xF0	; 240
    234e:	39 2b       	or	r19, r25
    2350:	24 2b       	or	r18, r20
    2352:	c0 e1       	ldi	r28, 0x10	; 16
    2354:	5c 9f       	mul	r21, r28
    2356:	60 01       	movw	r12, r0
    2358:	11 24       	eor	r1, r1
    235a:	c2 2a       	or	r12, r18
    235c:	d3 2a       	or	r13, r19
    235e:	d4 82       	std	Z+4, r13	; 0x04
    2360:	c3 82       	std	Z+3, r12	; 0x03
    2362:	01 c0       	rjmp	.+2      	; 0x2366 <qtm_acquisition_process+0x274>
    2364:	ff cf       	rjmp	.-2      	; 0x2364 <qtm_acquisition_process+0x272>
    2366:	0f 5f       	subi	r16, 0xFF	; 255
    2368:	1f 4f       	sbci	r17, 0xFF	; 255
    236a:	6b 5f       	subi	r22, 0xFB	; 251
    236c:	7f 4f       	sbci	r23, 0xFF	; 255
    236e:	da e0       	ldi	r29, 0x0A	; 10
    2370:	4d 0e       	add	r4, r29
    2372:	51 1c       	adc	r5, r1
    2374:	ea ce       	rjmp	.-556    	; 0x214a <qtm_acquisition_process+0x58>
    2376:	92 e0       	ldi	r25, 0x02	; 2
    2378:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <touch_seq_lib_state>
    237c:	10 c0       	rjmp	.+32     	; 0x239e <qtm_acquisition_process+0x2ac>
    237e:	83 e0       	ldi	r24, 0x03	; 3
    2380:	0e c0       	rjmp	.+28     	; 0x239e <qtm_acquisition_process+0x2ac>
    2382:	53 e0       	ldi	r21, 0x03	; 3
    2384:	95 16       	cp	r9, r21
    2386:	c1 f2       	breq	.-80     	; 0x2338 <qtm_acquisition_process+0x246>
    2388:	5f e0       	ldi	r21, 0x0F	; 15
    238a:	23 30       	cpi	r18, 0x03	; 3
    238c:	31 05       	cpc	r19, r1
    238e:	08 f0       	brcs	.+2      	; 0x2392 <qtm_acquisition_process+0x2a0>
    2390:	7a cf       	rjmp	.-268    	; 0x2286 <qtm_acquisition_process+0x194>
    2392:	d7 cf       	rjmp	.-82     	; 0x2342 <qtm_acquisition_process+0x250>
    2394:	5f e0       	ldi	r21, 0x0F	; 15
    2396:	4f e0       	ldi	r20, 0x0F	; 15
    2398:	d4 cf       	rjmp	.-88     	; 0x2342 <qtm_acquisition_process+0x250>
    239a:	50 e0       	ldi	r21, 0x00	; 0
    239c:	d2 cf       	rjmp	.-92     	; 0x2342 <qtm_acquisition_process+0x250>
    239e:	df 91       	pop	r29
    23a0:	cf 91       	pop	r28
    23a2:	1f 91       	pop	r17
    23a4:	0f 91       	pop	r16
    23a6:	ff 90       	pop	r15
    23a8:	ef 90       	pop	r14
    23aa:	df 90       	pop	r13
    23ac:	cf 90       	pop	r12
    23ae:	bf 90       	pop	r11
    23b0:	af 90       	pop	r10
    23b2:	9f 90       	pop	r9
    23b4:	8f 90       	pop	r8
    23b6:	7f 90       	pop	r7
    23b8:	6f 90       	pop	r6
    23ba:	5f 90       	pop	r5
    23bc:	4f 90       	pop	r4
    23be:	08 95       	ret

000023c0 <qtm_ptc_init_acquisition_module>:
    23c0:	8f 92       	push	r8
    23c2:	9f 92       	push	r9
    23c4:	af 92       	push	r10
    23c6:	bf 92       	push	r11
    23c8:	cf 92       	push	r12
    23ca:	df 92       	push	r13
    23cc:	ef 92       	push	r14
    23ce:	ff 92       	push	r15
    23d0:	cf 93       	push	r28
    23d2:	df 93       	push	r29
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	09 f4       	brne	.+2      	; 0x23da <qtm_ptc_init_acquisition_module+0x1a>
    23d8:	6c c0       	rjmp	.+216    	; 0x24b2 <qtm_ptc_init_acquisition_module+0xf2>
    23da:	dc 01       	movw	r26, r24
    23dc:	ed 91       	ld	r30, X+
    23de:	fc 91       	ld	r31, X
    23e0:	c0 80       	ld	r12, Z
    23e2:	d1 80       	ldd	r13, Z+1	; 0x01
    23e4:	e1 2c       	mov	r14, r1
    23e6:	f1 2c       	mov	r15, r1
    23e8:	a0 e0       	ldi	r26, 0x00	; 0
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	40 e0       	ldi	r20, 0x00	; 0
    23ee:	50 e0       	ldi	r21, 0x00	; 0
    23f0:	ba 01       	movw	r22, r20
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	ac 15       	cp	r26, r12
    23f8:	bd 05       	cpc	r27, r13
    23fa:	b1 f0       	breq	.+44     	; 0x2428 <qtm_ptc_init_acquisition_module+0x68>
    23fc:	ec 01       	movw	r28, r24
    23fe:	ea 81       	ldd	r30, Y+2	; 0x02
    2400:	fb 81       	ldd	r31, Y+3	; 0x03
    2402:	ee 0d       	add	r30, r14
    2404:	ff 1d       	adc	r31, r15
    2406:	a0 80       	ld	r10, Z
    2408:	b1 80       	ldd	r11, Z+1	; 0x01
    240a:	2a 29       	or	r18, r10
    240c:	3b 29       	or	r19, r11
    240e:	82 80       	ldd	r8, Z+2	; 0x02
    2410:	93 80       	ldd	r9, Z+3	; 0x03
    2412:	a4 80       	ldd	r10, Z+4	; 0x04
    2414:	b5 80       	ldd	r11, Z+5	; 0x05
    2416:	48 29       	or	r20, r8
    2418:	59 29       	or	r21, r9
    241a:	6a 29       	or	r22, r10
    241c:	7b 29       	or	r23, r11
    241e:	11 96       	adiw	r26, 0x01	; 1
    2420:	da e0       	ldi	r29, 0x0A	; 10
    2422:	ed 0e       	add	r14, r29
    2424:	f1 1c       	adc	r15, r1
    2426:	e7 cf       	rjmp	.-50     	; 0x23f6 <qtm_ptc_init_acquisition_module+0x36>
    2428:	41 15       	cp	r20, r1
    242a:	51 05       	cpc	r21, r1
    242c:	61 05       	cpc	r22, r1
    242e:	71 05       	cpc	r23, r1
    2430:	09 f4       	brne	.+2      	; 0x2434 <qtm_ptc_init_acquisition_module+0x74>
    2432:	41 c0       	rjmp	.+130    	; 0x24b6 <qtm_ptc_init_acquisition_module+0xf6>
    2434:	e0 91 9d 01 	lds	r30, 0x019D	; 0x80019d <touch_seq_lib_state>
    2438:	6a 01       	movw	r12, r20
    243a:	7b 01       	movw	r14, r22
    243c:	cc 24       	eor	r12, r12
    243e:	ee 24       	eor	r14, r14
    2440:	ff 24       	eor	r15, r15
    2442:	db 01       	movw	r26, r22
    2444:	ca 01       	movw	r24, r20
    2446:	88 27       	eor	r24, r24
    2448:	99 27       	eor	r25, r25
    244a:	bb 27       	eor	r27, r27
    244c:	e1 11       	cpse	r30, r1
    244e:	15 c0       	rjmp	.+42     	; 0x247a <qtm_ptc_init_acquisition_module+0xba>
    2450:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    2454:	30 93 f1 00 	sts	0x00F1, r19	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    2458:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
    245c:	cd 2c       	mov	r12, r13
    245e:	de 2c       	mov	r13, r14
    2460:	ef 2c       	mov	r14, r15
    2462:	ff 24       	eor	r15, r15
    2464:	c0 92 f5 00 	sts	0x00F5, r12	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
    2468:	cd 01       	movw	r24, r26
    246a:	aa 27       	eor	r26, r26
    246c:	bb 27       	eor	r27, r27
    246e:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <touch_seq_lib_state>
    2478:	1a c0       	rjmp	.+52     	; 0x24ae <qtm_ptc_init_acquisition_module+0xee>
    247a:	e0 91 f0 00 	lds	r30, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    247e:	2e 2b       	or	r18, r30
    2480:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    2484:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    2488:	23 2b       	or	r18, r19
    248a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    248e:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
    2492:	42 2b       	or	r20, r18
    2494:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
    2498:	20 91 f5 00 	lds	r18, 0x00F5	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
    249c:	2d 29       	or	r18, r13
    249e:	20 93 f5 00 	sts	0x00F5, r18	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
    24a2:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
    24a6:	82 2f       	mov	r24, r18
    24a8:	8a 2b       	or	r24, r26
    24aa:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	03 c0       	rjmp	.+6      	; 0x24b8 <qtm_ptc_init_acquisition_module+0xf8>
    24b2:	8b e0       	ldi	r24, 0x0B	; 11
    24b4:	01 c0       	rjmp	.+2      	; 0x24b8 <qtm_ptc_init_acquisition_module+0xf8>
    24b6:	82 e0       	ldi	r24, 0x02	; 2
    24b8:	df 91       	pop	r29
    24ba:	cf 91       	pop	r28
    24bc:	ff 90       	pop	r15
    24be:	ef 90       	pop	r14
    24c0:	df 90       	pop	r13
    24c2:	cf 90       	pop	r12
    24c4:	bf 90       	pop	r11
    24c6:	af 90       	pop	r10
    24c8:	9f 90       	pop	r9
    24ca:	8f 90       	pop	r8
    24cc:	08 95       	ret

000024ce <qtm_ptc_qtlib_assign_signal_memory>:
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	31 f0       	breq	.+12     	; 0x24de <qtm_ptc_qtlib_assign_signal_memory+0x10>
    24d2:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <qtm_raw_data_measurements_ptr+0x1>
    24d6:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <qtm_raw_data_measurements_ptr>
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	08 95       	ret
    24de:	8b e0       	ldi	r24, 0x0B	; 11
    24e0:	08 95       	ret

000024e2 <qtm_ptc_start_measurement_seq>:
    24e2:	cf 93       	push	r28
    24e4:	df 93       	push	r29
    24e6:	00 d0       	rcall	.+0      	; 0x24e8 <qtm_ptc_start_measurement_seq+0x6>
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <qtm_ptc_start_measurement_seq+0x8>
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <max_conversion_cycles>
    24f2:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <max_conversion_cycles+0x1>
    24f6:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <max_conversion_cycles+0x2>
    24fa:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <max_conversion_cycles+0x3>
    24fe:	61 15       	cp	r22, r1
    2500:	71 05       	cpc	r23, r1
    2502:	09 f4       	brne	.+2      	; 0x2506 <qtm_ptc_start_measurement_seq+0x24>
    2504:	db c0       	rjmp	.+438    	; 0x26bc <qtm_ptc_start_measurement_seq+0x1da>
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	09 f4       	brne	.+2      	; 0x250c <qtm_ptc_start_measurement_seq+0x2a>
    250a:	d8 c0       	rjmp	.+432    	; 0x26bc <qtm_ptc_start_measurement_seq+0x1da>
    250c:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <touch_seq_lib_state>
    2510:	22 23       	and	r18, r18
    2512:	09 f4       	brne	.+2      	; 0x2516 <qtm_ptc_start_measurement_seq+0x34>
    2514:	d5 c0       	rjmp	.+426    	; 0x26c0 <qtm_ptc_start_measurement_seq+0x1de>
    2516:	24 30       	cpi	r18, 0x04	; 4
    2518:	09 f0       	breq	.+2      	; 0x251c <qtm_ptc_start_measurement_seq+0x3a>
    251a:	93 c0       	rjmp	.+294    	; 0x2642 <qtm_ptc_start_measurement_seq+0x160>
    251c:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <ptc_eoc_ok_flag>
    2520:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    2524:	80 ff       	sbrs	r24, 0
    2526:	8b c0       	rjmp	.+278    	; 0x263e <qtm_ptc_start_measurement_seq+0x15c>
    2528:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	a6 e0       	ldi	r26, 0x06	; 6
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	0e 94 24 14 	call	0x2848	; 0x2848 <__umulhisi3>
    2536:	60 93 a1 01 	sts	0x01A1, r22	; 0x8001a1 <max_conversion_cycles>
    253a:	70 93 a2 01 	sts	0x01A2, r23	; 0x8001a2 <max_conversion_cycles+0x1>
    253e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <max_conversion_cycles+0x2>
    2542:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <max_conversion_cycles+0x3>
    2546:	20 91 e3 00 	lds	r18, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    254a:	2f 70       	andi	r18, 0x0F	; 15
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	82 0f       	add	r24, r18
    2552:	91 1d       	adc	r25, r1
    2554:	a1 1d       	adc	r26, r1
    2556:	b1 1d       	adc	r27, r1
    2558:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <max_conversion_cycles>
    255c:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <max_conversion_cycles+0x1>
    2560:	a0 93 a3 01 	sts	0x01A3, r26	; 0x8001a3 <max_conversion_cycles+0x2>
    2564:	b0 93 a4 01 	sts	0x01A4, r27	; 0x8001a4 <max_conversion_cycles+0x3>
    2568:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    256c:	27 70       	andi	r18, 0x07	; 7
    256e:	04 c0       	rjmp	.+8      	; 0x2578 <qtm_ptc_start_measurement_seq+0x96>
    2570:	88 0f       	add	r24, r24
    2572:	99 1f       	adc	r25, r25
    2574:	aa 1f       	adc	r26, r26
    2576:	bb 1f       	adc	r27, r27
    2578:	2a 95       	dec	r18
    257a:	d2 f7       	brpl	.-12     	; 0x2570 <qtm_ptc_start_measurement_seq+0x8e>
    257c:	0e 96       	adiw	r24, 0x0e	; 14
    257e:	a1 1d       	adc	r26, r1
    2580:	b1 1d       	adc	r27, r1
    2582:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <max_conversion_cycles>
    2586:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <max_conversion_cycles+0x1>
    258a:	a0 93 a3 01 	sts	0x01A3, r26	; 0x8001a3 <max_conversion_cycles+0x2>
    258e:	b0 93 a4 01 	sts	0x01A4, r27	; 0x8001a4 <max_conversion_cycles+0x3>
    2592:	20 91 e1 00 	lds	r18, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    2596:	23 70       	andi	r18, 0x03	; 3
    2598:	04 c0       	rjmp	.+8      	; 0x25a2 <qtm_ptc_start_measurement_seq+0xc0>
    259a:	88 0f       	add	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	aa 1f       	adc	r26, r26
    25a0:	bb 1f       	adc	r27, r27
    25a2:	2a 95       	dec	r18
    25a4:	d2 f7       	brpl	.-12     	; 0x259a <qtm_ptc_start_measurement_seq+0xb8>
    25a6:	22 e0       	ldi	r18, 0x02	; 2
    25a8:	b6 95       	lsr	r27
    25aa:	a7 95       	ror	r26
    25ac:	97 95       	ror	r25
    25ae:	87 95       	ror	r24
    25b0:	2a 95       	dec	r18
    25b2:	d1 f7       	brne	.-12     	; 0x25a8 <qtm_ptc_start_measurement_seq+0xc6>
    25b4:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <max_conversion_cycles>
    25b8:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <max_conversion_cycles+0x1>
    25bc:	a0 93 a3 01 	sts	0x01A3, r26	; 0x8001a3 <max_conversion_cycles+0x2>
    25c0:	b0 93 a4 01 	sts	0x01A4, r27	; 0x8001a4 <max_conversion_cycles+0x3>
    25c4:	19 82       	std	Y+1, r1	; 0x01
    25c6:	1a 82       	std	Y+2, r1	; 0x02
    25c8:	1b 82       	std	Y+3, r1	; 0x03
    25ca:	1c 82       	std	Y+4, r1	; 0x04
    25cc:	21 e0       	ldi	r18, 0x01	; 1
    25ce:	49 81       	ldd	r20, Y+1	; 0x01
    25d0:	5a 81       	ldd	r21, Y+2	; 0x02
    25d2:	6b 81       	ldd	r22, Y+3	; 0x03
    25d4:	7c 81       	ldd	r23, Y+4	; 0x04
    25d6:	48 17       	cp	r20, r24
    25d8:	59 07       	cpc	r21, r25
    25da:	6a 07       	cpc	r22, r26
    25dc:	7b 07       	cpc	r23, r27
    25de:	b0 f4       	brcc	.+44     	; 0x260c <qtm_ptc_start_measurement_seq+0x12a>
    25e0:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <ptc_eoc_ok_flag>
    25e4:	33 23       	and	r19, r19
    25e6:	29 f0       	breq	.+10     	; 0x25f2 <qtm_ptc_start_measurement_seq+0x110>
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	9a 83       	std	Y+2, r25	; 0x02
    25ec:	ab 83       	std	Y+3, r26	; 0x03
    25ee:	bc 83       	std	Y+4, r27	; 0x04
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	49 81       	ldd	r20, Y+1	; 0x01
    25f4:	5a 81       	ldd	r21, Y+2	; 0x02
    25f6:	6b 81       	ldd	r22, Y+3	; 0x03
    25f8:	7c 81       	ldd	r23, Y+4	; 0x04
    25fa:	4f 5f       	subi	r20, 0xFF	; 255
    25fc:	5f 4f       	sbci	r21, 0xFF	; 255
    25fe:	6f 4f       	sbci	r22, 0xFF	; 255
    2600:	7f 4f       	sbci	r23, 0xFF	; 255
    2602:	49 83       	std	Y+1, r20	; 0x01
    2604:	5a 83       	std	Y+2, r21	; 0x02
    2606:	6b 83       	std	Y+3, r22	; 0x03
    2608:	7c 83       	std	Y+4, r23	; 0x04
    260a:	e1 cf       	rjmp	.-62     	; 0x25ce <qtm_ptc_start_measurement_seq+0xec>
    260c:	22 23       	and	r18, r18
    260e:	b9 f0       	breq	.+46     	; 0x263e <qtm_ptc_start_measurement_seq+0x15c>
    2610:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    2614:	80 ff       	sbrs	r24, 0
    2616:	13 c0       	rjmp	.+38     	; 0x263e <qtm_ptc_start_measurement_seq+0x15c>
    2618:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    261c:	00 00       	nop
    261e:	82 e1       	ldi	r24, 0x12	; 18
    2620:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    2624:	00 00       	nop
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    262c:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <ptc_lockups>
    2630:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <ptc_lockups+0x1>
    2634:	01 96       	adiw	r24, 0x01	; 1
    2636:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <ptc_lockups+0x1>
    263a:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <ptc_lockups>
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	42 c0       	rjmp	.+132    	; 0x26c6 <qtm_ptc_start_measurement_seq+0x1e4>
    2642:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <qtm_acquisition_control_working_set_ptr+0x1>
    2646:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <qtm_acquisition_control_working_set_ptr>
    264a:	70 93 98 01 	sts	0x0198, r23	; 0x800198 <ptc_seq_measure_complete_pointer+0x1>
    264e:	60 93 97 01 	sts	0x0197, r22	; 0x800197 <ptc_seq_measure_complete_pointer>
    2652:	dc 01       	movw	r26, r24
    2654:	ed 91       	ld	r30, X+
    2656:	fc 91       	ld	r31, X
    2658:	82 81       	ldd	r24, Z+2	; 0x02
    265a:	80 34       	cpi	r24, 0x40	; 64
    265c:	11 f4       	brne	.+4      	; 0x2662 <qtm_ptc_start_measurement_seq+0x180>
    265e:	88 e0       	ldi	r24, 0x08	; 8
    2660:	03 c0       	rjmp	.+6      	; 0x2668 <qtm_ptc_start_measurement_seq+0x186>
    2662:	80 38       	cpi	r24, 0x80	; 128
    2664:	79 f5       	brne	.+94     	; 0x26c4 <qtm_ptc_start_measurement_seq+0x1e2>
    2666:	8a e0       	ldi	r24, 0x0A	; 10
    2668:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    266c:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <qtm_acquisition_control_working_set_ptr>
    2670:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <qtm_acquisition_control_working_set_ptr+0x1>
    2674:	01 90       	ld	r0, Z+
    2676:	f0 81       	ld	r31, Z
    2678:	e0 2d       	mov	r30, r0
    267a:	84 81       	ldd	r24, Z+4	; 0x04
    267c:	80 31       	cpi	r24, 0x10	; 16
    267e:	08 f0       	brcs	.+2      	; 0x2682 <qtm_ptc_start_measurement_seq+0x1a0>
    2680:	80 e1       	ldi	r24, 0x10	; 16
    2682:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	84 bb       	out	0x14, r24	; 20
    268a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7f8074>
    268e:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <current_measure_channel+0x1>
    2692:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <current_measure_channel>
    2696:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <select_next_channel_to_measure>
    269a:	81 11       	cpse	r24, r1
    269c:	0b c0       	rjmp	.+22     	; 0x26b4 <qtm_ptc_start_measurement_seq+0x1d2>
    269e:	84 e0       	ldi	r24, 0x04	; 4
    26a0:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <touch_seq_lib_state>
    26a4:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <current_measure_channel>
    26a8:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <current_measure_channel+0x1>
    26ac:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <qtm_measure_node>
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	09 c0       	rjmp	.+18     	; 0x26c6 <qtm_ptc_start_measurement_seq+0x1e4>
    26b4:	82 e0       	ldi	r24, 0x02	; 2
    26b6:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <touch_seq_lib_state>
    26ba:	05 c0       	rjmp	.+10     	; 0x26c6 <qtm_ptc_start_measurement_seq+0x1e4>
    26bc:	8b e0       	ldi	r24, 0x0B	; 11
    26be:	03 c0       	rjmp	.+6      	; 0x26c6 <qtm_ptc_start_measurement_seq+0x1e4>
    26c0:	83 e0       	ldi	r24, 0x03	; 3
    26c2:	01 c0       	rjmp	.+2      	; 0x26c6 <qtm_ptc_start_measurement_seq+0x1e4>
    26c4:	82 e0       	ldi	r24, 0x02	; 2
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	08 95       	ret

000026d4 <qtm_enable_sensor_node>:
    26d4:	00 97       	sbiw	r24, 0x00	; 0
    26d6:	c9 f0       	breq	.+50     	; 0x270a <qtm_enable_sensor_node+0x36>
    26d8:	dc 01       	movw	r26, r24
    26da:	ed 91       	ld	r30, X+
    26dc:	fc 91       	ld	r31, X
    26de:	11 97       	sbiw	r26, 0x01	; 1
    26e0:	20 81       	ld	r18, Z
    26e2:	31 81       	ldd	r19, Z+1	; 0x01
    26e4:	26 17       	cp	r18, r22
    26e6:	37 07       	cpc	r19, r23
    26e8:	90 f0       	brcs	.+36     	; 0x270e <qtm_enable_sensor_node+0x3a>
    26ea:	45 e0       	ldi	r20, 0x05	; 5
    26ec:	46 9f       	mul	r20, r22
    26ee:	90 01       	movw	r18, r0
    26f0:	47 9f       	mul	r20, r23
    26f2:	30 0d       	add	r19, r0
    26f4:	11 24       	eor	r1, r1
    26f6:	14 96       	adiw	r26, 0x04	; 4
    26f8:	ed 91       	ld	r30, X+
    26fa:	fc 91       	ld	r31, X
    26fc:	15 97       	sbiw	r26, 0x05	; 5
    26fe:	e2 0f       	add	r30, r18
    2700:	f3 1f       	adc	r31, r19
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	80 83       	st	Z, r24
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	08 95       	ret
    270a:	8b e0       	ldi	r24, 0x0B	; 11
    270c:	08 95       	ret
    270e:	82 e0       	ldi	r24, 0x02	; 2
    2710:	08 95       	ret

00002712 <qtm_calibrate_sensor_node>:
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	d1 f1       	breq	.+116    	; 0x278a <qtm_calibrate_sensor_node+0x78>
    2716:	dc 01       	movw	r26, r24
    2718:	ed 91       	ld	r30, X+
    271a:	fc 91       	ld	r31, X
    271c:	11 97       	sbiw	r26, 0x01	; 1
    271e:	20 81       	ld	r18, Z
    2720:	31 81       	ldd	r19, Z+1	; 0x01
    2722:	26 17       	cp	r18, r22
    2724:	37 07       	cpc	r19, r23
    2726:	98 f1       	brcs	.+102    	; 0x278e <qtm_calibrate_sensor_node+0x7c>
    2728:	22 81       	ldd	r18, Z+2	; 0x02
    272a:	14 96       	adiw	r26, 0x04	; 4
    272c:	ed 91       	ld	r30, X+
    272e:	fc 91       	ld	r31, X
    2730:	15 97       	sbiw	r26, 0x05	; 5
    2732:	20 34       	cpi	r18, 0x40	; 64
    2734:	59 f4       	brne	.+22     	; 0x274c <qtm_calibrate_sensor_node+0x3a>
    2736:	85 e0       	ldi	r24, 0x05	; 5
    2738:	86 9f       	mul	r24, r22
    273a:	d0 01       	movw	r26, r0
    273c:	87 9f       	mul	r24, r23
    273e:	b0 0d       	add	r27, r0
    2740:	11 24       	eor	r1, r1
    2742:	ae 0f       	add	r26, r30
    2744:	bf 1f       	adc	r27, r31
    2746:	84 e3       	ldi	r24, 0x34	; 52
    2748:	92 e0       	ldi	r25, 0x02	; 2
    274a:	0c c0       	rjmp	.+24     	; 0x2764 <qtm_calibrate_sensor_node+0x52>
    274c:	20 38       	cpi	r18, 0x80	; 128
    274e:	81 f4       	brne	.+32     	; 0x2770 <qtm_calibrate_sensor_node+0x5e>
    2750:	85 e0       	ldi	r24, 0x05	; 5
    2752:	86 9f       	mul	r24, r22
    2754:	d0 01       	movw	r26, r0
    2756:	87 9f       	mul	r24, r23
    2758:	b0 0d       	add	r27, r0
    275a:	11 24       	eor	r1, r1
    275c:	ae 0f       	add	r26, r30
    275e:	bf 1f       	adc	r27, r31
    2760:	87 e6       	ldi	r24, 0x67	; 103
    2762:	95 e0       	ldi	r25, 0x05	; 5
    2764:	14 96       	adiw	r26, 0x04	; 4
    2766:	9c 93       	st	X, r25
    2768:	8e 93       	st	-X, r24
    276a:	13 97       	sbiw	r26, 0x03	; 3
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	01 c0       	rjmp	.+2      	; 0x2772 <qtm_calibrate_sensor_node+0x60>
    2770:	82 e0       	ldi	r24, 0x02	; 2
    2772:	95 e0       	ldi	r25, 0x05	; 5
    2774:	96 9f       	mul	r25, r22
    2776:	90 01       	movw	r18, r0
    2778:	97 9f       	mul	r25, r23
    277a:	30 0d       	add	r19, r0
    277c:	11 24       	eor	r1, r1
    277e:	e2 0f       	add	r30, r18
    2780:	f3 1f       	adc	r31, r19
    2782:	90 81       	ld	r25, Z
    2784:	92 60       	ori	r25, 0x02	; 2
    2786:	90 83       	st	Z, r25
    2788:	08 95       	ret
    278a:	8b e0       	ldi	r24, 0x0B	; 11
    278c:	08 95       	ret
    278e:	82 e0       	ldi	r24, 0x02	; 2
    2790:	08 95       	ret

00002792 <qtm_m328pb_ptc_handler_eoc>:
    2792:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <ptc_eoc_ok_flag>
    279c:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
    27a0:	60 91 ef 00 	lds	r22, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
    27a4:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <current_measure_channel>
    27a8:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <current_measure_channel+0x1>
    27ac:	a9 01       	movw	r20, r18
    27ae:	44 0f       	add	r20, r20
    27b0:	55 1f       	adc	r21, r21
    27b2:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <qtm_raw_data_measurements_ptr>
    27b6:	f0 91 e2 01 	lds	r31, 0x01E2	; 0x8001e2 <qtm_raw_data_measurements_ptr+0x1>
    27ba:	e4 0f       	add	r30, r20
    27bc:	f5 1f       	adc	r31, r21
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	96 2b       	or	r25, r22
    27c2:	91 83       	std	Z+1, r25	; 0x01
    27c4:	80 83       	st	Z, r24
    27c6:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <good_eocs>
    27ca:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <good_eocs+0x1>
    27ce:	01 96       	adiw	r24, 0x01	; 1
    27d0:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <good_eocs+0x1>
    27d4:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <good_eocs>
    27d8:	89 2b       	or	r24, r25
    27da:	21 f4       	brne	.+8      	; 0x27e4 <qtm_m328pb_ptc_handler_eoc+0x52>
    27dc:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <ptc_lockups+0x1>
    27e0:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <ptc_lockups>
    27e4:	2f 5f       	subi	r18, 0xFF	; 255
    27e6:	3f 4f       	sbci	r19, 0xFF	; 255
    27e8:	30 93 9f 01 	sts	0x019F, r19	; 0x80019f <current_measure_channel+0x1>
    27ec:	20 93 9e 01 	sts	0x019E, r18	; 0x80019e <current_measure_channel>
    27f0:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <select_next_channel_to_measure>
    27f4:	81 11       	cpse	r24, r1
    27f6:	09 c0       	rjmp	.+18     	; 0x280a <qtm_m328pb_ptc_handler_eoc+0x78>
    27f8:	84 e0       	ldi	r24, 0x04	; 4
    27fa:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <touch_seq_lib_state>
    27fe:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <current_measure_channel>
    2802:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <current_measure_channel+0x1>
    2806:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <qtm_measure_node>
    280a:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <ptc_seq_measure_complete_pointer>
    280e:	f0 91 98 01 	lds	r31, 0x0198	; 0x800198 <ptc_seq_measure_complete_pointer+0x1>
    2812:	09 94       	ijmp

00002814 <__divmodhi4>:
    2814:	97 fb       	bst	r25, 7
    2816:	07 2e       	mov	r0, r23
    2818:	16 f4       	brtc	.+4      	; 0x281e <__divmodhi4+0xa>
    281a:	00 94       	com	r0
    281c:	07 d0       	rcall	.+14     	; 0x282c <__divmodhi4_neg1>
    281e:	77 fd       	sbrc	r23, 7
    2820:	09 d0       	rcall	.+18     	; 0x2834 <__divmodhi4_neg2>
    2822:	0e 94 33 14 	call	0x2866	; 0x2866 <__udivmodhi4>
    2826:	07 fc       	sbrc	r0, 7
    2828:	05 d0       	rcall	.+10     	; 0x2834 <__divmodhi4_neg2>
    282a:	3e f4       	brtc	.+14     	; 0x283a <__divmodhi4_exit>

0000282c <__divmodhi4_neg1>:
    282c:	90 95       	com	r25
    282e:	81 95       	neg	r24
    2830:	9f 4f       	sbci	r25, 0xFF	; 255
    2832:	08 95       	ret

00002834 <__divmodhi4_neg2>:
    2834:	70 95       	com	r23
    2836:	61 95       	neg	r22
    2838:	7f 4f       	sbci	r23, 0xFF	; 255

0000283a <__divmodhi4_exit>:
    283a:	08 95       	ret

0000283c <__tablejump2__>:
    283c:	ee 0f       	add	r30, r30
    283e:	ff 1f       	adc	r31, r31
    2840:	05 90       	lpm	r0, Z+
    2842:	f4 91       	lpm	r31, Z
    2844:	e0 2d       	mov	r30, r0
    2846:	09 94       	ijmp

00002848 <__umulhisi3>:
    2848:	a2 9f       	mul	r26, r18
    284a:	b0 01       	movw	r22, r0
    284c:	b3 9f       	mul	r27, r19
    284e:	c0 01       	movw	r24, r0
    2850:	a3 9f       	mul	r26, r19
    2852:	70 0d       	add	r23, r0
    2854:	81 1d       	adc	r24, r1
    2856:	11 24       	eor	r1, r1
    2858:	91 1d       	adc	r25, r1
    285a:	b2 9f       	mul	r27, r18
    285c:	70 0d       	add	r23, r0
    285e:	81 1d       	adc	r24, r1
    2860:	11 24       	eor	r1, r1
    2862:	91 1d       	adc	r25, r1
    2864:	08 95       	ret

00002866 <__udivmodhi4>:
    2866:	aa 1b       	sub	r26, r26
    2868:	bb 1b       	sub	r27, r27
    286a:	51 e1       	ldi	r21, 0x11	; 17
    286c:	07 c0       	rjmp	.+14     	; 0x287c <__udivmodhi4_ep>

0000286e <__udivmodhi4_loop>:
    286e:	aa 1f       	adc	r26, r26
    2870:	bb 1f       	adc	r27, r27
    2872:	a6 17       	cp	r26, r22
    2874:	b7 07       	cpc	r27, r23
    2876:	10 f0       	brcs	.+4      	; 0x287c <__udivmodhi4_ep>
    2878:	a6 1b       	sub	r26, r22
    287a:	b7 0b       	sbc	r27, r23

0000287c <__udivmodhi4_ep>:
    287c:	88 1f       	adc	r24, r24
    287e:	99 1f       	adc	r25, r25
    2880:	5a 95       	dec	r21
    2882:	a9 f7       	brne	.-22     	; 0x286e <__udivmodhi4_loop>
    2884:	80 95       	com	r24
    2886:	90 95       	com	r25
    2888:	bc 01       	movw	r22, r24
    288a:	cd 01       	movw	r24, r26
    288c:	08 95       	ret

0000288e <_exit>:
    288e:	f8 94       	cli

00002890 <__stop_program>:
    2890:	ff cf       	rjmp	.-2      	; 0x2890 <__stop_program>
