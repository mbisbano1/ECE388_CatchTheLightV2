
CatchTheLightPrototypeV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  00004018  000040ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004018  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000060  00800186  00800186  00004132  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00004132  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004194  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  000041d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002eee  00000000  00000000  00004488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010ba  00000000  00000000  00007376  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002cb7  00000000  00000000  00008430  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000055c  00000000  00000000  0000b0e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a37  00000000  00000000  0000b644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c3a  00000000  00000000  0000d07b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000ecb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 00 	jmp	0x122	; 0x122 <__ctors_end>
       4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
       8:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
       c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      10:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      14:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      18:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      1c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      20:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      24:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      28:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      2c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      30:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      34:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      38:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_14>
      3c:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__vector_15>
      40:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      44:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      48:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      4c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      50:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      54:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      58:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      5c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      60:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      64:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      68:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      6c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      70:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      74:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      78:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      7c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      80:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      84:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      88:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      8c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      90:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      94:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__vector_37>
      98:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      9c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      a0:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      a4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      a8:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      ac:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      b0:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      b4:	4f 0e       	add	r4, r31
      b6:	68 0e       	add	r6, r24
      b8:	7d 0e       	add	r7, r29
      ba:	80 0e       	add	r8, r16
      bc:	83 0e       	add	r8, r19
      be:	86 0e       	add	r8, r22
      c0:	89 0e       	add	r8, r25
      c2:	8c 0e       	add	r8, r28
      c4:	8f 0e       	add	r8, r31
      c6:	92 0e       	add	r9, r18
      c8:	95 0e       	add	r9, r21
      ca:	98 0e       	add	r9, r24
      cc:	9b 0e       	add	r9, r27
      ce:	9e 0e       	add	r9, r30
      d0:	ac 0e       	add	r10, r28
      d2:	af 0e       	add	r10, r31
      d4:	b2 0e       	add	r11, r18
      d6:	b5 0e       	add	r11, r21
      d8:	b8 0e       	add	r11, r24
      da:	bb 0e       	add	r11, r27
      dc:	be 0e       	add	r11, r30
      de:	c1 0e       	add	r12, r17
      e0:	c4 0e       	add	r12, r20
      e2:	c7 0e       	add	r12, r23
      e4:	ca 0e       	add	r12, r26
      e6:	cd 0e       	add	r12, r29
      e8:	d4 0f       	add	r29, r20
      ea:	d8 0f       	add	r29, r24
      ec:	dc 0f       	add	r29, r28
      ee:	e0 0f       	add	r30, r16
      f0:	e4 0f       	add	r30, r20
      f2:	e8 0f       	add	r30, r24
      f4:	ec 0f       	add	r30, r28
      f6:	f0 0f       	add	r31, r16
      f8:	f4 0f       	add	r31, r20
      fa:	19 10       	cpse	r1, r9
      fc:	1d 10       	cpse	r1, r13
      fe:	21 10       	cpse	r2, r1
     100:	25 10       	cpse	r2, r5
     102:	29 10       	cpse	r2, r9
     104:	2d 10       	cpse	r2, r13
     106:	31 10       	cpse	r3, r1
     108:	35 10       	cpse	r3, r5
     10a:	39 10       	cpse	r3, r9
     10c:	3d 10       	cpse	r3, r13
     10e:	5e 10       	cpse	r5, r14
     110:	62 10       	cpse	r6, r2
     112:	66 10       	cpse	r6, r6
     114:	6a 10       	cpse	r6, r10
     116:	6e 10       	cpse	r6, r14
     118:	72 10       	cpse	r7, r2
     11a:	76 10       	cpse	r7, r6
     11c:	7a 10       	cpse	r7, r10
     11e:	7e 10       	cpse	r7, r14
     120:	82 10       	cpse	r8, r2

00000122 <__ctors_end>:
     122:	11 24       	eor	r1, r1
     124:	1f be       	out	0x3f, r1	; 63
     126:	cf ef       	ldi	r28, 0xFF	; 255
     128:	d8 e0       	ldi	r29, 0x08	; 8
     12a:	de bf       	out	0x3e, r29	; 62
     12c:	cd bf       	out	0x3d, r28	; 61

0000012e <__do_copy_data>:
     12e:	11 e0       	ldi	r17, 0x01	; 1
     130:	a0 e0       	ldi	r26, 0x00	; 0
     132:	b1 e0       	ldi	r27, 0x01	; 1
     134:	e8 e1       	ldi	r30, 0x18	; 24
     136:	f0 e4       	ldi	r31, 0x40	; 64
     138:	02 c0       	rjmp	.+4      	; 0x13e <__do_copy_data+0x10>
     13a:	05 90       	lpm	r0, Z+
     13c:	0d 92       	st	X+, r0
     13e:	a6 38       	cpi	r26, 0x86	; 134
     140:	b1 07       	cpc	r27, r17
     142:	d9 f7       	brne	.-10     	; 0x13a <__do_copy_data+0xc>

00000144 <__do_clear_bss>:
     144:	21 e0       	ldi	r18, 0x01	; 1
     146:	a6 e8       	ldi	r26, 0x86	; 134
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	01 c0       	rjmp	.+2      	; 0x14e <.do_clear_bss_start>

0000014c <.do_clear_bss_loop>:
     14c:	1d 92       	st	X+, r1

0000014e <.do_clear_bss_start>:
     14e:	a6 3e       	cpi	r26, 0xE6	; 230
     150:	b2 07       	cpc	r27, r18
     152:	e1 f7       	brne	.-8      	; 0x14c <.do_clear_bss_loop>
     154:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <main>
     158:	0c 94 0a 20 	jmp	0x4014	; 0x4014 <_exit>

0000015c <__bad_interrupt>:
     15c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000160 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     160:	0e 94 52 12 	call	0x24a4	; 0x24a4 <system_init>

	touch_init();
     164:	0e 94 94 11 	call	0x2328	; 0x2328 <touch_init>
     168:	08 95       	ret

0000016a <__vector_14>:

#include <driver_init.h>
#include <compiler.h>

ISR(TIMER0_COMPA_vect)
{
     16a:	1f 92       	push	r1
     16c:	0f 92       	push	r0
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	0f 92       	push	r0
     172:	11 24       	eor	r1, r1
     174:	2f 93       	push	r18
     176:	3f 93       	push	r19
     178:	4f 93       	push	r20
     17a:	5f 93       	push	r21
     17c:	6f 93       	push	r22
     17e:	7f 93       	push	r23
     180:	8f 93       	push	r24
     182:	9f 93       	push	r25
     184:	af 93       	push	r26
     186:	bf 93       	push	r27
     188:	ef 93       	push	r30
     18a:	ff 93       	push	r31

	mega_touch_timer();
     18c:	0e 94 08 12 	call	0x2410	; 0x2410 <mega_touch_timer>

	/* Clear the timer flag */
	TIFR0 |= OCF0A;
     190:	a8 9a       	sbi	0x15, 0	; 21
}
     192:	ff 91       	pop	r31
     194:	ef 91       	pop	r30
     196:	bf 91       	pop	r27
     198:	af 91       	pop	r26
     19a:	9f 91       	pop	r25
     19c:	8f 91       	pop	r24
     19e:	7f 91       	pop	r23
     1a0:	6f 91       	pop	r22
     1a2:	5f 91       	pop	r21
     1a4:	4f 91       	pop	r20
     1a6:	3f 91       	pop	r19
     1a8:	2f 91       	pop	r18
     1aa:	0f 90       	pop	r0
     1ac:	0f be       	out	0x3f, r0	; 63
     1ae:	0f 90       	pop	r0
     1b0:	1f 90       	pop	r1
     1b2:	18 95       	reti

000001b4 <ledIntEnable>:
	{
		curLed = 21;
	}
	if(curLed == ((curLedWhenPressed+20)%22))
	{
		loopFlag = 0;
     1b4:	ee e6       	ldi	r30, 0x6E	; 110
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	84 60       	ori	r24, 0x04	; 4
     1bc:	80 83       	st	Z, r24
     1be:	08 95       	ret

000001c0 <ClearLed>:
     1c0:	8b b1       	in	r24, 0x0b	; 11
     1c2:	8f ef       	ldi	r24, 0xFF	; 255
     1c4:	8b b9       	out	0x0b, r24	; 11
     1c6:	95 b1       	in	r25, 0x05	; 5
     1c8:	85 b9       	out	0x05, r24	; 5
     1ca:	88 b1       	in	r24, 0x08	; 8
     1cc:	8f 63       	ori	r24, 0x3F	; 63
     1ce:	88 b9       	out	0x08, r24	; 8
     1d0:	8e b1       	in	r24, 0x0e	; 14
     1d2:	87 60       	ori	r24, 0x07	; 7
     1d4:	8e b9       	out	0x0e, r24	; 14
     1d6:	08 95       	ret

000001d8 <NextLed>:
}


void NextLed(void)
{
	if(6 > curLed)
     1d8:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     1dc:	86 30       	cpi	r24, 0x06	; 6
     1de:	68 f4       	brcc	.+26     	; 0x1fa <NextLed+0x22>
	{
		PORTB = BMASK;
     1e0:	9f ef       	ldi	r25, 0xFF	; 255
     1e2:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     1e4:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	e0 59       	subi	r30, 0x90	; 144
     1ec:	fe 4f       	sbci	r31, 0xFE	; 254
     1ee:	80 81       	ld	r24, Z
     1f0:	8f 73       	andi	r24, 0x3F	; 63
     1f2:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     1f4:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     1f6:	87 e0       	ldi	r24, 0x07	; 7
     1f8:	8e b9       	out	0x0e, r24	; 14
	}
	if( (9 > curLed) && (6 <= curLed))	// 8 + 6
     1fa:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     1fe:	86 50       	subi	r24, 0x06	; 6
     200:	83 30       	cpi	r24, 0x03	; 3
     202:	68 f4       	brcc	.+26     	; 0x21e <NextLed+0x46>
	{
		PORTB = BMASK;
     204:	8f ef       	ldi	r24, 0xFF	; 255
     206:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     208:	9f e3       	ldi	r25, 0x3F	; 63
     20a:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     20c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     20e:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	e6 5a       	subi	r30, 0xA6	; 166
     216:	fe 4f       	sbci	r31, 0xFE	; 254
     218:	80 81       	ld	r24, Z
     21a:	87 70       	andi	r24, 0x07	; 7
     21c:	8e b9       	out	0x0e, r24	; 14
	}
	if( (17 > curLed) && (9 <= curLed))
     21e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     222:	89 50       	subi	r24, 0x09	; 9
     224:	88 30       	cpi	r24, 0x08	; 8
     226:	68 f4       	brcc	.+26     	; 0x242 <NextLed+0x6a>
	{
		PORTB = BMASK;
     228:	8f ef       	ldi	r24, 0xFF	; 255
     22a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     22c:	8f e3       	ldi	r24, 0x3F	; 63
     22e:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     230:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	e1 5a       	subi	r30, 0xA1	; 161
     238:	fe 4f       	sbci	r31, 0xFE	; 254
     23a:	80 81       	ld	r24, Z
     23c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     23e:	87 e0       	ldi	r24, 0x07	; 7
     240:	8e b9       	out	0x0e, r24	; 14
	}
	if( (25 > curLed) && (17 <= curLed))
     242:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     246:	8f ee       	ldi	r24, 0xEF	; 239
     248:	8e 0f       	add	r24, r30
     24a:	88 30       	cpi	r24, 0x08	; 8
     24c:	58 f4       	brcc	.+22     	; 0x264 <NextLed+0x8c>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	e9 59       	subi	r30, 0x99	; 153
     252:	fe 4f       	sbci	r31, 0xFE	; 254
     254:	80 81       	ld	r24, Z
     256:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     258:	8f e3       	ldi	r24, 0x3F	; 63
     25a:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     25c:	8f ef       	ldi	r24, 0xFF	; 255
     25e:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     260:	87 e0       	ldi	r24, 0x07	; 7
     262:	8e b9       	out	0x0e, r24	; 14
	}
	curLed = ((curLed + 1)%22);
     264:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	01 96       	adiw	r24, 0x01	; 1
     26c:	e6 e1       	ldi	r30, 0x16	; 22
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	bf 01       	movw	r22, r30
     272:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
     276:	9c 01       	movw	r18, r24
     278:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
	if(curLed == ((curLedWhenPressed+2)%22))
     27c:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <curLedWhenPressed>
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	02 96       	adiw	r24, 0x02	; 2
     284:	bf 01       	movw	r22, r30
     286:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
     28a:	33 27       	eor	r19, r19
     28c:	82 17       	cp	r24, r18
     28e:	93 07       	cpc	r25, r19
     290:	11 f4       	brne	.+4      	; 0x296 <NextLed+0xbe>
	{
		loopFlag = 0;
     292:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <loopFlag>
     296:	08 95       	ret

00000298 <Next0>:
//	E: D15-D18
//	F: D19-D22
//	G: D23-D25
void Next0(void)	//A B C D E F
{
	if(3 > curLed)		//A
     298:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     29c:	83 30       	cpi	r24, 0x03	; 3
     29e:	68 f4       	brcc	.+26     	; 0x2ba <Next0+0x22>
	{
		PORTB = BMASK;
     2a0:	9f ef       	ldi	r25, 0xFF	; 255
     2a2:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     2a4:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	e0 59       	subi	r30, 0x90	; 144
     2ac:	fe 4f       	sbci	r31, 0xFE	; 254
     2ae:	80 81       	ld	r24, Z
     2b0:	8f 73       	andi	r24, 0x3F	; 63
     2b2:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     2b4:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     2b6:	87 e0       	ldi	r24, 0x07	; 7
     2b8:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
     2ba:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     2be:	83 50       	subi	r24, 0x03	; 3
     2c0:	83 30       	cpi	r24, 0x03	; 3
     2c2:	68 f4       	brcc	.+26     	; 0x2de <Next0+0x46>
	{
		PORTB = BMASK;
     2c4:	9f ef       	ldi	r25, 0xFF	; 255
     2c6:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     2c8:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	e0 59       	subi	r30, 0x90	; 144
     2d0:	fe 4f       	sbci	r31, 0xFE	; 254
     2d2:	80 81       	ld	r24, Z
     2d4:	8f 73       	andi	r24, 0x3F	; 63
     2d6:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     2d8:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     2da:	87 e0       	ldi	r24, 0x07	; 7
     2dc:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     2de:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     2e2:	86 30       	cpi	r24, 0x06	; 6
     2e4:	69 f4       	brne	.+26     	; 0x300 <Next0+0x68>
	{
		PORTB = BMASK;
     2e6:	8f ef       	ldi	r24, 0xFF	; 255
     2e8:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     2ea:	9f e3       	ldi	r25, 0x3F	; 63
     2ec:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     2ee:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     2f0:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	e6 5a       	subi	r30, 0xA6	; 166
     2f8:	fe 4f       	sbci	r31, 0xFE	; 254
     2fa:	80 81       	ld	r24, Z
     2fc:	87 70       	andi	r24, 0x07	; 7
     2fe:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     300:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     304:	87 50       	subi	r24, 0x07	; 7
     306:	82 30       	cpi	r24, 0x02	; 2
     308:	68 f4       	brcc	.+26     	; 0x324 <Next0+0x8c>
	{
		PORTB = BMASK;
     30a:	8f ef       	ldi	r24, 0xFF	; 255
     30c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     30e:	9f e3       	ldi	r25, 0x3F	; 63
     310:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     312:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     314:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	e6 5a       	subi	r30, 0xA6	; 166
     31c:	fe 4f       	sbci	r31, 0xFE	; 254
     31e:	80 81       	ld	r24, Z
     320:	87 70       	andi	r24, 0x07	; 7
     322:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     324:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     328:	89 50       	subi	r24, 0x09	; 9
     32a:	82 30       	cpi	r24, 0x02	; 2
     32c:	68 f4       	brcc	.+26     	; 0x348 <Next0+0xb0>
	{
		PORTB = BMASK;
     32e:	8f ef       	ldi	r24, 0xFF	; 255
     330:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     332:	8f e3       	ldi	r24, 0x3F	; 63
     334:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     336:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	e1 5a       	subi	r30, 0xA1	; 161
     33e:	fe 4f       	sbci	r31, 0xFE	; 254
     340:	80 81       	ld	r24, Z
     342:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     344:	87 e0       	ldi	r24, 0x07	; 7
     346:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
     348:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     34c:	8b 50       	subi	r24, 0x0B	; 11
     34e:	83 30       	cpi	r24, 0x03	; 3
     350:	68 f4       	brcc	.+26     	; 0x36c <Next0+0xd4>
	{
		PORTB = BMASK;
     352:	8f ef       	ldi	r24, 0xFF	; 255
     354:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     356:	8f e3       	ldi	r24, 0x3F	; 63
     358:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     35a:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	e1 5a       	subi	r30, 0xA1	; 161
     362:	fe 4f       	sbci	r31, 0xFE	; 254
     364:	80 81       	ld	r24, Z
     366:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     368:	87 e0       	ldi	r24, 0x07	; 7
     36a:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (17 > curLed) && (14 <= curLed))	//E
     36c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     370:	8e 50       	subi	r24, 0x0E	; 14
     372:	83 30       	cpi	r24, 0x03	; 3
     374:	68 f4       	brcc	.+26     	; 0x390 <Next0+0xf8>
	{
		PORTB = BMASK;
     376:	8f ef       	ldi	r24, 0xFF	; 255
     378:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     37a:	8f e3       	ldi	r24, 0x3F	; 63
     37c:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     37e:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	e1 5a       	subi	r30, 0xA1	; 161
     386:	fe 4f       	sbci	r31, 0xFE	; 254
     388:	80 81       	ld	r24, Z
     38a:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     38c:	87 e0       	ldi	r24, 0x07	; 7
     38e:	8e b9       	out	0x0e, r24	; 14
	}
	if( (18 > curLed) && (17 <= curLed))	//E
     390:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     394:	81 31       	cpi	r24, 0x11	; 17
     396:	41 f4       	brne	.+16     	; 0x3a8 <Next0+0x110>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     398:	8e ef       	ldi	r24, 0xFE	; 254
     39a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     39c:	8f e3       	ldi	r24, 0x3F	; 63
     39e:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     3a0:	8f ef       	ldi	r24, 0xFF	; 255
     3a2:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     3a4:	87 e0       	ldi	r24, 0x07	; 7
     3a6:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
     3a8:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     3ac:	8e ee       	ldi	r24, 0xEE	; 238
     3ae:	8e 0f       	add	r24, r30
     3b0:	84 30       	cpi	r24, 0x04	; 4
     3b2:	58 f4       	brcc	.+22     	; 0x3ca <Next0+0x132>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	e9 59       	subi	r30, 0x99	; 153
     3b8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ba:	80 81       	ld	r24, Z
     3bc:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     3be:	8f e3       	ldi	r24, 0x3F	; 63
     3c0:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     3c2:	8f ef       	ldi	r24, 0xFF	; 255
     3c4:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     3c6:	87 e0       	ldi	r24, 0x07	; 7
     3c8:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     3ca:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	01 96       	adiw	r24, 0x01	; 1
     3d2:	69 e1       	ldi	r22, 0x19	; 25
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
     3da:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
     3de:	08 95       	ret

000003e0 <Next1>:
}

void Next1(void)	//B C
{
	
	if((6 > curLed)&&(3 <= curLed))	//B
     3e0:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     3e4:	83 50       	subi	r24, 0x03	; 3
     3e6:	83 30       	cpi	r24, 0x03	; 3
     3e8:	68 f4       	brcc	.+26     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
	{
		PORTB = BMASK;
     3ea:	9f ef       	ldi	r25, 0xFF	; 255
     3ec:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     3ee:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	e0 59       	subi	r30, 0x90	; 144
     3f6:	fe 4f       	sbci	r31, 0xFE	; 254
     3f8:	80 81       	ld	r24, Z
     3fa:	8f 73       	andi	r24, 0x3F	; 63
     3fc:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     3fe:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     400:	87 e0       	ldi	r24, 0x07	; 7
     402:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     404:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     408:	86 30       	cpi	r24, 0x06	; 6
     40a:	69 f4       	brne	.+26     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
	{
		PORTB = BMASK;
     40c:	8f ef       	ldi	r24, 0xFF	; 255
     40e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     410:	9f e3       	ldi	r25, 0x3F	; 63
     412:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     414:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     416:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	e6 5a       	subi	r30, 0xA6	; 166
     41e:	fe 4f       	sbci	r31, 0xFE	; 254
     420:	80 81       	ld	r24, Z
     422:	87 70       	andi	r24, 0x07	; 7
     424:	8e b9       	out	0x0e, r24	; 14
	}
	if((9> curLed)&&(7 <= curLed)) //C
     426:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     42a:	87 50       	subi	r24, 0x07	; 7
     42c:	82 30       	cpi	r24, 0x02	; 2
     42e:	68 f4       	brcc	.+26     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
	{
		PORTB = BMASK;
     430:	8f ef       	ldi	r24, 0xFF	; 255
     432:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     434:	9f e3       	ldi	r25, 0x3F	; 63
     436:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     438:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     43a:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	e6 5a       	subi	r30, 0xA6	; 166
     442:	fe 4f       	sbci	r31, 0xFE	; 254
     444:	80 81       	ld	r24, Z
     446:	87 70       	andi	r24, 0x07	; 7
     448:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     44a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     44e:	89 50       	subi	r24, 0x09	; 9
     450:	82 30       	cpi	r24, 0x02	; 2
     452:	68 f4       	brcc	.+26     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
	{
		PORTB = BMASK;
     454:	8f ef       	ldi	r24, 0xFF	; 255
     456:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     458:	8f e3       	ldi	r24, 0x3F	; 63
     45a:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     45c:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	e1 5a       	subi	r30, 0xA1	; 161
     464:	fe 4f       	sbci	r31, 0xFE	; 254
     466:	80 81       	ld	r24, Z
     468:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     46a:	87 e0       	ldi	r24, 0x07	; 7
     46c:	8e b9       	out	0x0e, r24	; 14
	}
	
	
	
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     46e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	69 e1       	ldi	r22, 0x19	; 25
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
     47e:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
     482:	08 95       	ret

00000484 <Next2>:
}

void Next2(void)	//A B D E G
{
	if(3 > curLed)		//A
     484:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     488:	83 30       	cpi	r24, 0x03	; 3
     48a:	68 f4       	brcc	.+26     	; 0x4a6 <Next2+0x22>
	{
		PORTB = BMASK;
     48c:	9f ef       	ldi	r25, 0xFF	; 255
     48e:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     490:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	e0 59       	subi	r30, 0x90	; 144
     498:	fe 4f       	sbci	r31, 0xFE	; 254
     49a:	80 81       	ld	r24, Z
     49c:	8f 73       	andi	r24, 0x3F	; 63
     49e:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     4a0:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     4a2:	87 e0       	ldi	r24, 0x07	; 7
     4a4:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
     4a6:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     4aa:	83 50       	subi	r24, 0x03	; 3
     4ac:	83 30       	cpi	r24, 0x03	; 3
     4ae:	68 f4       	brcc	.+26     	; 0x4ca <Next2+0x46>
	{
		PORTB = BMASK;
     4b0:	9f ef       	ldi	r25, 0xFF	; 255
     4b2:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     4b4:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	e0 59       	subi	r30, 0x90	; 144
     4bc:	fe 4f       	sbci	r31, 0xFE	; 254
     4be:	80 81       	ld	r24, Z
     4c0:	8f 73       	andi	r24, 0x3F	; 63
     4c2:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     4c4:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     4c6:	87 e0       	ldi	r24, 0x07	; 7
     4c8:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     4ca:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     4ce:	86 30       	cpi	r24, 0x06	; 6
     4d0:	69 f4       	brne	.+26     	; 0x4ec <Next2+0x68>
	{
		PORTB = BMASK;
     4d2:	8f ef       	ldi	r24, 0xFF	; 255
     4d4:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     4d6:	9f e3       	ldi	r25, 0x3F	; 63
     4d8:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     4da:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     4dc:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	e6 5a       	subi	r30, 0xA6	; 166
     4e4:	fe 4f       	sbci	r31, 0xFE	; 254
     4e6:	80 81       	ld	r24, Z
     4e8:	87 70       	andi	r24, 0x07	; 7
     4ea:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
     4ec:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     4f0:	8b 50       	subi	r24, 0x0B	; 11
     4f2:	83 30       	cpi	r24, 0x03	; 3
     4f4:	68 f4       	brcc	.+26     	; 0x510 <Next2+0x8c>
	{
		PORTB = BMASK;
     4f6:	8f ef       	ldi	r24, 0xFF	; 255
     4f8:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     4fa:	8f e3       	ldi	r24, 0x3F	; 63
     4fc:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     4fe:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	e1 5a       	subi	r30, 0xA1	; 161
     506:	fe 4f       	sbci	r31, 0xFE	; 254
     508:	80 81       	ld	r24, Z
     50a:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     50c:	87 e0       	ldi	r24, 0x07	; 7
     50e:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (17 > curLed) && (14 <= curLed))	//E
     510:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     514:	8e 50       	subi	r24, 0x0E	; 14
     516:	83 30       	cpi	r24, 0x03	; 3
     518:	68 f4       	brcc	.+26     	; 0x534 <Next2+0xb0>
	{
		PORTB = BMASK;
     51a:	8f ef       	ldi	r24, 0xFF	; 255
     51c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     51e:	8f e3       	ldi	r24, 0x3F	; 63
     520:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     522:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	e1 5a       	subi	r30, 0xA1	; 161
     52a:	fe 4f       	sbci	r31, 0xFE	; 254
     52c:	80 81       	ld	r24, Z
     52e:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     530:	87 e0       	ldi	r24, 0x07	; 7
     532:	8e b9       	out	0x0e, r24	; 14
	}
	if( (18 > curLed) && (17 <= curLed))	//E
     534:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     538:	81 31       	cpi	r24, 0x11	; 17
     53a:	41 f4       	brne	.+16     	; 0x54c <Next2+0xc8>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     53c:	8e ef       	ldi	r24, 0xFE	; 254
     53e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     540:	8f e3       	ldi	r24, 0x3F	; 63
     542:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     544:	8f ef       	ldi	r24, 0xFF	; 255
     546:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     548:	87 e0       	ldi	r24, 0x07	; 7
     54a:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
     54c:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     550:	8a ee       	ldi	r24, 0xEA	; 234
     552:	8e 0f       	add	r24, r30
     554:	83 30       	cpi	r24, 0x03	; 3
     556:	58 f4       	brcc	.+22     	; 0x56e <Next2+0xea>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	e9 59       	subi	r30, 0x99	; 153
     55c:	fe 4f       	sbci	r31, 0xFE	; 254
     55e:	80 81       	ld	r24, Z
     560:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     562:	8f e3       	ldi	r24, 0x3F	; 63
     564:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     566:	8f ef       	ldi	r24, 0xFF	; 255
     568:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     56a:	87 e0       	ldi	r24, 0x07	; 7
     56c:	8e b9       	out	0x0e, r24	; 14
	}
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     56e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	01 96       	adiw	r24, 0x01	; 1
     576:	69 e1       	ldi	r22, 0x19	; 25
     578:	70 e0       	ldi	r23, 0x00	; 0
     57a:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
     57e:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
     582:	08 95       	ret

00000584 <Next3>:
}

void Next3(void)	//A B C D G
{
	if(3 > curLed)		//A
     584:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     588:	83 30       	cpi	r24, 0x03	; 3
     58a:	68 f4       	brcc	.+26     	; 0x5a6 <Next3+0x22>
	{
		PORTB = BMASK;
     58c:	9f ef       	ldi	r25, 0xFF	; 255
     58e:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     590:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	e0 59       	subi	r30, 0x90	; 144
     598:	fe 4f       	sbci	r31, 0xFE	; 254
     59a:	80 81       	ld	r24, Z
     59c:	8f 73       	andi	r24, 0x3F	; 63
     59e:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     5a0:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     5a2:	87 e0       	ldi	r24, 0x07	; 7
     5a4:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
     5a6:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     5aa:	83 50       	subi	r24, 0x03	; 3
     5ac:	83 30       	cpi	r24, 0x03	; 3
     5ae:	68 f4       	brcc	.+26     	; 0x5ca <Next3+0x46>
	{
		PORTB = BMASK;
     5b0:	9f ef       	ldi	r25, 0xFF	; 255
     5b2:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     5b4:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	e0 59       	subi	r30, 0x90	; 144
     5bc:	fe 4f       	sbci	r31, 0xFE	; 254
     5be:	80 81       	ld	r24, Z
     5c0:	8f 73       	andi	r24, 0x3F	; 63
     5c2:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     5c4:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     5c6:	87 e0       	ldi	r24, 0x07	; 7
     5c8:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     5ca:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     5ce:	86 30       	cpi	r24, 0x06	; 6
     5d0:	69 f4       	brne	.+26     	; 0x5ec <Next3+0x68>
	{
		PORTB = BMASK;
     5d2:	8f ef       	ldi	r24, 0xFF	; 255
     5d4:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     5d6:	9f e3       	ldi	r25, 0x3F	; 63
     5d8:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     5da:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     5dc:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	e6 5a       	subi	r30, 0xA6	; 166
     5e4:	fe 4f       	sbci	r31, 0xFE	; 254
     5e6:	80 81       	ld	r24, Z
     5e8:	87 70       	andi	r24, 0x07	; 7
     5ea:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     5ec:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     5f0:	87 50       	subi	r24, 0x07	; 7
     5f2:	82 30       	cpi	r24, 0x02	; 2
     5f4:	68 f4       	brcc	.+26     	; 0x610 <Next3+0x8c>
	{
		PORTB = BMASK;
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     5fa:	9f e3       	ldi	r25, 0x3F	; 63
     5fc:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     5fe:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     600:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	e6 5a       	subi	r30, 0xA6	; 166
     608:	fe 4f       	sbci	r31, 0xFE	; 254
     60a:	80 81       	ld	r24, Z
     60c:	87 70       	andi	r24, 0x07	; 7
     60e:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     610:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     614:	89 50       	subi	r24, 0x09	; 9
     616:	82 30       	cpi	r24, 0x02	; 2
     618:	68 f4       	brcc	.+26     	; 0x634 <Next3+0xb0>
	{
		PORTB = BMASK;
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     61e:	8f e3       	ldi	r24, 0x3F	; 63
     620:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     622:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	e1 5a       	subi	r30, 0xA1	; 161
     62a:	fe 4f       	sbci	r31, 0xFE	; 254
     62c:	80 81       	ld	r24, Z
     62e:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     630:	87 e0       	ldi	r24, 0x07	; 7
     632:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
     634:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     638:	8b 50       	subi	r24, 0x0B	; 11
     63a:	83 30       	cpi	r24, 0x03	; 3
     63c:	68 f4       	brcc	.+26     	; 0x658 <Next3+0xd4>
	{
		PORTB = BMASK;
     63e:	8f ef       	ldi	r24, 0xFF	; 255
     640:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     642:	8f e3       	ldi	r24, 0x3F	; 63
     644:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     646:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	e1 5a       	subi	r30, 0xA1	; 161
     64e:	fe 4f       	sbci	r31, 0xFE	; 254
     650:	80 81       	ld	r24, Z
     652:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     654:	87 e0       	ldi	r24, 0x07	; 7
     656:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
     658:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     65c:	8a ee       	ldi	r24, 0xEA	; 234
     65e:	8e 0f       	add	r24, r30
     660:	83 30       	cpi	r24, 0x03	; 3
     662:	58 f4       	brcc	.+22     	; 0x67a <Next3+0xf6>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	e9 59       	subi	r30, 0x99	; 153
     668:	fe 4f       	sbci	r31, 0xFE	; 254
     66a:	80 81       	ld	r24, Z
     66c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     66e:	8f e3       	ldi	r24, 0x3F	; 63
     670:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     672:	8f ef       	ldi	r24, 0xFF	; 255
     674:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     676:	87 e0       	ldi	r24, 0x07	; 7
     678:	8e b9       	out	0x0e, r24	; 14
	}
	
	
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     67a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	69 e1       	ldi	r22, 0x19	; 25
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
     68a:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
     68e:	08 95       	ret

00000690 <Next4>:
}

void Next4(void)	//B C F G
{
	if((6 > curLed)&&(3 <= curLed))	//B
     690:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     694:	83 50       	subi	r24, 0x03	; 3
     696:	83 30       	cpi	r24, 0x03	; 3
     698:	68 f4       	brcc	.+26     	; 0x6b4 <Next4+0x24>
	{
		PORTB = BMASK;
     69a:	9f ef       	ldi	r25, 0xFF	; 255
     69c:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     69e:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	e0 59       	subi	r30, 0x90	; 144
     6a6:	fe 4f       	sbci	r31, 0xFE	; 254
     6a8:	80 81       	ld	r24, Z
     6aa:	8f 73       	andi	r24, 0x3F	; 63
     6ac:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     6ae:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     6b0:	87 e0       	ldi	r24, 0x07	; 7
     6b2:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     6b4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     6b8:	86 30       	cpi	r24, 0x06	; 6
     6ba:	69 f4       	brne	.+26     	; 0x6d6 <Next4+0x46>
	{
		PORTB = BMASK;
     6bc:	8f ef       	ldi	r24, 0xFF	; 255
     6be:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     6c0:	9f e3       	ldi	r25, 0x3F	; 63
     6c2:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     6c4:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     6c6:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	e6 5a       	subi	r30, 0xA6	; 166
     6ce:	fe 4f       	sbci	r31, 0xFE	; 254
     6d0:	80 81       	ld	r24, Z
     6d2:	87 70       	andi	r24, 0x07	; 7
     6d4:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     6d6:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     6da:	87 50       	subi	r24, 0x07	; 7
     6dc:	82 30       	cpi	r24, 0x02	; 2
     6de:	68 f4       	brcc	.+26     	; 0x6fa <Next4+0x6a>
	{
		PORTB = BMASK;
     6e0:	8f ef       	ldi	r24, 0xFF	; 255
     6e2:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     6e4:	9f e3       	ldi	r25, 0x3F	; 63
     6e6:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     6e8:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     6ea:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	e6 5a       	subi	r30, 0xA6	; 166
     6f2:	fe 4f       	sbci	r31, 0xFE	; 254
     6f4:	80 81       	ld	r24, Z
     6f6:	87 70       	andi	r24, 0x07	; 7
     6f8:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     6fa:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     6fe:	89 50       	subi	r24, 0x09	; 9
     700:	82 30       	cpi	r24, 0x02	; 2
     702:	68 f4       	brcc	.+26     	; 0x71e <Next4+0x8e>
	{
		PORTB = BMASK;
     704:	8f ef       	ldi	r24, 0xFF	; 255
     706:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     708:	8f e3       	ldi	r24, 0x3F	; 63
     70a:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     70c:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	e1 5a       	subi	r30, 0xA1	; 161
     714:	fe 4f       	sbci	r31, 0xFE	; 254
     716:	80 81       	ld	r24, Z
     718:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     71a:	87 e0       	ldi	r24, 0x07	; 7
     71c:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
     71e:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     722:	8e ee       	ldi	r24, 0xEE	; 238
     724:	8e 0f       	add	r24, r30
     726:	84 30       	cpi	r24, 0x04	; 4
     728:	58 f4       	brcc	.+22     	; 0x740 <Next4+0xb0>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	e9 59       	subi	r30, 0x99	; 153
     72e:	fe 4f       	sbci	r31, 0xFE	; 254
     730:	80 81       	ld	r24, Z
     732:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     734:	8f e3       	ldi	r24, 0x3F	; 63
     736:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     738:	8f ef       	ldi	r24, 0xFF	; 255
     73a:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     73c:	87 e0       	ldi	r24, 0x07	; 7
     73e:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
     740:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     744:	8a ee       	ldi	r24, 0xEA	; 234
     746:	8e 0f       	add	r24, r30
     748:	83 30       	cpi	r24, 0x03	; 3
     74a:	58 f4       	brcc	.+22     	; 0x762 <Next4+0xd2>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	e9 59       	subi	r30, 0x99	; 153
     750:	fe 4f       	sbci	r31, 0xFE	; 254
     752:	80 81       	ld	r24, Z
     754:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     756:	8f e3       	ldi	r24, 0x3F	; 63
     758:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     75a:	8f ef       	ldi	r24, 0xFF	; 255
     75c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     75e:	87 e0       	ldi	r24, 0x07	; 7
     760:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     762:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	69 e1       	ldi	r22, 0x19	; 25
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
     772:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
     776:	08 95       	ret

00000778 <Next5>:
}

void Next5(void)	//A C D F G
{
	if(3 > curLed)		//A
     778:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     77c:	83 30       	cpi	r24, 0x03	; 3
     77e:	68 f4       	brcc	.+26     	; 0x79a <Next5+0x22>
	{
		PORTB = BMASK;
     780:	9f ef       	ldi	r25, 0xFF	; 255
     782:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     784:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	e0 59       	subi	r30, 0x90	; 144
     78c:	fe 4f       	sbci	r31, 0xFE	; 254
     78e:	80 81       	ld	r24, Z
     790:	8f 73       	andi	r24, 0x3F	; 63
     792:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     794:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     796:	87 e0       	ldi	r24, 0x07	; 7
     798:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     79a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     79e:	87 50       	subi	r24, 0x07	; 7
     7a0:	82 30       	cpi	r24, 0x02	; 2
     7a2:	68 f4       	brcc	.+26     	; 0x7be <Next5+0x46>
	{
		PORTB = BMASK;
     7a4:	8f ef       	ldi	r24, 0xFF	; 255
     7a6:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     7a8:	9f e3       	ldi	r25, 0x3F	; 63
     7aa:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     7ac:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     7ae:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	e6 5a       	subi	r30, 0xA6	; 166
     7b6:	fe 4f       	sbci	r31, 0xFE	; 254
     7b8:	80 81       	ld	r24, Z
     7ba:	87 70       	andi	r24, 0x07	; 7
     7bc:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     7be:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     7c2:	89 50       	subi	r24, 0x09	; 9
     7c4:	82 30       	cpi	r24, 0x02	; 2
     7c6:	68 f4       	brcc	.+26     	; 0x7e2 <Next5+0x6a>
	{
		PORTB = BMASK;
     7c8:	8f ef       	ldi	r24, 0xFF	; 255
     7ca:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     7cc:	8f e3       	ldi	r24, 0x3F	; 63
     7ce:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     7d0:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
     7d6:	e1 5a       	subi	r30, 0xA1	; 161
     7d8:	fe 4f       	sbci	r31, 0xFE	; 254
     7da:	80 81       	ld	r24, Z
     7dc:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     7de:	87 e0       	ldi	r24, 0x07	; 7
     7e0:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
     7e2:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     7e6:	8b 50       	subi	r24, 0x0B	; 11
     7e8:	83 30       	cpi	r24, 0x03	; 3
     7ea:	68 f4       	brcc	.+26     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
	{
		PORTB = BMASK;
     7ec:	8f ef       	ldi	r24, 0xFF	; 255
     7ee:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     7f0:	8f e3       	ldi	r24, 0x3F	; 63
     7f2:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     7f4:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	e1 5a       	subi	r30, 0xA1	; 161
     7fc:	fe 4f       	sbci	r31, 0xFE	; 254
     7fe:	80 81       	ld	r24, Z
     800:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     802:	87 e0       	ldi	r24, 0x07	; 7
     804:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
     806:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     80a:	8e ee       	ldi	r24, 0xEE	; 238
     80c:	8e 0f       	add	r24, r30
     80e:	84 30       	cpi	r24, 0x04	; 4
     810:	58 f4       	brcc	.+22     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	e9 59       	subi	r30, 0x99	; 153
     816:	fe 4f       	sbci	r31, 0xFE	; 254
     818:	80 81       	ld	r24, Z
     81a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     81c:	8f e3       	ldi	r24, 0x3F	; 63
     81e:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     820:	8f ef       	ldi	r24, 0xFF	; 255
     822:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     824:	87 e0       	ldi	r24, 0x07	; 7
     826:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
     828:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     82c:	8a ee       	ldi	r24, 0xEA	; 234
     82e:	8e 0f       	add	r24, r30
     830:	83 30       	cpi	r24, 0x03	; 3
     832:	58 f4       	brcc	.+22     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	e9 59       	subi	r30, 0x99	; 153
     838:	fe 4f       	sbci	r31, 0xFE	; 254
     83a:	80 81       	ld	r24, Z
     83c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     83e:	8f e3       	ldi	r24, 0x3F	; 63
     840:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     846:	87 e0       	ldi	r24, 0x07	; 7
     848:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     84a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	69 e1       	ldi	r22, 0x19	; 25
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
     85a:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
     85e:	08 95       	ret

00000860 <Next6>:
}

void Next6(void)	//A C D E F G
{
	
	if(3 > curLed)		//A
     860:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     864:	83 30       	cpi	r24, 0x03	; 3
     866:	68 f4       	brcc	.+26     	; 0x882 <Next6+0x22>
	{
		PORTB = BMASK;
     868:	9f ef       	ldi	r25, 0xFF	; 255
     86a:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     86c:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	e0 59       	subi	r30, 0x90	; 144
     874:	fe 4f       	sbci	r31, 0xFE	; 254
     876:	80 81       	ld	r24, Z
     878:	8f 73       	andi	r24, 0x3F	; 63
     87a:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     87c:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     87e:	87 e0       	ldi	r24, 0x07	; 7
     880:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     882:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     886:	87 50       	subi	r24, 0x07	; 7
     888:	82 30       	cpi	r24, 0x02	; 2
     88a:	68 f4       	brcc	.+26     	; 0x8a6 <Next6+0x46>
	{
		PORTB = BMASK;
     88c:	8f ef       	ldi	r24, 0xFF	; 255
     88e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     890:	9f e3       	ldi	r25, 0x3F	; 63
     892:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     894:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     896:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	e6 5a       	subi	r30, 0xA6	; 166
     89e:	fe 4f       	sbci	r31, 0xFE	; 254
     8a0:	80 81       	ld	r24, Z
     8a2:	87 70       	andi	r24, 0x07	; 7
     8a4:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     8a6:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     8aa:	89 50       	subi	r24, 0x09	; 9
     8ac:	82 30       	cpi	r24, 0x02	; 2
     8ae:	68 f4       	brcc	.+26     	; 0x8ca <Next6+0x6a>
	{
		PORTB = BMASK;
     8b0:	8f ef       	ldi	r24, 0xFF	; 255
     8b2:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     8b4:	8f e3       	ldi	r24, 0x3F	; 63
     8b6:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     8b8:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	e1 5a       	subi	r30, 0xA1	; 161
     8c0:	fe 4f       	sbci	r31, 0xFE	; 254
     8c2:	80 81       	ld	r24, Z
     8c4:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     8c6:	87 e0       	ldi	r24, 0x07	; 7
     8c8:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
     8ca:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     8ce:	8b 50       	subi	r24, 0x0B	; 11
     8d0:	83 30       	cpi	r24, 0x03	; 3
     8d2:	68 f4       	brcc	.+26     	; 0x8ee <Next6+0x8e>
	{
		PORTB = BMASK;
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     8d8:	8f e3       	ldi	r24, 0x3F	; 63
     8da:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     8dc:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	e1 5a       	subi	r30, 0xA1	; 161
     8e4:	fe 4f       	sbci	r31, 0xFE	; 254
     8e6:	80 81       	ld	r24, Z
     8e8:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     8ea:	87 e0       	ldi	r24, 0x07	; 7
     8ec:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (17 > curLed) && (14 <= curLed))	//E
     8ee:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     8f2:	8e 50       	subi	r24, 0x0E	; 14
     8f4:	83 30       	cpi	r24, 0x03	; 3
     8f6:	68 f4       	brcc	.+26     	; 0x912 <__stack+0x13>
	{
		PORTB = BMASK;
     8f8:	8f ef       	ldi	r24, 0xFF	; 255
     8fa:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     8fc:	8f e3       	ldi	r24, 0x3F	; 63
     8fe:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     900:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	e1 5a       	subi	r30, 0xA1	; 161
     908:	fe 4f       	sbci	r31, 0xFE	; 254
     90a:	80 81       	ld	r24, Z
     90c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     90e:	87 e0       	ldi	r24, 0x07	; 7
     910:	8e b9       	out	0x0e, r24	; 14
	}
	if( (18 > curLed) && (17 <= curLed))	//E
     912:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     916:	81 31       	cpi	r24, 0x11	; 17
     918:	41 f4       	brne	.+16     	; 0x92a <__stack+0x2b>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     91a:	8e ef       	ldi	r24, 0xFE	; 254
     91c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     91e:	8f e3       	ldi	r24, 0x3F	; 63
     920:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     922:	8f ef       	ldi	r24, 0xFF	; 255
     924:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     926:	87 e0       	ldi	r24, 0x07	; 7
     928:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
     92a:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     92e:	8e ee       	ldi	r24, 0xEE	; 238
     930:	8e 0f       	add	r24, r30
     932:	84 30       	cpi	r24, 0x04	; 4
     934:	58 f4       	brcc	.+22     	; 0x94c <__stack+0x4d>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	e9 59       	subi	r30, 0x99	; 153
     93a:	fe 4f       	sbci	r31, 0xFE	; 254
     93c:	80 81       	ld	r24, Z
     93e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     940:	8f e3       	ldi	r24, 0x3F	; 63
     942:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     944:	8f ef       	ldi	r24, 0xFF	; 255
     946:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     948:	87 e0       	ldi	r24, 0x07	; 7
     94a:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
     94c:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     950:	8a ee       	ldi	r24, 0xEA	; 234
     952:	8e 0f       	add	r24, r30
     954:	83 30       	cpi	r24, 0x03	; 3
     956:	58 f4       	brcc	.+22     	; 0x96e <__stack+0x6f>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	e9 59       	subi	r30, 0x99	; 153
     95c:	fe 4f       	sbci	r31, 0xFE	; 254
     95e:	80 81       	ld	r24, Z
     960:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     962:	8f e3       	ldi	r24, 0x3F	; 63
     964:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     966:	8f ef       	ldi	r24, 0xFF	; 255
     968:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     96a:	87 e0       	ldi	r24, 0x07	; 7
     96c:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     96e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	01 96       	adiw	r24, 0x01	; 1
     976:	69 e1       	ldi	r22, 0x19	; 25
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
     97e:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
     982:	08 95       	ret

00000984 <Next7>:
}

void Next7(void)	//A B C
{
	
	if(3 > curLed)		//A
     984:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     988:	83 30       	cpi	r24, 0x03	; 3
     98a:	68 f4       	brcc	.+26     	; 0x9a6 <Next7+0x22>
	{
		PORTB = BMASK;
     98c:	9f ef       	ldi	r25, 0xFF	; 255
     98e:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     990:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	e0 59       	subi	r30, 0x90	; 144
     998:	fe 4f       	sbci	r31, 0xFE	; 254
     99a:	80 81       	ld	r24, Z
     99c:	8f 73       	andi	r24, 0x3F	; 63
     99e:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     9a0:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     9a2:	87 e0       	ldi	r24, 0x07	; 7
     9a4:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
     9a6:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     9aa:	83 50       	subi	r24, 0x03	; 3
     9ac:	83 30       	cpi	r24, 0x03	; 3
     9ae:	68 f4       	brcc	.+26     	; 0x9ca <Next7+0x46>
	{
		PORTB = BMASK;
     9b0:	9f ef       	ldi	r25, 0xFF	; 255
     9b2:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     9b4:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	e0 59       	subi	r30, 0x90	; 144
     9bc:	fe 4f       	sbci	r31, 0xFE	; 254
     9be:	80 81       	ld	r24, Z
     9c0:	8f 73       	andi	r24, 0x3F	; 63
     9c2:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     9c4:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     9c6:	87 e0       	ldi	r24, 0x07	; 7
     9c8:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     9ca:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     9ce:	86 30       	cpi	r24, 0x06	; 6
     9d0:	69 f4       	brne	.+26     	; 0x9ec <Next7+0x68>
	{
		PORTB = BMASK;
     9d2:	8f ef       	ldi	r24, 0xFF	; 255
     9d4:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     9d6:	9f e3       	ldi	r25, 0x3F	; 63
     9d8:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     9da:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     9dc:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	e6 5a       	subi	r30, 0xA6	; 166
     9e4:	fe 4f       	sbci	r31, 0xFE	; 254
     9e6:	80 81       	ld	r24, Z
     9e8:	87 70       	andi	r24, 0x07	; 7
     9ea:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     9ec:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     9f0:	87 50       	subi	r24, 0x07	; 7
     9f2:	82 30       	cpi	r24, 0x02	; 2
     9f4:	68 f4       	brcc	.+26     	; 0xa10 <Next7+0x8c>
	{
		PORTB = BMASK;
     9f6:	8f ef       	ldi	r24, 0xFF	; 255
     9f8:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     9fa:	9f e3       	ldi	r25, 0x3F	; 63
     9fc:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     9fe:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     a00:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	e6 5a       	subi	r30, 0xA6	; 166
     a08:	fe 4f       	sbci	r31, 0xFE	; 254
     a0a:	80 81       	ld	r24, Z
     a0c:	87 70       	andi	r24, 0x07	; 7
     a0e:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     a10:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     a14:	89 50       	subi	r24, 0x09	; 9
     a16:	82 30       	cpi	r24, 0x02	; 2
     a18:	68 f4       	brcc	.+26     	; 0xa34 <Next7+0xb0>
	{
		PORTB = BMASK;
     a1a:	8f ef       	ldi	r24, 0xFF	; 255
     a1c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     a1e:	8f e3       	ldi	r24, 0x3F	; 63
     a20:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     a22:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	e1 5a       	subi	r30, 0xA1	; 161
     a2a:	fe 4f       	sbci	r31, 0xFE	; 254
     a2c:	80 81       	ld	r24, Z
     a2e:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     a30:	87 e0       	ldi	r24, 0x07	; 7
     a32:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     a34:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	01 96       	adiw	r24, 0x01	; 1
     a3c:	69 e1       	ldi	r22, 0x19	; 25
     a3e:	70 e0       	ldi	r23, 0x00	; 0
     a40:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
     a44:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
     a48:	08 95       	ret

00000a4a <Next8>:
}

void Next8(void)	//A B C D E F G
{
	if(3 > curLed)		//A
     a4a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     a4e:	83 30       	cpi	r24, 0x03	; 3
     a50:	68 f4       	brcc	.+26     	; 0xa6c <Next8+0x22>
	{
		PORTB = BMASK;
     a52:	9f ef       	ldi	r25, 0xFF	; 255
     a54:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     a56:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	e0 59       	subi	r30, 0x90	; 144
     a5e:	fe 4f       	sbci	r31, 0xFE	; 254
     a60:	80 81       	ld	r24, Z
     a62:	8f 73       	andi	r24, 0x3F	; 63
     a64:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     a66:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     a68:	87 e0       	ldi	r24, 0x07	; 7
     a6a:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
     a6c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     a70:	83 50       	subi	r24, 0x03	; 3
     a72:	83 30       	cpi	r24, 0x03	; 3
     a74:	68 f4       	brcc	.+26     	; 0xa90 <Next8+0x46>
	{
		PORTB = BMASK;
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     a7a:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	e0 59       	subi	r30, 0x90	; 144
     a82:	fe 4f       	sbci	r31, 0xFE	; 254
     a84:	80 81       	ld	r24, Z
     a86:	8f 73       	andi	r24, 0x3F	; 63
     a88:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     a8a:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     a8c:	87 e0       	ldi	r24, 0x07	; 7
     a8e:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     a90:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     a94:	86 30       	cpi	r24, 0x06	; 6
     a96:	69 f4       	brne	.+26     	; 0xab2 <Next8+0x68>
	{
		PORTB = BMASK;
     a98:	8f ef       	ldi	r24, 0xFF	; 255
     a9a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     a9c:	9f e3       	ldi	r25, 0x3F	; 63
     a9e:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     aa0:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     aa2:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	e6 5a       	subi	r30, 0xA6	; 166
     aaa:	fe 4f       	sbci	r31, 0xFE	; 254
     aac:	80 81       	ld	r24, Z
     aae:	87 70       	andi	r24, 0x07	; 7
     ab0:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     ab2:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     ab6:	87 50       	subi	r24, 0x07	; 7
     ab8:	82 30       	cpi	r24, 0x02	; 2
     aba:	68 f4       	brcc	.+26     	; 0xad6 <Next8+0x8c>
	{
		PORTB = BMASK;
     abc:	8f ef       	ldi	r24, 0xFF	; 255
     abe:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     ac0:	9f e3       	ldi	r25, 0x3F	; 63
     ac2:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     ac4:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     ac6:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	e6 5a       	subi	r30, 0xA6	; 166
     ace:	fe 4f       	sbci	r31, 0xFE	; 254
     ad0:	80 81       	ld	r24, Z
     ad2:	87 70       	andi	r24, 0x07	; 7
     ad4:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     ad6:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     ada:	89 50       	subi	r24, 0x09	; 9
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	68 f4       	brcc	.+26     	; 0xafa <Next8+0xb0>
	{
		PORTB = BMASK;
     ae0:	8f ef       	ldi	r24, 0xFF	; 255
     ae2:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     ae4:	8f e3       	ldi	r24, 0x3F	; 63
     ae6:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     ae8:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	e1 5a       	subi	r30, 0xA1	; 161
     af0:	fe 4f       	sbci	r31, 0xFE	; 254
     af2:	80 81       	ld	r24, Z
     af4:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     af6:	87 e0       	ldi	r24, 0x07	; 7
     af8:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
     afa:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     afe:	8b 50       	subi	r24, 0x0B	; 11
     b00:	83 30       	cpi	r24, 0x03	; 3
     b02:	68 f4       	brcc	.+26     	; 0xb1e <Next8+0xd4>
	{
		PORTB = BMASK;
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     b08:	8f e3       	ldi	r24, 0x3F	; 63
     b0a:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     b0c:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	e1 5a       	subi	r30, 0xA1	; 161
     b14:	fe 4f       	sbci	r31, 0xFE	; 254
     b16:	80 81       	ld	r24, Z
     b18:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     b1a:	87 e0       	ldi	r24, 0x07	; 7
     b1c:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (17 > curLed) && (14 <= curLed))	//E
     b1e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     b22:	8e 50       	subi	r24, 0x0E	; 14
     b24:	83 30       	cpi	r24, 0x03	; 3
     b26:	68 f4       	brcc	.+26     	; 0xb42 <Next8+0xf8>
	{
		PORTB = BMASK;
     b28:	8f ef       	ldi	r24, 0xFF	; 255
     b2a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     b2c:	8f e3       	ldi	r24, 0x3F	; 63
     b2e:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     b30:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	e1 5a       	subi	r30, 0xA1	; 161
     b38:	fe 4f       	sbci	r31, 0xFE	; 254
     b3a:	80 81       	ld	r24, Z
     b3c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     b3e:	87 e0       	ldi	r24, 0x07	; 7
     b40:	8e b9       	out	0x0e, r24	; 14
	}
	if( (18 > curLed) && (17 <= curLed))	//E
     b42:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     b46:	81 31       	cpi	r24, 0x11	; 17
     b48:	41 f4       	brne	.+16     	; 0xb5a <Next8+0x110>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     b4a:	8e ef       	ldi	r24, 0xFE	; 254
     b4c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     b4e:	8f e3       	ldi	r24, 0x3F	; 63
     b50:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     b56:	87 e0       	ldi	r24, 0x07	; 7
     b58:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
     b5a:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     b5e:	8e ee       	ldi	r24, 0xEE	; 238
     b60:	8e 0f       	add	r24, r30
     b62:	84 30       	cpi	r24, 0x04	; 4
     b64:	58 f4       	brcc	.+22     	; 0xb7c <Next8+0x132>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	e9 59       	subi	r30, 0x99	; 153
     b6a:	fe 4f       	sbci	r31, 0xFE	; 254
     b6c:	80 81       	ld	r24, Z
     b6e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     b70:	8f e3       	ldi	r24, 0x3F	; 63
     b72:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     b74:	8f ef       	ldi	r24, 0xFF	; 255
     b76:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     b78:	87 e0       	ldi	r24, 0x07	; 7
     b7a:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
     b7c:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     b80:	8a ee       	ldi	r24, 0xEA	; 234
     b82:	8e 0f       	add	r24, r30
     b84:	83 30       	cpi	r24, 0x03	; 3
     b86:	58 f4       	brcc	.+22     	; 0xb9e <Next8+0x154>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	e9 59       	subi	r30, 0x99	; 153
     b8c:	fe 4f       	sbci	r31, 0xFE	; 254
     b8e:	80 81       	ld	r24, Z
     b90:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     b92:	8f e3       	ldi	r24, 0x3F	; 63
     b94:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     b96:	8f ef       	ldi	r24, 0xFF	; 255
     b98:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     b9a:	87 e0       	ldi	r24, 0x07	; 7
     b9c:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     b9e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	69 e1       	ldi	r22, 0x19	; 25
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
     bae:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
     bb2:	08 95       	ret

00000bb4 <Next9>:
}

void Next9(void)	//A B C D F G
{
	
	if(3 > curLed)		//A
     bb4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     bb8:	83 30       	cpi	r24, 0x03	; 3
     bba:	68 f4       	brcc	.+26     	; 0xbd6 <Next9+0x22>
	{
		PORTB = BMASK;
     bbc:	9f ef       	ldi	r25, 0xFF	; 255
     bbe:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     bc0:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	e0 59       	subi	r30, 0x90	; 144
     bc8:	fe 4f       	sbci	r31, 0xFE	; 254
     bca:	80 81       	ld	r24, Z
     bcc:	8f 73       	andi	r24, 0x3F	; 63
     bce:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     bd0:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     bd2:	87 e0       	ldi	r24, 0x07	; 7
     bd4:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
     bd6:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     bda:	83 50       	subi	r24, 0x03	; 3
     bdc:	83 30       	cpi	r24, 0x03	; 3
     bde:	68 f4       	brcc	.+26     	; 0xbfa <Next9+0x46>
	{
		PORTB = BMASK;
     be0:	9f ef       	ldi	r25, 0xFF	; 255
     be2:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     be4:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	e0 59       	subi	r30, 0x90	; 144
     bec:	fe 4f       	sbci	r31, 0xFE	; 254
     bee:	80 81       	ld	r24, Z
     bf0:	8f 73       	andi	r24, 0x3F	; 63
     bf2:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     bf4:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     bfa:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     bfe:	86 30       	cpi	r24, 0x06	; 6
     c00:	69 f4       	brne	.+26     	; 0xc1c <Next9+0x68>
	{
		PORTB = BMASK;
     c02:	8f ef       	ldi	r24, 0xFF	; 255
     c04:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     c06:	9f e3       	ldi	r25, 0x3F	; 63
     c08:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     c0a:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     c0c:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	e6 5a       	subi	r30, 0xA6	; 166
     c14:	fe 4f       	sbci	r31, 0xFE	; 254
     c16:	80 81       	ld	r24, Z
     c18:	87 70       	andi	r24, 0x07	; 7
     c1a:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     c1c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     c20:	87 50       	subi	r24, 0x07	; 7
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	68 f4       	brcc	.+26     	; 0xc40 <Next9+0x8c>
	{
		PORTB = BMASK;
     c26:	8f ef       	ldi	r24, 0xFF	; 255
     c28:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     c2a:	9f e3       	ldi	r25, 0x3F	; 63
     c2c:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     c2e:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     c30:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	e6 5a       	subi	r30, 0xA6	; 166
     c38:	fe 4f       	sbci	r31, 0xFE	; 254
     c3a:	80 81       	ld	r24, Z
     c3c:	87 70       	andi	r24, 0x07	; 7
     c3e:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     c40:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     c44:	89 50       	subi	r24, 0x09	; 9
     c46:	82 30       	cpi	r24, 0x02	; 2
     c48:	68 f4       	brcc	.+26     	; 0xc64 <Next9+0xb0>
	{
		PORTB = BMASK;
     c4a:	8f ef       	ldi	r24, 0xFF	; 255
     c4c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     c4e:	8f e3       	ldi	r24, 0x3F	; 63
     c50:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     c52:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	e1 5a       	subi	r30, 0xA1	; 161
     c5a:	fe 4f       	sbci	r31, 0xFE	; 254
     c5c:	80 81       	ld	r24, Z
     c5e:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     c60:	87 e0       	ldi	r24, 0x07	; 7
     c62:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
     c64:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     c68:	8b 50       	subi	r24, 0x0B	; 11
     c6a:	83 30       	cpi	r24, 0x03	; 3
     c6c:	68 f4       	brcc	.+26     	; 0xc88 <Next9+0xd4>
	{
		PORTB = BMASK;
     c6e:	8f ef       	ldi	r24, 0xFF	; 255
     c70:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     c72:	8f e3       	ldi	r24, 0x3F	; 63
     c74:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     c76:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	e1 5a       	subi	r30, 0xA1	; 161
     c7e:	fe 4f       	sbci	r31, 0xFE	; 254
     c80:	80 81       	ld	r24, Z
     c82:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     c84:	87 e0       	ldi	r24, 0x07	; 7
     c86:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
     c88:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     c8c:	8e ee       	ldi	r24, 0xEE	; 238
     c8e:	8e 0f       	add	r24, r30
     c90:	84 30       	cpi	r24, 0x04	; 4
     c92:	58 f4       	brcc	.+22     	; 0xcaa <Next9+0xf6>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	e9 59       	subi	r30, 0x99	; 153
     c98:	fe 4f       	sbci	r31, 0xFE	; 254
     c9a:	80 81       	ld	r24, Z
     c9c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     c9e:	8f e3       	ldi	r24, 0x3F	; 63
     ca0:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     ca6:	87 e0       	ldi	r24, 0x07	; 7
     ca8:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
     caa:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     cae:	8a ee       	ldi	r24, 0xEA	; 234
     cb0:	8e 0f       	add	r24, r30
     cb2:	83 30       	cpi	r24, 0x03	; 3
     cb4:	58 f4       	brcc	.+22     	; 0xccc <Next9+0x118>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	e9 59       	subi	r30, 0x99	; 153
     cba:	fe 4f       	sbci	r31, 0xFE	; 254
     cbc:	80 81       	ld	r24, Z
     cbe:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     cc0:	8f e3       	ldi	r24, 0x3F	; 63
     cc2:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     cc4:	8f ef       	ldi	r24, 0xFF	; 255
     cc6:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     cc8:	87 e0       	ldi	r24, 0x07	; 7
     cca:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     ccc:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	69 e1       	ldi	r22, 0x19	; 25
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
     cdc:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
     ce0:	08 95       	ret

00000ce2 <NextX>:
}

void NextX(void)
{
	if(4 > curLed)		//A
     ce2:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     ce6:	84 30       	cpi	r24, 0x04	; 4
     ce8:	38 f4       	brcc	.+14     	; 0xcf8 <NextX+0x16>
	{
		PORTB = BMASK;
     cea:	8f ef       	ldi	r24, 0xFF	; 255
     cec:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;	//&LED_BANKC_TAB[curLed];
     cee:	9f e3       	ldi	r25, 0x3F	; 63
     cf0:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     cf2:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     cf4:	87 e0       	ldi	r24, 0x07	; 7
     cf6:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(4 <= curLed))	//B
     cf8:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     cfc:	84 50       	subi	r24, 0x04	; 4
     cfe:	82 30       	cpi	r24, 0x02	; 2
     d00:	68 f4       	brcc	.+26     	; 0xd1c <NextX+0x3a>
	{
		PORTB = BMASK;
     d02:	9f ef       	ldi	r25, 0xFF	; 255
     d04:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     d06:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	e0 59       	subi	r30, 0x90	; 144
     d0e:	fe 4f       	sbci	r31, 0xFE	; 254
     d10:	80 81       	ld	r24, Z
     d12:	8f 73       	andi	r24, 0x3F	; 63
     d14:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     d16:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     d18:	87 e0       	ldi	r24, 0x07	; 7
     d1a:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     d1c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     d20:	86 30       	cpi	r24, 0x06	; 6
     d22:	69 f4       	brne	.+26     	; 0xd3e <NextX+0x5c>
	{
		PORTB = BMASK;
     d24:	8f ef       	ldi	r24, 0xFF	; 255
     d26:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     d28:	9f e3       	ldi	r25, 0x3F	; 63
     d2a:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     d2c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     d2e:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	e6 5a       	subi	r30, 0xA6	; 166
     d36:	fe 4f       	sbci	r31, 0xFE	; 254
     d38:	80 81       	ld	r24, Z
     d3a:	87 70       	andi	r24, 0x07	; 7
     d3c:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     d3e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     d42:	87 50       	subi	r24, 0x07	; 7
     d44:	82 30       	cpi	r24, 0x02	; 2
     d46:	68 f4       	brcc	.+26     	; 0xd62 <NextX+0x80>
	{
		PORTB = BMASK;
     d48:	8f ef       	ldi	r24, 0xFF	; 255
     d4a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     d4c:	9f e3       	ldi	r25, 0x3F	; 63
     d4e:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     d50:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     d52:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	e6 5a       	subi	r30, 0xA6	; 166
     d5a:	fe 4f       	sbci	r31, 0xFE	; 254
     d5c:	80 81       	ld	r24, Z
     d5e:	87 70       	andi	r24, 0x07	; 7
     d60:	8e b9       	out	0x0e, r24	; 14
	}
	if( (10 > curLed) && (9 <= curLed))	//C
     d62:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     d66:	89 30       	cpi	r24, 0x09	; 9
     d68:	69 f4       	brne	.+26     	; 0xd84 <NextX+0xa2>
	{
		PORTB = BMASK;
     d6a:	8f ef       	ldi	r24, 0xFF	; 255
     d6c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     d6e:	8f e3       	ldi	r24, 0x3F	; 63
     d70:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     d72:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	e1 5a       	subi	r30, 0xA1	; 161
     d7a:	fe 4f       	sbci	r31, 0xFE	; 254
     d7c:	80 81       	ld	r24, Z
     d7e:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     d80:	87 e0       	ldi	r24, 0x07	; 7
     d82:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (15 > curLed) && (10 <= curLed))	//D
     d84:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     d88:	8a 50       	subi	r24, 0x0A	; 10
     d8a:	85 30       	cpi	r24, 0x05	; 5
     d8c:	38 f4       	brcc	.+14     	; 0xd9c <NextX+0xba>
	{
		PORTB = BMASK;
     d8e:	8f ef       	ldi	r24, 0xFF	; 255
     d90:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     d92:	9f e3       	ldi	r25, 0x3F	; 63
     d94:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;	//&LED_BANKD_TAB[curLed - 9];
     d96:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     d98:	87 e0       	ldi	r24, 0x07	; 7
     d9a:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (17 > curLed) && (15 <= curLed))	//E
     d9c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     da0:	8f 50       	subi	r24, 0x0F	; 15
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	68 f4       	brcc	.+26     	; 0xdc0 <NextX+0xde>
	{
		PORTB = BMASK;
     da6:	8f ef       	ldi	r24, 0xFF	; 255
     da8:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     daa:	8f e3       	ldi	r24, 0x3F	; 63
     dac:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     dae:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	e1 5a       	subi	r30, 0xA1	; 161
     db6:	fe 4f       	sbci	r31, 0xFE	; 254
     db8:	80 81       	ld	r24, Z
     dba:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     dbc:	87 e0       	ldi	r24, 0x07	; 7
     dbe:	8e b9       	out	0x0e, r24	; 14
	}
	if( (18 > curLed) && (17 <= curLed))	//E
     dc0:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     dc4:	81 31       	cpi	r24, 0x11	; 17
     dc6:	41 f4       	brne	.+16     	; 0xdd8 <NextX+0xf6>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     dc8:	8e ef       	ldi	r24, 0xFE	; 254
     dca:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     dcc:	8f e3       	ldi	r24, 0x3F	; 63
     dce:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     dd0:	8f ef       	ldi	r24, 0xFF	; 255
     dd2:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     dd4:	87 e0       	ldi	r24, 0x07	; 7
     dd6:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (21 > curLed) && (18 <= curLed))	//F
     dd8:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     ddc:	8e ee       	ldi	r24, 0xEE	; 238
     dde:	8e 0f       	add	r24, r30
     de0:	83 30       	cpi	r24, 0x03	; 3
     de2:	58 f4       	brcc	.+22     	; 0xdfa <NextX+0x118>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	e9 59       	subi	r30, 0x99	; 153
     de8:	fe 4f       	sbci	r31, 0xFE	; 254
     dea:	80 81       	ld	r24, Z
     dec:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     dee:	8f e3       	ldi	r24, 0x3F	; 63
     df0:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     df2:	8f ef       	ldi	r24, 0xFF	; 255
     df4:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     df6:	87 e0       	ldi	r24, 0x07	; 7
     df8:	8e b9       	out	0x0e, r24	; 14
	}
	if(curLed == 21)
     dfa:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     dfe:	85 31       	cpi	r24, 0x15	; 21
     e00:	39 f4       	brne	.+14     	; 0xe10 <NextX+0x12e>
	{
		PORTB = BMASK;
     e02:	8f ef       	ldi	r24, 0xFF	; 255
     e04:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;	//&LED_BANKC_TAB[curLed];
     e06:	9f e3       	ldi	r25, 0x3F	; 63
     e08:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     e0a:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     e0c:	87 e0       	ldi	r24, 0x07	; 7
     e0e:	8e b9       	out	0x0e, r24	; 14
	}
	
	
	if( (25 > curLed) && (22 <= curLed))	//G
     e10:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     e14:	8a ee       	ldi	r24, 0xEA	; 234
     e16:	8e 0f       	add	r24, r30
     e18:	83 30       	cpi	r24, 0x03	; 3
     e1a:	58 f4       	brcc	.+22     	; 0xe32 <NextX+0x150>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	e9 59       	subi	r30, 0x99	; 153
     e20:	fe 4f       	sbci	r31, 0xFE	; 254
     e22:	80 81       	ld	r24, Z
     e24:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     e26:	8f e3       	ldi	r24, 0x3F	; 63
     e28:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     e2a:	8f ef       	ldi	r24, 0xFF	; 255
     e2c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     e2e:	87 e0       	ldi	r24, 0x07	; 7
     e30:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED);
     e32:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	01 96       	adiw	r24, 0x01	; 1
     e3a:	69 e1       	ldi	r22, 0x19	; 25
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
     e42:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
     e46:	08 95       	ret

00000e48 <NoLeds>:
}

void NoLeds(void)
{
	PORTB = BMASK;
     e48:	8f ef       	ldi	r24, 0xFF	; 255
     e4a:	85 b9       	out	0x05, r24	; 5
	PORTC = CMASK;
     e4c:	9f e3       	ldi	r25, 0x3F	; 63
     e4e:	98 b9       	out	0x08, r25	; 8
	PORTD = DMASK;
     e50:	8b b9       	out	0x0b, r24	; 11
	PORTE = EMASK;
     e52:	87 e0       	ldi	r24, 0x07	; 7
     e54:	8e b9       	out	0x0e, r24	; 14
     e56:	08 95       	ret

00000e58 <Group0>:
}

#if(FancyAnimations == 1)
void Group0(void)				// each group is a horizontal row of leds, with Group0 being the bottom row (Segment D), and Group 10 being the top row (Segment A).
{
	if(3 > curLed)		//A
     e58:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     e5c:	83 30       	cpi	r24, 0x03	; 3
     e5e:	38 f4       	brcc	.+14     	; 0xe6e <Group0+0x16>
	{
		PORTB = BMASK;
     e60:	8f ef       	ldi	r24, 0xFF	; 255
     e62:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;//&LED_BANKC_TAB[curLed];
     e64:	9f e3       	ldi	r25, 0x3F	; 63
     e66:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     e68:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     e6a:	87 e0       	ldi	r24, 0x07	; 7
     e6c:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
     e6e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     e72:	83 50       	subi	r24, 0x03	; 3
     e74:	83 30       	cpi	r24, 0x03	; 3
     e76:	38 f4       	brcc	.+14     	; 0xe86 <Group0+0x2e>
	{
		PORTB = BMASK;
     e78:	8f ef       	ldi	r24, 0xFF	; 255
     e7a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;//&LED_BANKC_TAB[curLed];
     e7c:	9f e3       	ldi	r25, 0x3F	; 63
     e7e:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     e80:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     e82:	87 e0       	ldi	r24, 0x07	; 7
     e84:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     e86:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     e8a:	86 30       	cpi	r24, 0x06	; 6
     e8c:	39 f4       	brne	.+14     	; 0xe9c <Group0+0x44>
	{
		PORTB = BMASK;
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     e92:	9f e3       	ldi	r25, 0x3F	; 63
     e94:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     e96:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;//&LED_BANKE_TAB[curLed - 6];
     e98:	87 e0       	ldi	r24, 0x07	; 7
     e9a:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     e9c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     ea0:	87 50       	subi	r24, 0x07	; 7
     ea2:	82 30       	cpi	r24, 0x02	; 2
     ea4:	38 f4       	brcc	.+14     	; 0xeb4 <Group0+0x5c>
	{
		PORTB = BMASK;
     ea6:	8f ef       	ldi	r24, 0xFF	; 255
     ea8:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     eaa:	9f e3       	ldi	r25, 0x3F	; 63
     eac:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     eae:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;//&LED_BANKE_TAB[curLed - 6];
     eb0:	87 e0       	ldi	r24, 0x07	; 7
     eb2:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     eb4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     eb8:	89 50       	subi	r24, 0x09	; 9
     eba:	82 30       	cpi	r24, 0x02	; 2
     ebc:	38 f4       	brcc	.+14     	; 0xecc <Group0+0x74>
	{
		PORTB = BMASK;
     ebe:	8f ef       	ldi	r24, 0xFF	; 255
     ec0:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     ec2:	9f e3       	ldi	r25, 0x3F	; 63
     ec4:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;//&LED_BANKD_TAB[curLed - 9];
     ec6:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     ec8:	87 e0       	ldi	r24, 0x07	; 7
     eca:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
     ecc:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     ed0:	8b 50       	subi	r24, 0x0B	; 11
     ed2:	83 30       	cpi	r24, 0x03	; 3
     ed4:	68 f4       	brcc	.+26     	; 0xef0 <Group0+0x98>
	{
		PORTB = BMASK;
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     eda:	8f e3       	ldi	r24, 0x3F	; 63
     edc:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     ede:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	e1 5a       	subi	r30, 0xA1	; 161
     ee6:	fe 4f       	sbci	r31, 0xFE	; 254
     ee8:	80 81       	ld	r24, Z
     eea:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     eec:	87 e0       	ldi	r24, 0x07	; 7
     eee:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (17 > curLed) && (14 <= curLed))	//E
     ef0:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     ef4:	8e 50       	subi	r24, 0x0E	; 14
     ef6:	83 30       	cpi	r24, 0x03	; 3
     ef8:	38 f4       	brcc	.+14     	; 0xf08 <Group0+0xb0>
	{
		PORTB = BMASK;
     efa:	8f ef       	ldi	r24, 0xFF	; 255
     efc:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     efe:	9f e3       	ldi	r25, 0x3F	; 63
     f00:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;//&LED_BANKD_TAB[curLed - 9];
     f02:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     f04:	87 e0       	ldi	r24, 0x07	; 7
     f06:	8e b9       	out	0x0e, r24	; 14
	}
	if( (18 > curLed) && (17 <= curLed))	//E
     f08:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     f0c:	81 31       	cpi	r24, 0x11	; 17
     f0e:	39 f4       	brne	.+14     	; 0xf1e <Group0+0xc6>
	{
		PORTB = BMASK;//&LED_BANKB_TAB[curLed - 17];
     f10:	8f ef       	ldi	r24, 0xFF	; 255
     f12:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     f14:	9f e3       	ldi	r25, 0x3F	; 63
     f16:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     f18:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     f1a:	87 e0       	ldi	r24, 0x07	; 7
     f1c:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
     f1e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     f22:	82 51       	subi	r24, 0x12	; 18
     f24:	84 30       	cpi	r24, 0x04	; 4
     f26:	38 f4       	brcc	.+14     	; 0xf36 <Group0+0xde>
	{
		PORTB = BMASK;//&LED_BANKB_TAB[curLed - 17];
     f28:	8f ef       	ldi	r24, 0xFF	; 255
     f2a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     f2c:	9f e3       	ldi	r25, 0x3F	; 63
     f2e:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     f30:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     f32:	87 e0       	ldi	r24, 0x07	; 7
     f34:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
     f36:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     f3a:	86 51       	subi	r24, 0x16	; 22
     f3c:	83 30       	cpi	r24, 0x03	; 3
     f3e:	38 f4       	brcc	.+14     	; 0xf4e <Group0+0xf6>
	{
		PORTB = BMASK;//&LED_BANKB_TAB[curLed - 17];
     f40:	8f ef       	ldi	r24, 0xFF	; 255
     f42:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     f44:	9f e3       	ldi	r25, 0x3F	; 63
     f46:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     f48:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     f4a:	87 e0       	ldi	r24, 0x07	; 7
     f4c:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     f4e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	69 e1       	ldi	r22, 0x19	; 25
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
     f5e:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
     f62:	08 95       	ret

00000f64 <Group1>:
}
void Group1(void)
{
	if(3 > curLed)		//A
     f64:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     f68:	83 30       	cpi	r24, 0x03	; 3
     f6a:	38 f4       	brcc	.+14     	; 0xf7a <Group1+0x16>
	{
		PORTB = BMASK;
     f6c:	8f ef       	ldi	r24, 0xFF	; 255
     f6e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;//&LED_BANKC_TAB[curLed];
     f70:	9f e3       	ldi	r25, 0x3F	; 63
     f72:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     f74:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     f76:	87 e0       	ldi	r24, 0x07	; 7
     f78:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
     f7a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     f7e:	83 50       	subi	r24, 0x03	; 3
     f80:	83 30       	cpi	r24, 0x03	; 3
     f82:	38 f4       	brcc	.+14     	; 0xf92 <Group1+0x2e>
	{
		PORTB = BMASK;
     f84:	8f ef       	ldi	r24, 0xFF	; 255
     f86:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;//&LED_BANKC_TAB[curLed];
     f88:	9f e3       	ldi	r25, 0x3F	; 63
     f8a:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     f8c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     f8e:	87 e0       	ldi	r24, 0x07	; 7
     f90:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     f92:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     f96:	86 30       	cpi	r24, 0x06	; 6
     f98:	39 f4       	brne	.+14     	; 0xfa8 <Group1+0x44>
	{
		PORTB = BMASK;
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     f9e:	9f e3       	ldi	r25, 0x3F	; 63
     fa0:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     fa2:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;//&LED_BANKE_TAB[curLed - 6];
     fa4:	87 e0       	ldi	r24, 0x07	; 7
     fa6:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     fa8:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     fac:	87 50       	subi	r24, 0x07	; 7
     fae:	82 30       	cpi	r24, 0x02	; 2
     fb0:	38 f4       	brcc	.+14     	; 0xfc0 <Group1+0x5c>
	{
		PORTB = BMASK;
     fb2:	8f ef       	ldi	r24, 0xFF	; 255
     fb4:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     fb6:	9f e3       	ldi	r25, 0x3F	; 63
     fb8:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     fba:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;//&LED_BANKE_TAB[curLed - 6];
     fbc:	87 e0       	ldi	r24, 0x07	; 7
     fbe:	8e b9       	out	0x0e, r24	; 14
	}
	if( (10 > curLed) && (9 <= curLed))	//C
     fc0:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     fc4:	89 30       	cpi	r24, 0x09	; 9
     fc6:	39 f4       	brne	.+14     	; 0xfd6 <Group1+0x72>
	{
		PORTB = BMASK;
     fc8:	8f ef       	ldi	r24, 0xFF	; 255
     fca:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     fcc:	9f e3       	ldi	r25, 0x3F	; 63
     fce:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;//&LED_BANKD_TAB[curLed - 9];
     fd0:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     fd2:	87 e0       	ldi	r24, 0x07	; 7
     fd4:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (10 <= curLed))
     fd6:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     fda:	8a 30       	cpi	r24, 0x0A	; 10
     fdc:	69 f4       	brne	.+26     	; 0xff8 <Group1+0x94>
	{
		PORTB = BMASK;
     fde:	8f ef       	ldi	r24, 0xFF	; 255
     fe0:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     fe2:	8f e3       	ldi	r24, 0x3F	; 63
     fe4:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 1
     fe6:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	e1 5a       	subi	r30, 0xA1	; 161
     fee:	fe 4f       	sbci	r31, 0xFE	; 254
     ff0:	80 81       	ld	r24, Z
     ff2:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     ff4:	87 e0       	ldi	r24, 0x07	; 7
     ff6:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
     ff8:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
     ffc:	8b 50       	subi	r24, 0x0B	; 11
     ffe:	83 30       	cpi	r24, 0x03	; 3
    1000:	68 f4       	brcc	.+26     	; 0x101c <Group1+0xb8>
	{
		PORTB = BMASK;
    1002:	8f ef       	ldi	r24, 0xFF	; 255
    1004:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1006:	8f e3       	ldi	r24, 0x3F	; 63
    1008:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 0
    100a:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	e1 5a       	subi	r30, 0xA1	; 161
    1012:	fe 4f       	sbci	r31, 0xFE	; 254
    1014:	80 81       	ld	r24, Z
    1016:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1018:	87 e0       	ldi	r24, 0x07	; 7
    101a:	8e b9       	out	0x0e, r24	; 14
	}
	if( (15 > curLed) && (14 <= curLed))
    101c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1020:	8e 30       	cpi	r24, 0x0E	; 14
    1022:	69 f4       	brne	.+26     	; 0x103e <Group1+0xda>
	{
		PORTB = BMASK;
    1024:	8f ef       	ldi	r24, 0xFF	; 255
    1026:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1028:	8f e3       	ldi	r24, 0x3F	; 63
    102a:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 1
    102c:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	e1 5a       	subi	r30, 0xA1	; 161
    1034:	fe 4f       	sbci	r31, 0xFE	; 254
    1036:	80 81       	ld	r24, Z
    1038:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    103a:	87 e0       	ldi	r24, 0x07	; 7
    103c:	8e b9       	out	0x0e, r24	; 14
	}
	if( (17 > curLed) && (15 <= curLed))	//E
    103e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1042:	8f 50       	subi	r24, 0x0F	; 15
    1044:	82 30       	cpi	r24, 0x02	; 2
    1046:	38 f4       	brcc	.+14     	; 0x1056 <Group1+0xf2>
	{
		PORTB = BMASK;
    1048:	8f ef       	ldi	r24, 0xFF	; 255
    104a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    104c:	9f e3       	ldi	r25, 0x3F	; 63
    104e:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;//&LED_BANKD_TAB[curLed - 9];
    1050:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1052:	87 e0       	ldi	r24, 0x07	; 7
    1054:	8e b9       	out	0x0e, r24	; 14
	}
	if( (18 > curLed) && (17 <= curLed))	//E
    1056:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    105a:	81 31       	cpi	r24, 0x11	; 17
    105c:	39 f4       	brne	.+14     	; 0x106c <Group1+0x108>
	{
		PORTB = BMASK;//&LED_BANKB_TAB[curLed - 17];
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1062:	9f e3       	ldi	r25, 0x3F	; 63
    1064:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1066:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1068:	87 e0       	ldi	r24, 0x07	; 7
    106a:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
    106c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1070:	82 51       	subi	r24, 0x12	; 18
    1072:	84 30       	cpi	r24, 0x04	; 4
    1074:	38 f4       	brcc	.+14     	; 0x1084 <Group1+0x120>
	{
		PORTB = BMASK;//&LED_BANKB_TAB[curLed - 17];
    1076:	8f ef       	ldi	r24, 0xFF	; 255
    1078:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    107a:	9f e3       	ldi	r25, 0x3F	; 63
    107c:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    107e:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1080:	87 e0       	ldi	r24, 0x07	; 7
    1082:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
    1084:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1088:	86 51       	subi	r24, 0x16	; 22
    108a:	83 30       	cpi	r24, 0x03	; 3
    108c:	38 f4       	brcc	.+14     	; 0x109c <Group1+0x138>
	{
		PORTB = BMASK;//&LED_BANKB_TAB[curLed - 17];
    108e:	8f ef       	ldi	r24, 0xFF	; 255
    1090:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1092:	9f e3       	ldi	r25, 0x3F	; 63
    1094:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1096:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1098:	87 e0       	ldi	r24, 0x07	; 7
    109a:	8e b9       	out	0x0e, r24	; 14
	}
	curLed = ((curLed + 1)%NUMLED);
    109c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	69 e1       	ldi	r22, 0x19	; 25
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
    10ac:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
    10b0:	08 95       	ret

000010b2 <Group2>:
}
void Group2(void)
{
	if(3 > curLed)		//A
    10b2:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    10b6:	83 30       	cpi	r24, 0x03	; 3
    10b8:	38 f4       	brcc	.+14     	; 0x10c8 <Group2+0x16>
	{
		PORTB = BMASK;
    10ba:	8f ef       	ldi	r24, 0xFF	; 255
    10bc:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;//&LED_BANKC_TAB[curLed];
    10be:	9f e3       	ldi	r25, 0x3F	; 63
    10c0:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    10c2:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    10c4:	87 e0       	ldi	r24, 0x07	; 7
    10c6:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
    10c8:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    10cc:	83 50       	subi	r24, 0x03	; 3
    10ce:	83 30       	cpi	r24, 0x03	; 3
    10d0:	38 f4       	brcc	.+14     	; 0x10e0 <Group2+0x2e>
	{
		PORTB = BMASK;
    10d2:	8f ef       	ldi	r24, 0xFF	; 255
    10d4:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;//&LED_BANKC_TAB[curLed];
    10d6:	9f e3       	ldi	r25, 0x3F	; 63
    10d8:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    10da:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    10dc:	87 e0       	ldi	r24, 0x07	; 7
    10de:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
    10e0:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    10e4:	86 30       	cpi	r24, 0x06	; 6
    10e6:	39 f4       	brne	.+14     	; 0x10f6 <Group2+0x44>
	{
		PORTB = BMASK;
    10e8:	8f ef       	ldi	r24, 0xFF	; 255
    10ea:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    10ec:	9f e3       	ldi	r25, 0x3F	; 63
    10ee:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    10f0:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;//&LED_BANKE_TAB[curLed - 6];
    10f2:	87 e0       	ldi	r24, 0x07	; 7
    10f4:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
    10f6:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    10fa:	87 50       	subi	r24, 0x07	; 7
    10fc:	82 30       	cpi	r24, 0x02	; 2
    10fe:	38 f4       	brcc	.+14     	; 0x110e <Group2+0x5c>
	{
		PORTB = BMASK;
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1104:	9f e3       	ldi	r25, 0x3F	; 63
    1106:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1108:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;//&LED_BANKE_TAB[curLed - 6];
    110a:	87 e0       	ldi	r24, 0x07	; 7
    110c:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (11 > curLed) && (9 <= curLed))
    110e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1112:	89 50       	subi	r24, 0x09	; 9
    1114:	82 30       	cpi	r24, 0x02	; 2
    1116:	68 f4       	brcc	.+26     	; 0x1132 <Group2+0x80>
	{
		PORTB = BMASK;
    1118:	8f ef       	ldi	r24, 0xFF	; 255
    111a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    111c:	8f e3       	ldi	r24, 0x3F	; 63
    111e:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 1 & 2
    1120:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	e1 5a       	subi	r30, 0xA1	; 161
    1128:	fe 4f       	sbci	r31, 0xFE	; 254
    112a:	80 81       	ld	r24, Z
    112c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    112e:	87 e0       	ldi	r24, 0x07	; 7
    1130:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
    1132:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1136:	8b 50       	subi	r24, 0x0B	; 11
    1138:	83 30       	cpi	r24, 0x03	; 3
    113a:	68 f4       	brcc	.+26     	; 0x1156 <Group2+0xa4>
	{
		PORTB = BMASK;
    113c:	8f ef       	ldi	r24, 0xFF	; 255
    113e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1140:	8f e3       	ldi	r24, 0x3F	; 63
    1142:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 0
    1144:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	e1 5a       	subi	r30, 0xA1	; 161
    114c:	fe 4f       	sbci	r31, 0xFE	; 254
    114e:	80 81       	ld	r24, Z
    1150:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1152:	87 e0       	ldi	r24, 0x07	; 7
    1154:	8e b9       	out	0x0e, r24	; 14
	}
	if( (16 > curLed) && (14 <= curLed))
    1156:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    115a:	8e 50       	subi	r24, 0x0E	; 14
    115c:	82 30       	cpi	r24, 0x02	; 2
    115e:	68 f4       	brcc	.+26     	; 0x117a <Group2+0xc8>
	{
		PORTB = BMASK;
    1160:	8f ef       	ldi	r24, 0xFF	; 255
    1162:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1164:	8f e3       	ldi	r24, 0x3F	; 63
    1166:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 1 & 2
    1168:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	e1 5a       	subi	r30, 0xA1	; 161
    1170:	fe 4f       	sbci	r31, 0xFE	; 254
    1172:	80 81       	ld	r24, Z
    1174:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1176:	87 e0       	ldi	r24, 0x07	; 7
    1178:	8e b9       	out	0x0e, r24	; 14
	}
	if( (17 > curLed) && (16 <= curLed))	//E
    117a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    117e:	80 31       	cpi	r24, 0x10	; 16
    1180:	39 f4       	brne	.+14     	; 0x1190 <Group2+0xde>
	{
		PORTB = BMASK;
    1182:	8f ef       	ldi	r24, 0xFF	; 255
    1184:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1186:	9f e3       	ldi	r25, 0x3F	; 63
    1188:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;//&LED_BANKD_TAB[curLed - 9];
    118a:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    118c:	87 e0       	ldi	r24, 0x07	; 7
    118e:	8e b9       	out	0x0e, r24	; 14
	}
	if( (18 > curLed) && (17 <= curLed))	//E
    1190:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1194:	81 31       	cpi	r24, 0x11	; 17
    1196:	39 f4       	brne	.+14     	; 0x11a6 <Group2+0xf4>
	{
		PORTB = BMASK;//&LED_BANKB_TAB[curLed - 17];
    1198:	8f ef       	ldi	r24, 0xFF	; 255
    119a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    119c:	9f e3       	ldi	r25, 0x3F	; 63
    119e:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    11a0:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    11a2:	87 e0       	ldi	r24, 0x07	; 7
    11a4:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
    11a6:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    11aa:	82 51       	subi	r24, 0x12	; 18
    11ac:	84 30       	cpi	r24, 0x04	; 4
    11ae:	38 f4       	brcc	.+14     	; 0x11be <Group2+0x10c>
	{
		PORTB = BMASK;//&LED_BANKB_TAB[curLed - 17];
    11b0:	8f ef       	ldi	r24, 0xFF	; 255
    11b2:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    11b4:	9f e3       	ldi	r25, 0x3F	; 63
    11b6:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    11b8:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    11ba:	87 e0       	ldi	r24, 0x07	; 7
    11bc:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
    11be:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    11c2:	86 51       	subi	r24, 0x16	; 22
    11c4:	83 30       	cpi	r24, 0x03	; 3
    11c6:	38 f4       	brcc	.+14     	; 0x11d6 <Group2+0x124>
	{
		PORTB = BMASK;//&LED_BANKB_TAB[curLed - 17];
    11c8:	8f ef       	ldi	r24, 0xFF	; 255
    11ca:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    11cc:	9f e3       	ldi	r25, 0x3F	; 63
    11ce:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    11d0:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    11d2:	87 e0       	ldi	r24, 0x07	; 7
    11d4:	8e b9       	out	0x0e, r24	; 14
	}
	curLed = ((curLed + 1)%NUMLED);
    11d6:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	69 e1       	ldi	r22, 0x19	; 25
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
    11e6:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
    11ea:	08 95       	ret

000011ec <Group3>:
}
void Group3(void)
{
	if(3 > curLed)		//A
    11ec:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    11f0:	83 30       	cpi	r24, 0x03	; 3
    11f2:	38 f4       	brcc	.+14     	; 0x1202 <Group3+0x16>
	{
		PORTB = BMASK;
    11f4:	8f ef       	ldi	r24, 0xFF	; 255
    11f6:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;//&LED_BANKC_TAB[curLed];
    11f8:	9f e3       	ldi	r25, 0x3F	; 63
    11fa:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    11fc:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    11fe:	87 e0       	ldi	r24, 0x07	; 7
    1200:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
    1202:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1206:	83 50       	subi	r24, 0x03	; 3
    1208:	83 30       	cpi	r24, 0x03	; 3
    120a:	38 f4       	brcc	.+14     	; 0x121a <Group3+0x2e>
	{
		PORTB = BMASK;
    120c:	8f ef       	ldi	r24, 0xFF	; 255
    120e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;//&LED_BANKC_TAB[curLed];
    1210:	9f e3       	ldi	r25, 0x3F	; 63
    1212:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1214:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1216:	87 e0       	ldi	r24, 0x07	; 7
    1218:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
    121a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    121e:	86 30       	cpi	r24, 0x06	; 6
    1220:	39 f4       	brne	.+14     	; 0x1230 <Group3+0x44>
	{
		PORTB = BMASK;
    1222:	8f ef       	ldi	r24, 0xFF	; 255
    1224:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1226:	9f e3       	ldi	r25, 0x3F	; 63
    1228:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    122a:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;//&LED_BANKE_TAB[curLed - 6];
    122c:	87 e0       	ldi	r24, 0x07	; 7
    122e:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((8> curLed)&&(7 <= curLed)) //C
    1230:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1234:	87 30       	cpi	r24, 0x07	; 7
    1236:	39 f4       	brne	.+14     	; 0x1246 <Group3+0x5a>
	{
		PORTB = BMASK;
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    123c:	9f e3       	ldi	r25, 0x3F	; 63
    123e:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1240:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;//&LED_BANKE_TAB[curLed - 6];
    1242:	87 e0       	ldi	r24, 0x07	; 7
    1244:	8e b9       	out	0x0e, r24	; 14
	}
	if((9> curLed)&&(8 <= curLed)) //C
    1246:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    124a:	88 30       	cpi	r24, 0x08	; 8
    124c:	69 f4       	brne	.+26     	; 0x1268 <Group3+0x7c>
	{
		PORTB = BMASK;
    124e:	8f ef       	ldi	r24, 0xFF	; 255
    1250:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1252:	9f e3       	ldi	r25, 0x3F	; 63
    1254:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1256:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];		//group 3
    1258:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	e6 5a       	subi	r30, 0xA6	; 166
    1260:	fe 4f       	sbci	r31, 0xFE	; 254
    1262:	80 81       	ld	r24, Z
    1264:	87 70       	andi	r24, 0x07	; 7
    1266:	8e b9       	out	0x0e, r24	; 14
	}
	
	
	if( (11 > curLed) && (9 <= curLed))
    1268:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    126c:	89 50       	subi	r24, 0x09	; 9
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	68 f4       	brcc	.+26     	; 0x128c <Group3+0xa0>
	{
		PORTB = BMASK;
    1272:	8f ef       	ldi	r24, 0xFF	; 255
    1274:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1276:	8f e3       	ldi	r24, 0x3F	; 63
    1278:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 1 & 2
    127a:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	e1 5a       	subi	r30, 0xA1	; 161
    1282:	fe 4f       	sbci	r31, 0xFE	; 254
    1284:	80 81       	ld	r24, Z
    1286:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1288:	87 e0       	ldi	r24, 0x07	; 7
    128a:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
    128c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1290:	8b 50       	subi	r24, 0x0B	; 11
    1292:	83 30       	cpi	r24, 0x03	; 3
    1294:	68 f4       	brcc	.+26     	; 0x12b0 <Group3+0xc4>
	{
		PORTB = BMASK;
    1296:	8f ef       	ldi	r24, 0xFF	; 255
    1298:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    129a:	8f e3       	ldi	r24, 0x3F	; 63
    129c:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 0
    129e:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	e1 5a       	subi	r30, 0xA1	; 161
    12a6:	fe 4f       	sbci	r31, 0xFE	; 254
    12a8:	80 81       	ld	r24, Z
    12aa:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    12ac:	87 e0       	ldi	r24, 0x07	; 7
    12ae:	8e b9       	out	0x0e, r24	; 14
	}
	if( (17 > curLed) && (14 <= curLed))
    12b0:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    12b4:	8e 50       	subi	r24, 0x0E	; 14
    12b6:	83 30       	cpi	r24, 0x03	; 3
    12b8:	68 f4       	brcc	.+26     	; 0x12d4 <Group3+0xe8>
	{
		PORTB = BMASK;
    12ba:	8f ef       	ldi	r24, 0xFF	; 255
    12bc:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    12be:	8f e3       	ldi	r24, 0x3F	; 63
    12c0:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 1 & 2 & 3
    12c2:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	e1 5a       	subi	r30, 0xA1	; 161
    12ca:	fe 4f       	sbci	r31, 0xFE	; 254
    12cc:	80 81       	ld	r24, Z
    12ce:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    12d0:	87 e0       	ldi	r24, 0x07	; 7
    12d2:	8e b9       	out	0x0e, r24	; 14
	}
	if( (18 > curLed) && (17 <= curLed))	//E
    12d4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    12d8:	81 31       	cpi	r24, 0x11	; 17
    12da:	39 f4       	brne	.+14     	; 0x12ea <Group3+0xfe>
	{
		PORTB = BMASK;//&LED_BANKB_TAB[curLed - 17];
    12dc:	8f ef       	ldi	r24, 0xFF	; 255
    12de:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    12e0:	9f e3       	ldi	r25, 0x3F	; 63
    12e2:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    12e4:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    12e6:	87 e0       	ldi	r24, 0x07	; 7
    12e8:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
    12ea:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    12ee:	82 51       	subi	r24, 0x12	; 18
    12f0:	84 30       	cpi	r24, 0x04	; 4
    12f2:	38 f4       	brcc	.+14     	; 0x1302 <Group3+0x116>
	{
		PORTB = BMASK;//&LED_BANKB_TAB[curLed - 17];
    12f4:	8f ef       	ldi	r24, 0xFF	; 255
    12f6:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    12f8:	9f e3       	ldi	r25, 0x3F	; 63
    12fa:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    12fc:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    12fe:	87 e0       	ldi	r24, 0x07	; 7
    1300:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
    1302:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1306:	86 51       	subi	r24, 0x16	; 22
    1308:	83 30       	cpi	r24, 0x03	; 3
    130a:	38 f4       	brcc	.+14     	; 0x131a <Group3+0x12e>
	{
		PORTB = BMASK;//&LED_BANKB_TAB[curLed - 17];
    130c:	8f ef       	ldi	r24, 0xFF	; 255
    130e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1310:	9f e3       	ldi	r25, 0x3F	; 63
    1312:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1314:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1316:	87 e0       	ldi	r24, 0x07	; 7
    1318:	8e b9       	out	0x0e, r24	; 14
	}
	curLed = ((curLed + 1)%NUMLED);
    131a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	01 96       	adiw	r24, 0x01	; 1
    1322:	69 e1       	ldi	r22, 0x19	; 25
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
    132a:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
    132e:	08 95       	ret

00001330 <Group4>:
}
void Group4(void)
{
	if(3 > curLed)		//A
    1330:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1334:	83 30       	cpi	r24, 0x03	; 3
    1336:	38 f4       	brcc	.+14     	; 0x1346 <Group4+0x16>
	{
		PORTB = BMASK;
    1338:	8f ef       	ldi	r24, 0xFF	; 255
    133a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;//&LED_BANKC_TAB[curLed];
    133c:	9f e3       	ldi	r25, 0x3F	; 63
    133e:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1340:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1342:	87 e0       	ldi	r24, 0x07	; 7
    1344:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
    1346:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    134a:	83 50       	subi	r24, 0x03	; 3
    134c:	83 30       	cpi	r24, 0x03	; 3
    134e:	38 f4       	brcc	.+14     	; 0x135e <Group4+0x2e>
	{
		PORTB = BMASK;
    1350:	8f ef       	ldi	r24, 0xFF	; 255
    1352:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;//&LED_BANKC_TAB[curLed];
    1354:	9f e3       	ldi	r25, 0x3F	; 63
    1356:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1358:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    135a:	87 e0       	ldi	r24, 0x07	; 7
    135c:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
    135e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1362:	86 30       	cpi	r24, 0x06	; 6
    1364:	39 f4       	brne	.+14     	; 0x1374 <Group4+0x44>
	{
		PORTB = BMASK;
    1366:	8f ef       	ldi	r24, 0xFF	; 255
    1368:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    136a:	9f e3       	ldi	r25, 0x3F	; 63
    136c:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    136e:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;//&LED_BANKE_TAB[curLed - 6];
    1370:	87 e0       	ldi	r24, 0x07	; 7
    1372:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
    1374:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1378:	87 50       	subi	r24, 0x07	; 7
    137a:	82 30       	cpi	r24, 0x02	; 2
    137c:	68 f4       	brcc	.+26     	; 0x1398 <Group4+0x68>
	{
		PORTB = BMASK;
    137e:	8f ef       	ldi	r24, 0xFF	; 255
    1380:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1382:	9f e3       	ldi	r25, 0x3F	; 63
    1384:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1386:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];		//group 3 & 4
    1388:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	e6 5a       	subi	r30, 0xA6	; 166
    1390:	fe 4f       	sbci	r31, 0xFE	; 254
    1392:	80 81       	ld	r24, Z
    1394:	87 70       	andi	r24, 0x07	; 7
    1396:	8e b9       	out	0x0e, r24	; 14
	}
	
	
	if( (11 > curLed) && (9 <= curLed))
    1398:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    139c:	89 50       	subi	r24, 0x09	; 9
    139e:	82 30       	cpi	r24, 0x02	; 2
    13a0:	68 f4       	brcc	.+26     	; 0x13bc <Group4+0x8c>
	{
		PORTB = BMASK;
    13a2:	8f ef       	ldi	r24, 0xFF	; 255
    13a4:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    13a6:	8f e3       	ldi	r24, 0x3F	; 63
    13a8:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 1 & 2
    13aa:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	e1 5a       	subi	r30, 0xA1	; 161
    13b2:	fe 4f       	sbci	r31, 0xFE	; 254
    13b4:	80 81       	ld	r24, Z
    13b6:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    13b8:	87 e0       	ldi	r24, 0x07	; 7
    13ba:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
    13bc:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    13c0:	8b 50       	subi	r24, 0x0B	; 11
    13c2:	83 30       	cpi	r24, 0x03	; 3
    13c4:	68 f4       	brcc	.+26     	; 0x13e0 <Group4+0xb0>
	{
		PORTB = BMASK;
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    13ca:	8f e3       	ldi	r24, 0x3F	; 63
    13cc:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 0
    13ce:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	e1 5a       	subi	r30, 0xA1	; 161
    13d6:	fe 4f       	sbci	r31, 0xFE	; 254
    13d8:	80 81       	ld	r24, Z
    13da:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    13dc:	87 e0       	ldi	r24, 0x07	; 7
    13de:	8e b9       	out	0x0e, r24	; 14
	}
	if( (17 > curLed) && (14 <= curLed))
    13e0:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    13e4:	8e 50       	subi	r24, 0x0E	; 14
    13e6:	83 30       	cpi	r24, 0x03	; 3
    13e8:	68 f4       	brcc	.+26     	; 0x1404 <Group4+0xd4>
	{
		PORTB = BMASK;
    13ea:	8f ef       	ldi	r24, 0xFF	; 255
    13ec:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    13ee:	8f e3       	ldi	r24, 0x3F	; 63
    13f0:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 1 & 2 & 3
    13f2:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	e1 5a       	subi	r30, 0xA1	; 161
    13fa:	fe 4f       	sbci	r31, 0xFE	; 254
    13fc:	80 81       	ld	r24, Z
    13fe:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1400:	87 e0       	ldi	r24, 0x07	; 7
    1402:	8e b9       	out	0x0e, r24	; 14
	}
	if( (18 > curLed) && (17 <= curLed))	//E
    1404:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1408:	81 31       	cpi	r24, 0x11	; 17
    140a:	41 f4       	brne	.+16     	; 0x141c <Group4+0xec>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];		//group 4
    140c:	8e ef       	ldi	r24, 0xFE	; 254
    140e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1410:	8f e3       	ldi	r24, 0x3F	; 63
    1412:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    1414:	8f ef       	ldi	r24, 0xFF	; 255
    1416:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1418:	87 e0       	ldi	r24, 0x07	; 7
    141a:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
    141c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1420:	82 51       	subi	r24, 0x12	; 18
    1422:	84 30       	cpi	r24, 0x04	; 4
    1424:	38 f4       	brcc	.+14     	; 0x1434 <Group4+0x104>
	{
		PORTB = BMASK;//&LED_BANKB_TAB[curLed - 17];
    1426:	8f ef       	ldi	r24, 0xFF	; 255
    1428:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    142a:	9f e3       	ldi	r25, 0x3F	; 63
    142c:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    142e:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1430:	87 e0       	ldi	r24, 0x07	; 7
    1432:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
    1434:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1438:	86 51       	subi	r24, 0x16	; 22
    143a:	83 30       	cpi	r24, 0x03	; 3
    143c:	38 f4       	brcc	.+14     	; 0x144c <Group4+0x11c>
	{
		PORTB = BMASK;//&LED_BANKB_TAB[curLed - 17];
    143e:	8f ef       	ldi	r24, 0xFF	; 255
    1440:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1442:	9f e3       	ldi	r25, 0x3F	; 63
    1444:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1446:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1448:	87 e0       	ldi	r24, 0x07	; 7
    144a:	8e b9       	out	0x0e, r24	; 14
	}
	curLed = ((curLed + 1)%NUMLED);
    144c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	01 96       	adiw	r24, 0x01	; 1
    1454:	69 e1       	ldi	r22, 0x19	; 25
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
    145c:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
    1460:	08 95       	ret

00001462 <Group5>:
}
void Group5(void)
{
	if(3 > curLed)		//A
    1462:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1466:	83 30       	cpi	r24, 0x03	; 3
    1468:	38 f4       	brcc	.+14     	; 0x1478 <Group5+0x16>
	{
		PORTB = BMASK;
    146a:	8f ef       	ldi	r24, 0xFF	; 255
    146c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;//&LED_BANKC_TAB[curLed];
    146e:	9f e3       	ldi	r25, 0x3F	; 63
    1470:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1472:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1474:	87 e0       	ldi	r24, 0x07	; 7
    1476:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
    1478:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    147c:	83 50       	subi	r24, 0x03	; 3
    147e:	83 30       	cpi	r24, 0x03	; 3
    1480:	38 f4       	brcc	.+14     	; 0x1490 <Group5+0x2e>
	{
		PORTB = BMASK;
    1482:	8f ef       	ldi	r24, 0xFF	; 255
    1484:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;//&LED_BANKC_TAB[curLed];
    1486:	9f e3       	ldi	r25, 0x3F	; 63
    1488:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    148a:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    148c:	87 e0       	ldi	r24, 0x07	; 7
    148e:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
    1490:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1494:	86 30       	cpi	r24, 0x06	; 6
    1496:	39 f4       	brne	.+14     	; 0x14a6 <Group5+0x44>
	{
		PORTB = BMASK;
    1498:	8f ef       	ldi	r24, 0xFF	; 255
    149a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    149c:	9f e3       	ldi	r25, 0x3F	; 63
    149e:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    14a0:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;//&LED_BANKE_TAB[curLed - 6];
    14a2:	87 e0       	ldi	r24, 0x07	; 7
    14a4:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
    14a6:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    14aa:	87 50       	subi	r24, 0x07	; 7
    14ac:	82 30       	cpi	r24, 0x02	; 2
    14ae:	68 f4       	brcc	.+26     	; 0x14ca <Group5+0x68>
	{
		PORTB = BMASK;
    14b0:	8f ef       	ldi	r24, 0xFF	; 255
    14b2:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    14b4:	9f e3       	ldi	r25, 0x3F	; 63
    14b6:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    14b8:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];		//group 3 & 4
    14ba:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	e6 5a       	subi	r30, 0xA6	; 166
    14c2:	fe 4f       	sbci	r31, 0xFE	; 254
    14c4:	80 81       	ld	r24, Z
    14c6:	87 70       	andi	r24, 0x07	; 7
    14c8:	8e b9       	out	0x0e, r24	; 14
	}
	
	
	if( (11 > curLed) && (9 <= curLed))
    14ca:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    14ce:	89 50       	subi	r24, 0x09	; 9
    14d0:	82 30       	cpi	r24, 0x02	; 2
    14d2:	68 f4       	brcc	.+26     	; 0x14ee <Group5+0x8c>
	{
		PORTB = BMASK;
    14d4:	8f ef       	ldi	r24, 0xFF	; 255
    14d6:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    14d8:	8f e3       	ldi	r24, 0x3F	; 63
    14da:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 1 & 2
    14dc:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	e1 5a       	subi	r30, 0xA1	; 161
    14e4:	fe 4f       	sbci	r31, 0xFE	; 254
    14e6:	80 81       	ld	r24, Z
    14e8:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    14ea:	87 e0       	ldi	r24, 0x07	; 7
    14ec:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
    14ee:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    14f2:	8b 50       	subi	r24, 0x0B	; 11
    14f4:	83 30       	cpi	r24, 0x03	; 3
    14f6:	68 f4       	brcc	.+26     	; 0x1512 <Group5+0xb0>
	{
		PORTB = BMASK;
    14f8:	8f ef       	ldi	r24, 0xFF	; 255
    14fa:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    14fc:	8f e3       	ldi	r24, 0x3F	; 63
    14fe:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 0
    1500:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	e1 5a       	subi	r30, 0xA1	; 161
    1508:	fe 4f       	sbci	r31, 0xFE	; 254
    150a:	80 81       	ld	r24, Z
    150c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    150e:	87 e0       	ldi	r24, 0x07	; 7
    1510:	8e b9       	out	0x0e, r24	; 14
	}
	if( (17 > curLed) && (14 <= curLed))
    1512:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1516:	8e 50       	subi	r24, 0x0E	; 14
    1518:	83 30       	cpi	r24, 0x03	; 3
    151a:	68 f4       	brcc	.+26     	; 0x1536 <Group5+0xd4>
	{
		PORTB = BMASK;
    151c:	8f ef       	ldi	r24, 0xFF	; 255
    151e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1520:	8f e3       	ldi	r24, 0x3F	; 63
    1522:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 1 & 2 & 3
    1524:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	e1 5a       	subi	r30, 0xA1	; 161
    152c:	fe 4f       	sbci	r31, 0xFE	; 254
    152e:	80 81       	ld	r24, Z
    1530:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1532:	87 e0       	ldi	r24, 0x07	; 7
    1534:	8e b9       	out	0x0e, r24	; 14
	}
	if( (18 > curLed) && (17 <= curLed))	//E
    1536:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    153a:	81 31       	cpi	r24, 0x11	; 17
    153c:	41 f4       	brne	.+16     	; 0x154e <Group5+0xec>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];		//group 4
    153e:	8e ef       	ldi	r24, 0xFE	; 254
    1540:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1542:	8f e3       	ldi	r24, 0x3F	; 63
    1544:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    1546:	8f ef       	ldi	r24, 0xFF	; 255
    1548:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    154a:	87 e0       	ldi	r24, 0x07	; 7
    154c:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
    154e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1552:	82 51       	subi	r24, 0x12	; 18
    1554:	84 30       	cpi	r24, 0x04	; 4
    1556:	38 f4       	brcc	.+14     	; 0x1566 <Group5+0x104>
	{
		PORTB = BMASK;//&LED_BANKB_TAB[curLed - 17];
    1558:	8f ef       	ldi	r24, 0xFF	; 255
    155a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    155c:	9f e3       	ldi	r25, 0x3F	; 63
    155e:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1560:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1562:	87 e0       	ldi	r24, 0x07	; 7
    1564:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
    1566:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    156a:	8a ee       	ldi	r24, 0xEA	; 234
    156c:	8e 0f       	add	r24, r30
    156e:	83 30       	cpi	r24, 0x03	; 3
    1570:	58 f4       	brcc	.+22     	; 0x1588 <Group5+0x126>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];	//group 5
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	e9 59       	subi	r30, 0x99	; 153
    1576:	fe 4f       	sbci	r31, 0xFE	; 254
    1578:	80 81       	ld	r24, Z
    157a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    157c:	8f e3       	ldi	r24, 0x3F	; 63
    157e:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    1580:	8f ef       	ldi	r24, 0xFF	; 255
    1582:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1584:	87 e0       	ldi	r24, 0x07	; 7
    1586:	8e b9       	out	0x0e, r24	; 14
	}
	curLed = ((curLed + 1)%NUMLED);
    1588:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	01 96       	adiw	r24, 0x01	; 1
    1590:	69 e1       	ldi	r22, 0x19	; 25
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
    1598:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
    159c:	08 95       	ret

0000159e <Group6>:
}
void Group6(void)
{
	if(3 > curLed)		//A
    159e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    15a2:	83 30       	cpi	r24, 0x03	; 3
    15a4:	38 f4       	brcc	.+14     	; 0x15b4 <Group6+0x16>
	{
		PORTB = BMASK;
    15a6:	8f ef       	ldi	r24, 0xFF	; 255
    15a8:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;//&LED_BANKC_TAB[curLed];
    15aa:	9f e3       	ldi	r25, 0x3F	; 63
    15ac:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    15ae:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    15b0:	87 e0       	ldi	r24, 0x07	; 7
    15b2:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
    15b4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    15b8:	83 50       	subi	r24, 0x03	; 3
    15ba:	83 30       	cpi	r24, 0x03	; 3
    15bc:	38 f4       	brcc	.+14     	; 0x15cc <Group6+0x2e>
	{
		PORTB = BMASK;
    15be:	8f ef       	ldi	r24, 0xFF	; 255
    15c0:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;//&LED_BANKC_TAB[curLed];
    15c2:	9f e3       	ldi	r25, 0x3F	; 63
    15c4:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    15c6:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    15c8:	87 e0       	ldi	r24, 0x07	; 7
    15ca:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(6 <= curLed)) //C
    15cc:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    15d0:	86 50       	subi	r24, 0x06	; 6
    15d2:	83 30       	cpi	r24, 0x03	; 3
    15d4:	68 f4       	brcc	.+26     	; 0x15f0 <Group6+0x52>
	{
		PORTB = BMASK;
    15d6:	8f ef       	ldi	r24, 0xFF	; 255
    15d8:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    15da:	9f e3       	ldi	r25, 0x3F	; 63
    15dc:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    15de:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];		//group 3 & 4 & 6
    15e0:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	e6 5a       	subi	r30, 0xA6	; 166
    15e8:	fe 4f       	sbci	r31, 0xFE	; 254
    15ea:	80 81       	ld	r24, Z
    15ec:	87 70       	andi	r24, 0x07	; 7
    15ee:	8e b9       	out	0x0e, r24	; 14
	}
	
	
	if( (11 > curLed) && (9 <= curLed))
    15f0:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    15f4:	89 50       	subi	r24, 0x09	; 9
    15f6:	82 30       	cpi	r24, 0x02	; 2
    15f8:	68 f4       	brcc	.+26     	; 0x1614 <Group6+0x76>
	{
		PORTB = BMASK;
    15fa:	8f ef       	ldi	r24, 0xFF	; 255
    15fc:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    15fe:	8f e3       	ldi	r24, 0x3F	; 63
    1600:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 1 & 2
    1602:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	e1 5a       	subi	r30, 0xA1	; 161
    160a:	fe 4f       	sbci	r31, 0xFE	; 254
    160c:	80 81       	ld	r24, Z
    160e:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1610:	87 e0       	ldi	r24, 0x07	; 7
    1612:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
    1614:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1618:	8b 50       	subi	r24, 0x0B	; 11
    161a:	83 30       	cpi	r24, 0x03	; 3
    161c:	68 f4       	brcc	.+26     	; 0x1638 <Group6+0x9a>
	{
		PORTB = BMASK;
    161e:	8f ef       	ldi	r24, 0xFF	; 255
    1620:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1622:	8f e3       	ldi	r24, 0x3F	; 63
    1624:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 0
    1626:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	e1 5a       	subi	r30, 0xA1	; 161
    162e:	fe 4f       	sbci	r31, 0xFE	; 254
    1630:	80 81       	ld	r24, Z
    1632:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1634:	87 e0       	ldi	r24, 0x07	; 7
    1636:	8e b9       	out	0x0e, r24	; 14
	}
	if( (17 > curLed) && (14 <= curLed))
    1638:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    163c:	8e 50       	subi	r24, 0x0E	; 14
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	68 f4       	brcc	.+26     	; 0x165c <Group6+0xbe>
	{
		PORTB = BMASK;
    1642:	8f ef       	ldi	r24, 0xFF	; 255
    1644:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1646:	8f e3       	ldi	r24, 0x3F	; 63
    1648:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 1 & 2 & 3
    164a:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	e1 5a       	subi	r30, 0xA1	; 161
    1652:	fe 4f       	sbci	r31, 0xFE	; 254
    1654:	80 81       	ld	r24, Z
    1656:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1658:	87 e0       	ldi	r24, 0x07	; 7
    165a:	8e b9       	out	0x0e, r24	; 14
	}
	if( (19 > curLed) && (17 <= curLed))	//E
    165c:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1660:	8f ee       	ldi	r24, 0xEF	; 239
    1662:	8e 0f       	add	r24, r30
    1664:	82 30       	cpi	r24, 0x02	; 2
    1666:	58 f4       	brcc	.+22     	; 0x167e <Group6+0xe0>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];		//group 4 & 6
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	e9 59       	subi	r30, 0x99	; 153
    166c:	fe 4f       	sbci	r31, 0xFE	; 254
    166e:	80 81       	ld	r24, Z
    1670:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1672:	8f e3       	ldi	r24, 0x3F	; 63
    1674:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    1676:	8f ef       	ldi	r24, 0xFF	; 255
    1678:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    167a:	87 e0       	ldi	r24, 0x07	; 7
    167c:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (19 <= curLed))	//F
    167e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1682:	83 51       	subi	r24, 0x13	; 19
    1684:	83 30       	cpi	r24, 0x03	; 3
    1686:	38 f4       	brcc	.+14     	; 0x1696 <Group6+0xf8>
	{
		PORTB = BMASK;//&LED_BANKB_TAB[curLed - 17];
    1688:	8f ef       	ldi	r24, 0xFF	; 255
    168a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    168c:	9f e3       	ldi	r25, 0x3F	; 63
    168e:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1690:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1692:	87 e0       	ldi	r24, 0x07	; 7
    1694:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
    1696:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    169a:	8a ee       	ldi	r24, 0xEA	; 234
    169c:	8e 0f       	add	r24, r30
    169e:	83 30       	cpi	r24, 0x03	; 3
    16a0:	58 f4       	brcc	.+22     	; 0x16b8 <Group6+0x11a>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];	//group 5
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	e9 59       	subi	r30, 0x99	; 153
    16a6:	fe 4f       	sbci	r31, 0xFE	; 254
    16a8:	80 81       	ld	r24, Z
    16aa:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    16ac:	8f e3       	ldi	r24, 0x3F	; 63
    16ae:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    16b0:	8f ef       	ldi	r24, 0xFF	; 255
    16b2:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    16b4:	87 e0       	ldi	r24, 0x07	; 7
    16b6:	8e b9       	out	0x0e, r24	; 14
	}
	curLed = ((curLed + 1)%NUMLED);
    16b8:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	69 e1       	ldi	r22, 0x19	; 25
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
    16c8:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
    16cc:	08 95       	ret

000016ce <Group7>:
}
void Group7(void)
{
	if(3 > curLed)		//A
    16ce:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    16d2:	83 30       	cpi	r24, 0x03	; 3
    16d4:	38 f4       	brcc	.+14     	; 0x16e4 <Group7+0x16>
	{
		PORTB = BMASK;
    16d6:	8f ef       	ldi	r24, 0xFF	; 255
    16d8:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;//&LED_BANKC_TAB[curLed];
    16da:	9f e3       	ldi	r25, 0x3F	; 63
    16dc:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    16de:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    16e0:	87 e0       	ldi	r24, 0x07	; 7
    16e2:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((5 > curLed)&&(3 <= curLed))	//B
    16e4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    16e8:	83 50       	subi	r24, 0x03	; 3
    16ea:	82 30       	cpi	r24, 0x02	; 2
    16ec:	38 f4       	brcc	.+14     	; 0x16fc <Group7+0x2e>
	{
		PORTB = BMASK;
    16ee:	8f ef       	ldi	r24, 0xFF	; 255
    16f0:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;//&LED_BANKC_TAB[curLed];
    16f2:	9f e3       	ldi	r25, 0x3F	; 63
    16f4:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    16f6:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    16f8:	87 e0       	ldi	r24, 0x07	; 7
    16fa:	8e b9       	out	0x0e, r24	; 14
	}
	if((6 > curLed)&&(5 <= curLed))	//B
    16fc:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1700:	85 30       	cpi	r24, 0x05	; 5
    1702:	69 f4       	brne	.+26     	; 0x171e <Group7+0x50>
	{
		PORTB = BMASK;
    1704:	9f ef       	ldi	r25, 0xFF	; 255
    1706:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];			//group 7
    1708:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	e0 59       	subi	r30, 0x90	; 144
    1710:	fe 4f       	sbci	r31, 0xFE	; 254
    1712:	80 81       	ld	r24, Z
    1714:	8f 73       	andi	r24, 0x3F	; 63
    1716:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    1718:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
    171a:	87 e0       	ldi	r24, 0x07	; 7
    171c:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(6 <= curLed)) //C
    171e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1722:	86 50       	subi	r24, 0x06	; 6
    1724:	83 30       	cpi	r24, 0x03	; 3
    1726:	68 f4       	brcc	.+26     	; 0x1742 <Group7+0x74>
	{
		PORTB = BMASK;
    1728:	8f ef       	ldi	r24, 0xFF	; 255
    172a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    172c:	9f e3       	ldi	r25, 0x3F	; 63
    172e:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1730:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];		//group 3 & 4 & 6
    1732:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	e6 5a       	subi	r30, 0xA6	; 166
    173a:	fe 4f       	sbci	r31, 0xFE	; 254
    173c:	80 81       	ld	r24, Z
    173e:	87 70       	andi	r24, 0x07	; 7
    1740:	8e b9       	out	0x0e, r24	; 14
	}
	
	
	if( (11 > curLed) && (9 <= curLed))
    1742:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1746:	89 50       	subi	r24, 0x09	; 9
    1748:	82 30       	cpi	r24, 0x02	; 2
    174a:	68 f4       	brcc	.+26     	; 0x1766 <Group7+0x98>
	{
		PORTB = BMASK;
    174c:	8f ef       	ldi	r24, 0xFF	; 255
    174e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1750:	8f e3       	ldi	r24, 0x3F	; 63
    1752:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 1 & 2
    1754:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	e1 5a       	subi	r30, 0xA1	; 161
    175c:	fe 4f       	sbci	r31, 0xFE	; 254
    175e:	80 81       	ld	r24, Z
    1760:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1762:	87 e0       	ldi	r24, 0x07	; 7
    1764:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
    1766:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    176a:	8b 50       	subi	r24, 0x0B	; 11
    176c:	83 30       	cpi	r24, 0x03	; 3
    176e:	68 f4       	brcc	.+26     	; 0x178a <Group7+0xbc>
	{
		PORTB = BMASK;
    1770:	8f ef       	ldi	r24, 0xFF	; 255
    1772:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1774:	8f e3       	ldi	r24, 0x3F	; 63
    1776:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 0
    1778:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	e1 5a       	subi	r30, 0xA1	; 161
    1780:	fe 4f       	sbci	r31, 0xFE	; 254
    1782:	80 81       	ld	r24, Z
    1784:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1786:	87 e0       	ldi	r24, 0x07	; 7
    1788:	8e b9       	out	0x0e, r24	; 14
	}
	if( (17 > curLed) && (14 <= curLed))
    178a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    178e:	8e 50       	subi	r24, 0x0E	; 14
    1790:	83 30       	cpi	r24, 0x03	; 3
    1792:	68 f4       	brcc	.+26     	; 0x17ae <Group7+0xe0>
	{
		PORTB = BMASK;
    1794:	8f ef       	ldi	r24, 0xFF	; 255
    1796:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1798:	8f e3       	ldi	r24, 0x3F	; 63
    179a:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 1 & 2 & 3
    179c:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	e1 5a       	subi	r30, 0xA1	; 161
    17a4:	fe 4f       	sbci	r31, 0xFE	; 254
    17a6:	80 81       	ld	r24, Z
    17a8:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    17aa:	87 e0       	ldi	r24, 0x07	; 7
    17ac:	8e b9       	out	0x0e, r24	; 14
	}
	if( (20 > curLed) && (17 <= curLed))	//E
    17ae:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    17b2:	8f ee       	ldi	r24, 0xEF	; 239
    17b4:	8e 0f       	add	r24, r30
    17b6:	83 30       	cpi	r24, 0x03	; 3
    17b8:	58 f4       	brcc	.+22     	; 0x17d0 <Group7+0x102>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];		//group 4 & 6 & 7
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	e9 59       	subi	r30, 0x99	; 153
    17be:	fe 4f       	sbci	r31, 0xFE	; 254
    17c0:	80 81       	ld	r24, Z
    17c2:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    17c4:	8f e3       	ldi	r24, 0x3F	; 63
    17c6:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    17c8:	8f ef       	ldi	r24, 0xFF	; 255
    17ca:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    17cc:	87 e0       	ldi	r24, 0x07	; 7
    17ce:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (20 <= curLed))	//F
    17d0:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    17d4:	84 51       	subi	r24, 0x14	; 20
    17d6:	82 30       	cpi	r24, 0x02	; 2
    17d8:	38 f4       	brcc	.+14     	; 0x17e8 <Group7+0x11a>
	{
		PORTB = BMASK;//&LED_BANKB_TAB[curLed - 17];
    17da:	8f ef       	ldi	r24, 0xFF	; 255
    17dc:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    17de:	9f e3       	ldi	r25, 0x3F	; 63
    17e0:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    17e2:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    17e4:	87 e0       	ldi	r24, 0x07	; 7
    17e6:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
    17e8:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    17ec:	8a ee       	ldi	r24, 0xEA	; 234
    17ee:	8e 0f       	add	r24, r30
    17f0:	83 30       	cpi	r24, 0x03	; 3
    17f2:	58 f4       	brcc	.+22     	; 0x180a <Group7+0x13c>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];	//group 5
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	e9 59       	subi	r30, 0x99	; 153
    17f8:	fe 4f       	sbci	r31, 0xFE	; 254
    17fa:	80 81       	ld	r24, Z
    17fc:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    17fe:	8f e3       	ldi	r24, 0x3F	; 63
    1800:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    1802:	8f ef       	ldi	r24, 0xFF	; 255
    1804:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1806:	87 e0       	ldi	r24, 0x07	; 7
    1808:	8e b9       	out	0x0e, r24	; 14
	}
	curLed = ((curLed + 1)%NUMLED);
    180a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	69 e1       	ldi	r22, 0x19	; 25
    1814:	70 e0       	ldi	r23, 0x00	; 0
    1816:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
    181a:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
    181e:	08 95       	ret

00001820 <Group8>:
}
void Group8(void)
{
	if(3 > curLed)		//A
    1820:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1824:	83 30       	cpi	r24, 0x03	; 3
    1826:	38 f4       	brcc	.+14     	; 0x1836 <Group8+0x16>
	{
		PORTB = BMASK;
    1828:	8f ef       	ldi	r24, 0xFF	; 255
    182a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;//&LED_BANKC_TAB[curLed];
    182c:	9f e3       	ldi	r25, 0x3F	; 63
    182e:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1830:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1832:	87 e0       	ldi	r24, 0x07	; 7
    1834:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((4 > curLed)&&(3 <= curLed))	//B
    1836:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    183a:	83 30       	cpi	r24, 0x03	; 3
    183c:	39 f4       	brne	.+14     	; 0x184c <Group8+0x2c>
	{
		PORTB = BMASK;
    183e:	8f ef       	ldi	r24, 0xFF	; 255
    1840:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;//&LED_BANKC_TAB[curLed];
    1842:	9f e3       	ldi	r25, 0x3F	; 63
    1844:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1846:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1848:	87 e0       	ldi	r24, 0x07	; 7
    184a:	8e b9       	out	0x0e, r24	; 14
	}
	if((6 > curLed)&&(4 <= curLed))	//B
    184c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1850:	84 50       	subi	r24, 0x04	; 4
    1852:	82 30       	cpi	r24, 0x02	; 2
    1854:	68 f4       	brcc	.+26     	; 0x1870 <Group8+0x50>
	{
		PORTB = BMASK;
    1856:	9f ef       	ldi	r25, 0xFF	; 255
    1858:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];			//group 7 & 8
    185a:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	e0 59       	subi	r30, 0x90	; 144
    1862:	fe 4f       	sbci	r31, 0xFE	; 254
    1864:	80 81       	ld	r24, Z
    1866:	8f 73       	andi	r24, 0x3F	; 63
    1868:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    186a:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
    186c:	87 e0       	ldi	r24, 0x07	; 7
    186e:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(6 <= curLed)) //C
    1870:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1874:	86 50       	subi	r24, 0x06	; 6
    1876:	83 30       	cpi	r24, 0x03	; 3
    1878:	68 f4       	brcc	.+26     	; 0x1894 <Group8+0x74>
	{
		PORTB = BMASK;
    187a:	8f ef       	ldi	r24, 0xFF	; 255
    187c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    187e:	9f e3       	ldi	r25, 0x3F	; 63
    1880:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1882:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];		//group 3 & 4 & 6
    1884:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	e6 5a       	subi	r30, 0xA6	; 166
    188c:	fe 4f       	sbci	r31, 0xFE	; 254
    188e:	80 81       	ld	r24, Z
    1890:	87 70       	andi	r24, 0x07	; 7
    1892:	8e b9       	out	0x0e, r24	; 14
	}
	
	
	if( (11 > curLed) && (9 <= curLed))
    1894:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1898:	89 50       	subi	r24, 0x09	; 9
    189a:	82 30       	cpi	r24, 0x02	; 2
    189c:	68 f4       	brcc	.+26     	; 0x18b8 <Group8+0x98>
	{
		PORTB = BMASK;
    189e:	8f ef       	ldi	r24, 0xFF	; 255
    18a0:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    18a2:	8f e3       	ldi	r24, 0x3F	; 63
    18a4:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 1 & 2
    18a6:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	e1 5a       	subi	r30, 0xA1	; 161
    18ae:	fe 4f       	sbci	r31, 0xFE	; 254
    18b0:	80 81       	ld	r24, Z
    18b2:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    18b4:	87 e0       	ldi	r24, 0x07	; 7
    18b6:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
    18b8:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    18bc:	8b 50       	subi	r24, 0x0B	; 11
    18be:	83 30       	cpi	r24, 0x03	; 3
    18c0:	68 f4       	brcc	.+26     	; 0x18dc <Group8+0xbc>
	{
		PORTB = BMASK;
    18c2:	8f ef       	ldi	r24, 0xFF	; 255
    18c4:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    18c6:	8f e3       	ldi	r24, 0x3F	; 63
    18c8:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 0
    18ca:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	e1 5a       	subi	r30, 0xA1	; 161
    18d2:	fe 4f       	sbci	r31, 0xFE	; 254
    18d4:	80 81       	ld	r24, Z
    18d6:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    18d8:	87 e0       	ldi	r24, 0x07	; 7
    18da:	8e b9       	out	0x0e, r24	; 14
	}
	if( (17 > curLed) && (14 <= curLed))
    18dc:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    18e0:	8e 50       	subi	r24, 0x0E	; 14
    18e2:	83 30       	cpi	r24, 0x03	; 3
    18e4:	68 f4       	brcc	.+26     	; 0x1900 <Group8+0xe0>
	{
		PORTB = BMASK;
    18e6:	8f ef       	ldi	r24, 0xFF	; 255
    18e8:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    18ea:	8f e3       	ldi	r24, 0x3F	; 63
    18ec:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 1 & 2 & 3
    18ee:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	e1 5a       	subi	r30, 0xA1	; 161
    18f6:	fe 4f       	sbci	r31, 0xFE	; 254
    18f8:	80 81       	ld	r24, Z
    18fa:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    18fc:	87 e0       	ldi	r24, 0x07	; 7
    18fe:	8e b9       	out	0x0e, r24	; 14
	}
	if( (21 > curLed) && (17 <= curLed))	//E
    1900:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1904:	8f ee       	ldi	r24, 0xEF	; 239
    1906:	8e 0f       	add	r24, r30
    1908:	84 30       	cpi	r24, 0x04	; 4
    190a:	58 f4       	brcc	.+22     	; 0x1922 <Group8+0x102>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];		//group 4 & 6 & 7 & 8
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	e9 59       	subi	r30, 0x99	; 153
    1910:	fe 4f       	sbci	r31, 0xFE	; 254
    1912:	80 81       	ld	r24, Z
    1914:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1916:	8f e3       	ldi	r24, 0x3F	; 63
    1918:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    191a:	8f ef       	ldi	r24, 0xFF	; 255
    191c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    191e:	87 e0       	ldi	r24, 0x07	; 7
    1920:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (21 <= curLed))	//F
    1922:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1926:	85 31       	cpi	r24, 0x15	; 21
    1928:	39 f4       	brne	.+14     	; 0x1938 <Group8+0x118>
	{
		PORTB = BMASK;//&LED_BANKB_TAB[curLed - 17];
    192a:	8f ef       	ldi	r24, 0xFF	; 255
    192c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    192e:	9f e3       	ldi	r25, 0x3F	; 63
    1930:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1932:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1934:	87 e0       	ldi	r24, 0x07	; 7
    1936:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
    1938:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    193c:	8a ee       	ldi	r24, 0xEA	; 234
    193e:	8e 0f       	add	r24, r30
    1940:	83 30       	cpi	r24, 0x03	; 3
    1942:	58 f4       	brcc	.+22     	; 0x195a <Group8+0x13a>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];	//group 5
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	e9 59       	subi	r30, 0x99	; 153
    1948:	fe 4f       	sbci	r31, 0xFE	; 254
    194a:	80 81       	ld	r24, Z
    194c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    194e:	8f e3       	ldi	r24, 0x3F	; 63
    1950:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    1952:	8f ef       	ldi	r24, 0xFF	; 255
    1954:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1956:	87 e0       	ldi	r24, 0x07	; 7
    1958:	8e b9       	out	0x0e, r24	; 14
	}
	curLed = ((curLed + 1)%NUMLED);
    195a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	01 96       	adiw	r24, 0x01	; 1
    1962:	69 e1       	ldi	r22, 0x19	; 25
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
    196a:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
    196e:	08 95       	ret

00001970 <Group9>:
}
void Group9(void)
{
	if(3 > curLed)		//A
    1970:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1974:	83 30       	cpi	r24, 0x03	; 3
    1976:	38 f4       	brcc	.+14     	; 0x1986 <Group9+0x16>
	{
		PORTB = BMASK;
    1978:	8f ef       	ldi	r24, 0xFF	; 255
    197a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;//&LED_BANKC_TAB[curLed];
    197c:	9f e3       	ldi	r25, 0x3F	; 63
    197e:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1980:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1982:	87 e0       	ldi	r24, 0x07	; 7
    1984:	8e b9       	out	0x0e, r24	; 14
	}
	
	
	if((6 > curLed)&&(3 <= curLed))	//B
    1986:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    198a:	83 50       	subi	r24, 0x03	; 3
    198c:	83 30       	cpi	r24, 0x03	; 3
    198e:	68 f4       	brcc	.+26     	; 0x19aa <Group9+0x3a>
	{
		PORTB = BMASK;
    1990:	9f ef       	ldi	r25, 0xFF	; 255
    1992:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];			//group 7 & 8 & 9
    1994:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	e0 59       	subi	r30, 0x90	; 144
    199c:	fe 4f       	sbci	r31, 0xFE	; 254
    199e:	80 81       	ld	r24, Z
    19a0:	8f 73       	andi	r24, 0x3F	; 63
    19a2:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    19a4:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
    19a6:	87 e0       	ldi	r24, 0x07	; 7
    19a8:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(6 <= curLed)) //C
    19aa:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    19ae:	86 50       	subi	r24, 0x06	; 6
    19b0:	83 30       	cpi	r24, 0x03	; 3
    19b2:	68 f4       	brcc	.+26     	; 0x19ce <Group9+0x5e>
	{
		PORTB = BMASK;
    19b4:	8f ef       	ldi	r24, 0xFF	; 255
    19b6:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    19b8:	9f e3       	ldi	r25, 0x3F	; 63
    19ba:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    19bc:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];		//group 3 & 4 & 6
    19be:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	e6 5a       	subi	r30, 0xA6	; 166
    19c6:	fe 4f       	sbci	r31, 0xFE	; 254
    19c8:	80 81       	ld	r24, Z
    19ca:	87 70       	andi	r24, 0x07	; 7
    19cc:	8e b9       	out	0x0e, r24	; 14
	}
	
	
	if( (11 > curLed) && (9 <= curLed))
    19ce:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    19d2:	89 50       	subi	r24, 0x09	; 9
    19d4:	82 30       	cpi	r24, 0x02	; 2
    19d6:	68 f4       	brcc	.+26     	; 0x19f2 <Group9+0x82>
	{
		PORTB = BMASK;
    19d8:	8f ef       	ldi	r24, 0xFF	; 255
    19da:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    19dc:	8f e3       	ldi	r24, 0x3F	; 63
    19de:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 1 & 2
    19e0:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	e1 5a       	subi	r30, 0xA1	; 161
    19e8:	fe 4f       	sbci	r31, 0xFE	; 254
    19ea:	80 81       	ld	r24, Z
    19ec:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    19ee:	87 e0       	ldi	r24, 0x07	; 7
    19f0:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
    19f2:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    19f6:	8b 50       	subi	r24, 0x0B	; 11
    19f8:	83 30       	cpi	r24, 0x03	; 3
    19fa:	68 f4       	brcc	.+26     	; 0x1a16 <Group9+0xa6>
	{
		PORTB = BMASK;
    19fc:	8f ef       	ldi	r24, 0xFF	; 255
    19fe:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1a00:	8f e3       	ldi	r24, 0x3F	; 63
    1a02:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 0
    1a04:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	e1 5a       	subi	r30, 0xA1	; 161
    1a0c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a0e:	80 81       	ld	r24, Z
    1a10:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1a12:	87 e0       	ldi	r24, 0x07	; 7
    1a14:	8e b9       	out	0x0e, r24	; 14
	}
	if( (17 > curLed) && (14 <= curLed))
    1a16:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1a1a:	8e 50       	subi	r24, 0x0E	; 14
    1a1c:	83 30       	cpi	r24, 0x03	; 3
    1a1e:	68 f4       	brcc	.+26     	; 0x1a3a <Group9+0xca>
	{
		PORTB = BMASK;
    1a20:	8f ef       	ldi	r24, 0xFF	; 255
    1a22:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1a24:	8f e3       	ldi	r24, 0x3F	; 63
    1a26:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 1 & 2 & 3
    1a28:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	e1 5a       	subi	r30, 0xA1	; 161
    1a30:	fe 4f       	sbci	r31, 0xFE	; 254
    1a32:	80 81       	ld	r24, Z
    1a34:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1a36:	87 e0       	ldi	r24, 0x07	; 7
    1a38:	8e b9       	out	0x0e, r24	; 14
	}
	if( (22 > curLed) && (17 <= curLed))	//E
    1a3a:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1a3e:	8f ee       	ldi	r24, 0xEF	; 239
    1a40:	8e 0f       	add	r24, r30
    1a42:	85 30       	cpi	r24, 0x05	; 5
    1a44:	58 f4       	brcc	.+22     	; 0x1a5c <Group9+0xec>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];		//group 4 & 6 & 7 & 8 & 9
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	e9 59       	subi	r30, 0x99	; 153
    1a4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a4c:	80 81       	ld	r24, Z
    1a4e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1a50:	8f e3       	ldi	r24, 0x3F	; 63
    1a52:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    1a54:	8f ef       	ldi	r24, 0xFF	; 255
    1a56:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1a58:	87 e0       	ldi	r24, 0x07	; 7
    1a5a:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
    1a5c:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1a60:	8a ee       	ldi	r24, 0xEA	; 234
    1a62:	8e 0f       	add	r24, r30
    1a64:	83 30       	cpi	r24, 0x03	; 3
    1a66:	58 f4       	brcc	.+22     	; 0x1a7e <Group9+0x10e>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];	//group 5
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	e9 59       	subi	r30, 0x99	; 153
    1a6c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a6e:	80 81       	ld	r24, Z
    1a70:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1a72:	8f e3       	ldi	r24, 0x3F	; 63
    1a74:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    1a76:	8f ef       	ldi	r24, 0xFF	; 255
    1a78:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1a7a:	87 e0       	ldi	r24, 0x07	; 7
    1a7c:	8e b9       	out	0x0e, r24	; 14
	}
	curLed = ((curLed + 1)%NUMLED);
    1a7e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	01 96       	adiw	r24, 0x01	; 1
    1a86:	69 e1       	ldi	r22, 0x19	; 25
    1a88:	70 e0       	ldi	r23, 0x00	; 0
    1a8a:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
    1a8e:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
    1a92:	08 95       	ret

00001a94 <Group10>:
}
void Group10(void)
{
	if(3 > curLed)		//A
    1a94:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1a98:	83 30       	cpi	r24, 0x03	; 3
    1a9a:	68 f4       	brcc	.+26     	; 0x1ab6 <Group10+0x22>
	{
		PORTB = BMASK;
    1a9c:	9f ef       	ldi	r25, 0xFF	; 255
    1a9e:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];			//group 10
    1aa0:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	e0 59       	subi	r30, 0x90	; 144
    1aa8:	fe 4f       	sbci	r31, 0xFE	; 254
    1aaa:	80 81       	ld	r24, Z
    1aac:	8f 73       	andi	r24, 0x3F	; 63
    1aae:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    1ab0:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
    1ab2:	87 e0       	ldi	r24, 0x07	; 7
    1ab4:	8e b9       	out	0x0e, r24	; 14
	}
	
	
	if((6 > curLed)&&(3 <= curLed))	//B
    1ab6:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1aba:	83 50       	subi	r24, 0x03	; 3
    1abc:	83 30       	cpi	r24, 0x03	; 3
    1abe:	68 f4       	brcc	.+26     	; 0x1ada <Group10+0x46>
	{
		PORTB = BMASK;
    1ac0:	9f ef       	ldi	r25, 0xFF	; 255
    1ac2:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];			//group 7 & 8 & 9
    1ac4:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	e0 59       	subi	r30, 0x90	; 144
    1acc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ace:	80 81       	ld	r24, Z
    1ad0:	8f 73       	andi	r24, 0x3F	; 63
    1ad2:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    1ad4:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
    1ad6:	87 e0       	ldi	r24, 0x07	; 7
    1ad8:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(6 <= curLed)) //C
    1ada:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1ade:	86 50       	subi	r24, 0x06	; 6
    1ae0:	83 30       	cpi	r24, 0x03	; 3
    1ae2:	68 f4       	brcc	.+26     	; 0x1afe <Group10+0x6a>
	{
		PORTB = BMASK;
    1ae4:	8f ef       	ldi	r24, 0xFF	; 255
    1ae6:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1ae8:	9f e3       	ldi	r25, 0x3F	; 63
    1aea:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1aec:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];		//group 3 & 4 & 6
    1aee:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	e6 5a       	subi	r30, 0xA6	; 166
    1af6:	fe 4f       	sbci	r31, 0xFE	; 254
    1af8:	80 81       	ld	r24, Z
    1afa:	87 70       	andi	r24, 0x07	; 7
    1afc:	8e b9       	out	0x0e, r24	; 14
	}
	
	
	if( (11 > curLed) && (9 <= curLed))
    1afe:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1b02:	89 50       	subi	r24, 0x09	; 9
    1b04:	82 30       	cpi	r24, 0x02	; 2
    1b06:	68 f4       	brcc	.+26     	; 0x1b22 <Group10+0x8e>
	{
		PORTB = BMASK;
    1b08:	8f ef       	ldi	r24, 0xFF	; 255
    1b0a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1b0c:	8f e3       	ldi	r24, 0x3F	; 63
    1b0e:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 1 & 2
    1b10:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	e1 5a       	subi	r30, 0xA1	; 161
    1b18:	fe 4f       	sbci	r31, 0xFE	; 254
    1b1a:	80 81       	ld	r24, Z
    1b1c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1b1e:	87 e0       	ldi	r24, 0x07	; 7
    1b20:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
    1b22:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1b26:	8b 50       	subi	r24, 0x0B	; 11
    1b28:	83 30       	cpi	r24, 0x03	; 3
    1b2a:	68 f4       	brcc	.+26     	; 0x1b46 <Group10+0xb2>
	{
		PORTB = BMASK;
    1b2c:	8f ef       	ldi	r24, 0xFF	; 255
    1b2e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1b30:	8f e3       	ldi	r24, 0x3F	; 63
    1b32:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 0
    1b34:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	e1 5a       	subi	r30, 0xA1	; 161
    1b3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b3e:	80 81       	ld	r24, Z
    1b40:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1b42:	87 e0       	ldi	r24, 0x07	; 7
    1b44:	8e b9       	out	0x0e, r24	; 14
	}
	if( (17 > curLed) && (14 <= curLed))
    1b46:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1b4a:	8e 50       	subi	r24, 0x0E	; 14
    1b4c:	83 30       	cpi	r24, 0x03	; 3
    1b4e:	68 f4       	brcc	.+26     	; 0x1b6a <Group10+0xd6>
	{
		PORTB = BMASK;
    1b50:	8f ef       	ldi	r24, 0xFF	; 255
    1b52:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1b54:	8f e3       	ldi	r24, 0x3F	; 63
    1b56:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];		//group 1 & 2 & 3
    1b58:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	e1 5a       	subi	r30, 0xA1	; 161
    1b60:	fe 4f       	sbci	r31, 0xFE	; 254
    1b62:	80 81       	ld	r24, Z
    1b64:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1b66:	87 e0       	ldi	r24, 0x07	; 7
    1b68:	8e b9       	out	0x0e, r24	; 14
	}
	if( (22 > curLed) && (17 <= curLed))	//E
    1b6a:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1b6e:	8f ee       	ldi	r24, 0xEF	; 239
    1b70:	8e 0f       	add	r24, r30
    1b72:	85 30       	cpi	r24, 0x05	; 5
    1b74:	58 f4       	brcc	.+22     	; 0x1b8c <Group10+0xf8>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];		//group 4 & 6 & 7 & 8 & 9
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	e9 59       	subi	r30, 0x99	; 153
    1b7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b7c:	80 81       	ld	r24, Z
    1b7e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1b80:	8f e3       	ldi	r24, 0x3F	; 63
    1b82:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    1b84:	8f ef       	ldi	r24, 0xFF	; 255
    1b86:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1b88:	87 e0       	ldi	r24, 0x07	; 7
    1b8a:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
    1b8c:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1b90:	8a ee       	ldi	r24, 0xEA	; 234
    1b92:	8e 0f       	add	r24, r30
    1b94:	83 30       	cpi	r24, 0x03	; 3
    1b96:	58 f4       	brcc	.+22     	; 0x1bae <Group10+0x11a>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];	//group 5
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	e9 59       	subi	r30, 0x99	; 153
    1b9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b9e:	80 81       	ld	r24, Z
    1ba0:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1ba2:	8f e3       	ldi	r24, 0x3F	; 63
    1ba4:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    1ba6:	8f ef       	ldi	r24, 0xFF	; 255
    1ba8:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1baa:	87 e0       	ldi	r24, 0x07	; 7
    1bac:	8e b9       	out	0x0e, r24	; 14
	}
	curLed = ((curLed + 1)%NUMLED);
    1bae:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	01 96       	adiw	r24, 0x01	; 1
    1bb6:	69 e1       	ldi	r22, 0x19	; 25
    1bb8:	70 e0       	ldi	r23, 0x00	; 0
    1bba:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <__divmodhi4>
    1bbe:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
    1bc2:	08 95       	ret

00001bc4 <NewGameAnimationNextLed>:
}
#endif

void NewGameAnimationNextLed(void)
{
	if(6 > curLed)
    1bc4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1bc8:	86 30       	cpi	r24, 0x06	; 6
    1bca:	68 f4       	brcc	.+26     	; 0x1be6 <NewGameAnimationNextLed+0x22>
	{
		PORTB = BMASK;
    1bcc:	9f ef       	ldi	r25, 0xFF	; 255
    1bce:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
    1bd0:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	e0 59       	subi	r30, 0x90	; 144
    1bd8:	fe 4f       	sbci	r31, 0xFE	; 254
    1bda:	80 81       	ld	r24, Z
    1bdc:	8f 73       	andi	r24, 0x3F	; 63
    1bde:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    1be0:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
    1be2:	87 e0       	ldi	r24, 0x07	; 7
    1be4:	8e b9       	out	0x0e, r24	; 14
	}
	if( (9 > curLed) && (6 <= curLed))	// 8 + 6
    1be6:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1bea:	86 50       	subi	r24, 0x06	; 6
    1bec:	83 30       	cpi	r24, 0x03	; 3
    1bee:	68 f4       	brcc	.+26     	; 0x1c0a <NewGameAnimationNextLed+0x46>
	{
		PORTB = BMASK;
    1bf0:	8f ef       	ldi	r24, 0xFF	; 255
    1bf2:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1bf4:	9f e3       	ldi	r25, 0x3F	; 63
    1bf6:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    1bf8:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
    1bfa:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	e6 5a       	subi	r30, 0xA6	; 166
    1c02:	fe 4f       	sbci	r31, 0xFE	; 254
    1c04:	80 81       	ld	r24, Z
    1c06:	87 70       	andi	r24, 0x07	; 7
    1c08:	8e b9       	out	0x0e, r24	; 14
	}
	if( (17 > curLed) && (9 <= curLed))
    1c0a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1c0e:	89 50       	subi	r24, 0x09	; 9
    1c10:	88 30       	cpi	r24, 0x08	; 8
    1c12:	68 f4       	brcc	.+26     	; 0x1c2e <NewGameAnimationNextLed+0x6a>
	{
		PORTB = BMASK;
    1c14:	8f ef       	ldi	r24, 0xFF	; 255
    1c16:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1c18:	8f e3       	ldi	r24, 0x3F	; 63
    1c1a:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
    1c1c:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	e1 5a       	subi	r30, 0xA1	; 161
    1c24:	fe 4f       	sbci	r31, 0xFE	; 254
    1c26:	80 81       	ld	r24, Z
    1c28:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1c2a:	87 e0       	ldi	r24, 0x07	; 7
    1c2c:	8e b9       	out	0x0e, r24	; 14
	}
	if( (25 > curLed) && (17 <= curLed))
    1c2e:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <curLed>
    1c32:	8f ee       	ldi	r24, 0xEF	; 239
    1c34:	8e 0f       	add	r24, r30
    1c36:	88 30       	cpi	r24, 0x08	; 8
    1c38:	58 f4       	brcc	.+22     	; 0x1c50 <NewGameAnimationNextLed+0x8c>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	e9 59       	subi	r30, 0x99	; 153
    1c3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c40:	80 81       	ld	r24, Z
    1c42:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1c44:	8f e3       	ldi	r24, 0x3F	; 63
    1c46:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    1c48:	8f ef       	ldi	r24, 0xFF	; 255
    1c4a:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    1c4c:	87 e0       	ldi	r24, 0x07	; 7
    1c4e:	8e b9       	out	0x0e, r24	; 14
	}
	curLed -= 1;
    1c50:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    1c54:	81 50       	subi	r24, 0x01	; 1
    1c56:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
	if(curLed > 22)
    1c5a:	87 31       	cpi	r24, 0x17	; 23
    1c5c:	48 f0       	brcs	.+18     	; 0x1c70 <NewGameAnimationNextLed+0xac>
	{
		curLed = 21;
    1c5e:	85 e1       	ldi	r24, 0x15	; 21
    1c60:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
		wrappedAround++;
    1c64:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end>
    1c68:	8f 5f       	subi	r24, 0xFF	; 255
    1c6a:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__data_end>
    1c6e:	08 95       	ret
		
	}
	if((curLed == 1))// && wrappedAround)
    1c70:	81 30       	cpi	r24, 0x01	; 1
    1c72:	31 f4       	brne	.+12     	; 0x1c80 <NewGameAnimationNextLed+0xbc>
	{
		ledMode = NORMALMODE;
    1c74:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
		curLedWhenPressed = 1;
    1c78:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <curLedWhenPressed>
		loopFlag = 1;
    1c7c:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <loopFlag>
    1c80:	08 95       	ret

00001c82 <isrSwitchCase>:

#endif /* ISR_SWITCHCASE_H_ */

void isrSwitchCase(void)
{
	switch(ledMode)
    1c82:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <ledMode>
    1c86:	8e 2f       	mov	r24, r30
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	31 97       	sbiw	r30, 0x01	; 1
    1c8e:	ea 31       	cpi	r30, 0x1A	; 26
    1c90:	f1 05       	cpc	r31, r1
    1c92:	08 f0       	brcs	.+2      	; 0x1c96 <isrSwitchCase+0x14>
    1c94:	84 c0       	rjmp	.+264    	; 0x1d9e <isrSwitchCase+0x11c>
    1c96:	e6 5a       	subi	r30, 0xA6	; 166
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	0c 94 e1 1f 	jmp	0x3fc2	; 0x3fc2 <__tablejump2__>
	{
		case 1://NORMALMODE
		
		#if(DirectionTricking == 0)
		if(GAME_SPEED == cScaler)	//150 for visual test
    1c9e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1ca2:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <cScaler>
    1ca6:	98 13       	cpse	r25, r24
    1ca8:	04 c0       	rjmp	.+8      	; 0x1cb2 <isrSwitchCase+0x30>
		{
			NextLed();
    1caa:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <NextLed>
			cScaler = 0;
    1cae:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <cScaler>
			DetermineNewRandom();
			direction^=0x01;
		}
		#endif
		
		delayScaler++;
    1cb2:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <delayScaler>
    1cb6:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <delayScaler+0x1>
    1cba:	01 96       	adiw	r24, 0x01	; 1
    1cbc:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <delayScaler+0x1>
    1cc0:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <delayScaler>
		cScaler++;
    1cc4:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <cScaler>
    1cc8:	8f 5f       	subi	r24, 0xFF	; 255
    1cca:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <cScaler>
		break;
    1cce:	08 95       	ret
		
		case 2://PAUSEDMODE:
		delayScaler++;
    1cd0:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <delayScaler>
    1cd4:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <delayScaler+0x1>
    1cd8:	01 96       	adiw	r24, 0x01	; 1
    1cda:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <delayScaler+0x1>
    1cde:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <delayScaler>
		if(DELAY_SPEED == delayScaler)
    1ce2:	88 3e       	cpi	r24, 0xE8	; 232
    1ce4:	93 40       	sbci	r25, 0x03	; 3
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <isrSwitchCase+0x68>
    1ce8:	5a c0       	rjmp	.+180    	; 0x1d9e <isrSwitchCase+0x11c>
		{
			ledMode = 1;//NORMALMODE;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
			delayScaler = 0;
    1cf0:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <delayScaler+0x1>
    1cf4:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <delayScaler>
    1cf8:	08 95       	ret
		}
		break;
		
		case DISPLAY0:
		Next0();
    1cfa:	0e 94 4c 01 	call	0x298	; 0x298 <Next0>
		break;
    1cfe:	08 95       	ret
		
		case DISPLAY1:
		Next1();
    1d00:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Next1>
		break;
    1d04:	08 95       	ret
		
		case DISPLAY2:
		Next2();
    1d06:	0e 94 42 02 	call	0x484	; 0x484 <Next2>
		break;
    1d0a:	08 95       	ret
		
		case DISPLAY3:
		Next3();
    1d0c:	0e 94 c2 02 	call	0x584	; 0x584 <Next3>
		
		break;
    1d10:	08 95       	ret
		
		case DISPLAY4:
		Next4();
    1d12:	0e 94 48 03 	call	0x690	; 0x690 <Next4>
		break;
    1d16:	08 95       	ret
		
		case DISPLAY5:
		Next5();
    1d18:	0e 94 bc 03 	call	0x778	; 0x778 <Next5>
		break;
    1d1c:	08 95       	ret
		
		case DISPLAY6:
		Next6();
    1d1e:	0e 94 30 04 	call	0x860	; 0x860 <Next6>
		break;
    1d22:	08 95       	ret
		
		case DISPLAY7:
		Next7();
    1d24:	0e 94 c2 04 	call	0x984	; 0x984 <Next7>
		break;
    1d28:	08 95       	ret
		
		case DISPLAY8:
		Next8();
    1d2a:	0e 94 25 05 	call	0xa4a	; 0xa4a <Next8>
		break;
    1d2e:	08 95       	ret
		
		case DISPLAY9:
		Next9();
    1d30:	0e 94 da 05 	call	0xbb4	; 0xbb4 <Next9>
		break;
    1d34:	08 95       	ret
		
		case LEDSOFF:
		NoLeds();
    1d36:	0e 94 24 07 	call	0xe48	; 0xe48 <NoLeds>
		break;
    1d3a:	08 95       	ret
		
		case NEWGAMEANIMATE:
		//NewGameAnimationNextLed();
		if(ANIMATION_SPEED == cScaler)	//150 for visual test
    1d3c:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <cScaler>
    1d40:	8f 30       	cpi	r24, 0x0F	; 15
    1d42:	21 f4       	brne	.+8      	; 0x1d4c <isrSwitchCase+0xca>
		{
			NewGameAnimationNextLed();
    1d44:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <NewGameAnimationNextLed>
			cScaler = 0;
    1d48:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <cScaler>
		}
		cScaler++;
    1d4c:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <cScaler>
    1d50:	8f 5f       	subi	r24, 0xFF	; 255
    1d52:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <cScaler>
		
		break;
    1d56:	08 95       	ret
		
		case DISPLAYX:
		//delayScaler++;
		NextX();
    1d58:	0e 94 71 06 	call	0xce2	; 0xce2 <NextX>
		break;
    1d5c:	08 95       	ret
		
		case G0:
		Group0();
    1d5e:	0e 94 2c 07 	call	0xe58	; 0xe58 <Group0>
		break;
    1d62:	08 95       	ret
		
		case G1:
		Group1();
    1d64:	0e 94 b2 07 	call	0xf64	; 0xf64 <Group1>
		break;
    1d68:	08 95       	ret
		
		case G2:
		Group2();
    1d6a:	0e 94 59 08 	call	0x10b2	; 0x10b2 <Group2>
		break;
    1d6e:	08 95       	ret
		
		case G3:
		Group3();
    1d70:	0e 94 f6 08 	call	0x11ec	; 0x11ec <Group3>
		break;
    1d74:	08 95       	ret
		
		case G4:
		Group4();
    1d76:	0e 94 98 09 	call	0x1330	; 0x1330 <Group4>
		break;
    1d7a:	08 95       	ret
		
		case G5:
		Group5();
    1d7c:	0e 94 31 0a 	call	0x1462	; 0x1462 <Group5>
		break;
    1d80:	08 95       	ret
		
		case G6:
		Group6();
    1d82:	0e 94 cf 0a 	call	0x159e	; 0x159e <Group6>
		break;
    1d86:	08 95       	ret
		
		case G7:
		Group7();
    1d88:	0e 94 67 0b 	call	0x16ce	; 0x16ce <Group7>
		break;
    1d8c:	08 95       	ret
		
		case G8:
		Group8();
    1d8e:	0e 94 10 0c 	call	0x1820	; 0x1820 <Group8>
		break;
    1d92:	08 95       	ret
		
		case G9:
		Group9();
    1d94:	0e 94 b8 0c 	call	0x1970	; 0x1970 <Group9>
		break;
    1d98:	08 95       	ret
		
		case G10:
		Group10();
    1d9a:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <Group10>
    1d9e:	08 95       	ret

00001da0 <init>:



void init(void)
{
	DDRD |= DMASK;
    1da0:	8a b1       	in	r24, 0x0a	; 10
    1da2:	8f ef       	ldi	r24, 0xFF	; 255
    1da4:	8a b9       	out	0x0a, r24	; 10
	DDRB |= BMASK;
    1da6:	94 b1       	in	r25, 0x04	; 4
    1da8:	84 b9       	out	0x04, r24	; 4
	DDRC |= CMASK;
    1daa:	97 b1       	in	r25, 0x07	; 7
    1dac:	9f 63       	ori	r25, 0x3F	; 63
    1dae:	97 b9       	out	0x07, r25	; 7
	DDRE |= EMASK;
    1db0:	9d b1       	in	r25, 0x0d	; 13
    1db2:	97 60       	ori	r25, 0x07	; 7
    1db4:	9d b9       	out	0x0d, r25	; 13
	
	PORTD |= DMASK;
    1db6:	9b b1       	in	r25, 0x0b	; 11
    1db8:	8b b9       	out	0x0b, r24	; 11
	PORTB |= BMASK;
    1dba:	95 b1       	in	r25, 0x05	; 5
    1dbc:	85 b9       	out	0x05, r24	; 5
	PORTC |= CMASK;
    1dbe:	88 b1       	in	r24, 0x08	; 8
    1dc0:	8f 63       	ori	r24, 0x3F	; 63
    1dc2:	88 b9       	out	0x08, r24	; 8
	PORTE |= EMASK;
    1dc4:	8e b1       	in	r24, 0x0e	; 14
    1dc6:	87 60       	ori	r24, 0x07	; 7
    1dc8:	8e b9       	out	0x0e, r24	; 14
	
	curLed = 0;
    1dca:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <curLed>
	score = 0;
    1dce:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <score>
	ledMode = NORMALMODE;
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
    1dd8:	08 95       	ret

00001dda <FillFromBottom>:
#if(FancyAnimations == 1)

void FillFromBottom(void)	// Animation fill from bottom...	Has to stay in this file because it uses delay...
{	
	uint8_t fillDelay = 30;
	ledMode = G0;
    1dda:	80 e1       	ldi	r24, 0x10	; 16
    1ddc:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1de0:	af e5       	ldi	r26, 0x5F	; 95
    1de2:	ba ee       	ldi	r27, 0xEA	; 234
    1de4:	11 97       	sbiw	r26, 0x01	; 1
    1de6:	f1 f7       	brne	.-4      	; 0x1de4 <FillFromBottom+0xa>
    1de8:	00 c0       	rjmp	.+0      	; 0x1dea <FillFromBottom+0x10>
    1dea:	00 00       	nop
	_delay_ms(fillDelay);
	ledMode = G1;
    1dec:	91 e1       	ldi	r25, 0x11	; 17
    1dee:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
    1df2:	ef e5       	ldi	r30, 0x5F	; 95
    1df4:	fa ee       	ldi	r31, 0xEA	; 234
    1df6:	31 97       	sbiw	r30, 0x01	; 1
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <FillFromBottom+0x1c>
    1dfa:	00 c0       	rjmp	.+0      	; 0x1dfc <FillFromBottom+0x22>
    1dfc:	00 00       	nop
	_delay_ms(fillDelay);
	ledMode = G2;
    1dfe:	22 e1       	ldi	r18, 0x12	; 18
    1e00:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
    1e04:	af e5       	ldi	r26, 0x5F	; 95
    1e06:	ba ee       	ldi	r27, 0xEA	; 234
    1e08:	11 97       	sbiw	r26, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <FillFromBottom+0x2e>
    1e0c:	00 c0       	rjmp	.+0      	; 0x1e0e <FillFromBottom+0x34>
    1e0e:	00 00       	nop
	_delay_ms(fillDelay);
	ledMode = G3;
    1e10:	33 e1       	ldi	r19, 0x13	; 19
    1e12:	30 93 8b 01 	sts	0x018B, r19	; 0x80018b <ledMode>
    1e16:	ef e5       	ldi	r30, 0x5F	; 95
    1e18:	fa ee       	ldi	r31, 0xEA	; 234
    1e1a:	31 97       	sbiw	r30, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <FillFromBottom+0x40>
    1e1e:	00 c0       	rjmp	.+0      	; 0x1e20 <FillFromBottom+0x46>
    1e20:	00 00       	nop
	_delay_ms(fillDelay);
	ledMode = G4;
    1e22:	44 e1       	ldi	r20, 0x14	; 20
    1e24:	40 93 8b 01 	sts	0x018B, r20	; 0x80018b <ledMode>
    1e28:	af e5       	ldi	r26, 0x5F	; 95
    1e2a:	ba ee       	ldi	r27, 0xEA	; 234
    1e2c:	11 97       	sbiw	r26, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <FillFromBottom+0x52>
    1e30:	00 c0       	rjmp	.+0      	; 0x1e32 <FillFromBottom+0x58>
    1e32:	00 00       	nop
	_delay_ms(fillDelay);
	ledMode = G5;
    1e34:	55 e1       	ldi	r21, 0x15	; 21
    1e36:	50 93 8b 01 	sts	0x018B, r21	; 0x80018b <ledMode>
    1e3a:	ef e5       	ldi	r30, 0x5F	; 95
    1e3c:	fa ee       	ldi	r31, 0xEA	; 234
    1e3e:	31 97       	sbiw	r30, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <FillFromBottom+0x64>
    1e42:	00 c0       	rjmp	.+0      	; 0x1e44 <FillFromBottom+0x6a>
    1e44:	00 00       	nop
	_delay_ms(fillDelay);
	ledMode = G6;
    1e46:	66 e1       	ldi	r22, 0x16	; 22
    1e48:	60 93 8b 01 	sts	0x018B, r22	; 0x80018b <ledMode>
    1e4c:	af e5       	ldi	r26, 0x5F	; 95
    1e4e:	ba ee       	ldi	r27, 0xEA	; 234
    1e50:	11 97       	sbiw	r26, 0x01	; 1
    1e52:	f1 f7       	brne	.-4      	; 0x1e50 <FillFromBottom+0x76>
    1e54:	00 c0       	rjmp	.+0      	; 0x1e56 <FillFromBottom+0x7c>
    1e56:	00 00       	nop
	_delay_ms(fillDelay);
	ledMode = G7;
    1e58:	77 e1       	ldi	r23, 0x17	; 23
    1e5a:	70 93 8b 01 	sts	0x018B, r23	; 0x80018b <ledMode>
    1e5e:	ef e5       	ldi	r30, 0x5F	; 95
    1e60:	fa ee       	ldi	r31, 0xEA	; 234
    1e62:	31 97       	sbiw	r30, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <FillFromBottom+0x88>
    1e66:	00 c0       	rjmp	.+0      	; 0x1e68 <FillFromBottom+0x8e>
    1e68:	00 00       	nop
	_delay_ms(fillDelay);
	ledMode = G8;
    1e6a:	e8 e1       	ldi	r30, 0x18	; 24
    1e6c:	e0 93 8b 01 	sts	0x018B, r30	; 0x80018b <ledMode>
    1e70:	af e5       	ldi	r26, 0x5F	; 95
    1e72:	ba ee       	ldi	r27, 0xEA	; 234
    1e74:	11 97       	sbiw	r26, 0x01	; 1
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <FillFromBottom+0x9a>
    1e78:	00 c0       	rjmp	.+0      	; 0x1e7a <FillFromBottom+0xa0>
    1e7a:	00 00       	nop
	_delay_ms(fillDelay);
	ledMode = G9;
    1e7c:	f9 e1       	ldi	r31, 0x19	; 25
    1e7e:	f0 93 8b 01 	sts	0x018B, r31	; 0x80018b <ledMode>
    1e82:	af e5       	ldi	r26, 0x5F	; 95
    1e84:	ba ee       	ldi	r27, 0xEA	; 234
    1e86:	11 97       	sbiw	r26, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <FillFromBottom+0xac>
    1e8a:	00 c0       	rjmp	.+0      	; 0x1e8c <FillFromBottom+0xb2>
    1e8c:	00 00       	nop
	_delay_ms(fillDelay);
	ledMode = G10;
    1e8e:	aa e1       	ldi	r26, 0x1A	; 26
    1e90:	a0 93 8b 01 	sts	0x018B, r26	; 0x80018b <ledMode>
    1e94:	af e5       	ldi	r26, 0x5F	; 95
    1e96:	ba ee       	ldi	r27, 0xEA	; 234
    1e98:	11 97       	sbiw	r26, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <FillFromBottom+0xbe>
    1e9c:	00 c0       	rjmp	.+0      	; 0x1e9e <FillFromBottom+0xc4>
    1e9e:	00 00       	nop
	_delay_ms(fillDelay);
	ledMode = G9;
    1ea0:	f0 93 8b 01 	sts	0x018B, r31	; 0x80018b <ledMode>
    1ea4:	af e5       	ldi	r26, 0x5F	; 95
    1ea6:	ba ee       	ldi	r27, 0xEA	; 234
    1ea8:	11 97       	sbiw	r26, 0x01	; 1
    1eaa:	f1 f7       	brne	.-4      	; 0x1ea8 <FillFromBottom+0xce>
    1eac:	00 c0       	rjmp	.+0      	; 0x1eae <FillFromBottom+0xd4>
    1eae:	00 00       	nop
	_delay_ms(fillDelay);
	ledMode = G8;
    1eb0:	e0 93 8b 01 	sts	0x018B, r30	; 0x80018b <ledMode>
    1eb4:	ef e5       	ldi	r30, 0x5F	; 95
    1eb6:	fa ee       	ldi	r31, 0xEA	; 234
    1eb8:	31 97       	sbiw	r30, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <FillFromBottom+0xde>
    1ebc:	00 c0       	rjmp	.+0      	; 0x1ebe <FillFromBottom+0xe4>
    1ebe:	00 00       	nop
	_delay_ms(fillDelay);
	ledMode = G7;
    1ec0:	70 93 8b 01 	sts	0x018B, r23	; 0x80018b <ledMode>
    1ec4:	af e5       	ldi	r26, 0x5F	; 95
    1ec6:	ba ee       	ldi	r27, 0xEA	; 234
    1ec8:	11 97       	sbiw	r26, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <FillFromBottom+0xee>
    1ecc:	00 c0       	rjmp	.+0      	; 0x1ece <FillFromBottom+0xf4>
    1ece:	00 00       	nop
	_delay_ms(fillDelay);
	ledMode = G6;
    1ed0:	60 93 8b 01 	sts	0x018B, r22	; 0x80018b <ledMode>
    1ed4:	ef e5       	ldi	r30, 0x5F	; 95
    1ed6:	fa ee       	ldi	r31, 0xEA	; 234
    1ed8:	31 97       	sbiw	r30, 0x01	; 1
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <FillFromBottom+0xfe>
    1edc:	00 c0       	rjmp	.+0      	; 0x1ede <FillFromBottom+0x104>
    1ede:	00 00       	nop
	_delay_ms(fillDelay);
	ledMode = G5;
    1ee0:	50 93 8b 01 	sts	0x018B, r21	; 0x80018b <ledMode>
    1ee4:	af e5       	ldi	r26, 0x5F	; 95
    1ee6:	ba ee       	ldi	r27, 0xEA	; 234
    1ee8:	11 97       	sbiw	r26, 0x01	; 1
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <FillFromBottom+0x10e>
    1eec:	00 c0       	rjmp	.+0      	; 0x1eee <FillFromBottom+0x114>
    1eee:	00 00       	nop
	_delay_ms(fillDelay);
	ledMode = G4;
    1ef0:	40 93 8b 01 	sts	0x018B, r20	; 0x80018b <ledMode>
    1ef4:	ef e5       	ldi	r30, 0x5F	; 95
    1ef6:	fa ee       	ldi	r31, 0xEA	; 234
    1ef8:	31 97       	sbiw	r30, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <FillFromBottom+0x11e>
    1efc:	00 c0       	rjmp	.+0      	; 0x1efe <FillFromBottom+0x124>
    1efe:	00 00       	nop
	_delay_ms(fillDelay);
	ledMode = G3;
    1f00:	30 93 8b 01 	sts	0x018B, r19	; 0x80018b <ledMode>
    1f04:	af e5       	ldi	r26, 0x5F	; 95
    1f06:	ba ee       	ldi	r27, 0xEA	; 234
    1f08:	11 97       	sbiw	r26, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <FillFromBottom+0x12e>
    1f0c:	00 c0       	rjmp	.+0      	; 0x1f0e <FillFromBottom+0x134>
    1f0e:	00 00       	nop
	_delay_ms(fillDelay);
	ledMode = G2;
    1f10:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
    1f14:	ef e5       	ldi	r30, 0x5F	; 95
    1f16:	fa ee       	ldi	r31, 0xEA	; 234
    1f18:	31 97       	sbiw	r30, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <FillFromBottom+0x13e>
    1f1c:	00 c0       	rjmp	.+0      	; 0x1f1e <FillFromBottom+0x144>
    1f1e:	00 00       	nop
	_delay_ms(fillDelay);
	ledMode = G1;
    1f20:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
    1f24:	af e5       	ldi	r26, 0x5F	; 95
    1f26:	ba ee       	ldi	r27, 0xEA	; 234
    1f28:	11 97       	sbiw	r26, 0x01	; 1
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <FillFromBottom+0x14e>
    1f2c:	00 c0       	rjmp	.+0      	; 0x1f2e <FillFromBottom+0x154>
    1f2e:	00 00       	nop
	_delay_ms(fillDelay);
	ledMode = G0;
    1f30:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
    1f34:	ef e5       	ldi	r30, 0x5F	; 95
    1f36:	fa ee       	ldi	r31, 0xEA	; 234
    1f38:	31 97       	sbiw	r30, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <FillFromBottom+0x15e>
    1f3c:	00 c0       	rjmp	.+0      	; 0x1f3e <FillFromBottom+0x164>
    1f3e:	00 00       	nop
    1f40:	08 95       	ret

00001f42 <NewGameAnimation>:
}

void NewGameAnimation(void)			// basically backwards NextLed() function!
{
	//curLed = 0;
	ClearLed();
    1f42:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <ClearLed>
	
	#if(FancyAnimations == 1)
	FillFromBottom();
    1f46:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <FillFromBottom>
	curLed = 13;
    1f4a:	8d e0       	ldi	r24, 0x0D	; 13
    1f4c:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <curLed>
	ledMode = NEWGAMEANIMATE;
    1f50:	8e e0       	ldi	r24, 0x0E	; 14
    1f52:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
    1f56:	08 95       	ret

00001f58 <ReportScore>:
#endif


void ReportScore(uint8_t S)			// Animation display score
{
	uint8_t hundreds = S/100;
    1f58:	49 e2       	ldi	r20, 0x29	; 41
    1f5a:	84 9f       	mul	r24, r20
    1f5c:	41 2d       	mov	r20, r1
    1f5e:	11 24       	eor	r1, r1
    1f60:	e4 2f       	mov	r30, r20
    1f62:	e2 95       	swap	r30
    1f64:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t remainder = S%100;
    1f66:	24 e6       	ldi	r18, 0x64	; 100
    1f68:	e2 9f       	mul	r30, r18
    1f6a:	80 19       	sub	r24, r0
    1f6c:	11 24       	eor	r1, r1
	uint8_t tens = remainder/10;
    1f6e:	4d ec       	ldi	r20, 0xCD	; 205
    1f70:	84 9f       	mul	r24, r20
    1f72:	41 2d       	mov	r20, r1
    1f74:	11 24       	eor	r1, r1
    1f76:	94 2f       	mov	r25, r20
    1f78:	96 95       	lsr	r25
    1f7a:	96 95       	lsr	r25
    1f7c:	96 95       	lsr	r25
	remainder = remainder%10;
    1f7e:	39 2f       	mov	r19, r25
    1f80:	33 0f       	add	r19, r19
    1f82:	23 2f       	mov	r18, r19
    1f84:	22 0f       	add	r18, r18
    1f86:	22 0f       	add	r18, r18
    1f88:	23 0f       	add	r18, r19
    1f8a:	82 1b       	sub	r24, r18
	uint8_t ones = remainder;
	if(0 != hundreds)
    1f8c:	ee 23       	and	r30, r30
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <ReportScore+0x3a>
    1f90:	cb c0       	rjmp	.+406    	; 0x2128 <ReportScore+0x1d0>
	{
		//ledMode = hundreds + 3;			//Definitions of ledModes for displaying digits is the digit value + 3...
		switch(hundreds)
    1f92:	4e 2f       	mov	r20, r30
    1f94:	50 e0       	ldi	r21, 0x00	; 0
    1f96:	fa 01       	movw	r30, r20
    1f98:	31 97       	sbiw	r30, 0x01	; 1
    1f9a:	e9 30       	cpi	r30, 0x09	; 9
    1f9c:	f1 05       	cpc	r31, r1
    1f9e:	40 f5       	brcc	.+80     	; 0x1ff0 <ReportScore+0x98>
    1fa0:	ec 58       	subi	r30, 0x8C	; 140
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	0c 94 e1 1f 	jmp	0x3fc2	; 0x3fc2 <__tablejump2__>
		{
			case 1:
				ledMode = DISPLAY1;
    1fa8:	24 e0       	ldi	r18, 0x04	; 4
    1faa:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
				break;
    1fae:	bf c0       	rjmp	.+382    	; 0x212e <ReportScore+0x1d6>
			case 2:
				ledMode = DISPLAY2;
    1fb0:	25 e0       	ldi	r18, 0x05	; 5
    1fb2:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
				break;
    1fb6:	bb c0       	rjmp	.+374    	; 0x212e <ReportScore+0x1d6>
			case 3:
				ledMode = DISPLAY3;
    1fb8:	26 e0       	ldi	r18, 0x06	; 6
    1fba:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
				break;
    1fbe:	b7 c0       	rjmp	.+366    	; 0x212e <ReportScore+0x1d6>
			case 4:
				ledMode = DISPLAY4;
    1fc0:	27 e0       	ldi	r18, 0x07	; 7
    1fc2:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
				break;
    1fc6:	b3 c0       	rjmp	.+358    	; 0x212e <ReportScore+0x1d6>
			case 5:
				ledMode	= DISPLAY5;
    1fc8:	28 e0       	ldi	r18, 0x08	; 8
    1fca:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
				break;
    1fce:	af c0       	rjmp	.+350    	; 0x212e <ReportScore+0x1d6>
			case 6:
				ledMode = DISPLAY6;
    1fd0:	29 e0       	ldi	r18, 0x09	; 9
    1fd2:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
				break;
    1fd6:	ab c0       	rjmp	.+342    	; 0x212e <ReportScore+0x1d6>
			case 7:
				ledMode = DISPLAY7;
    1fd8:	2a e0       	ldi	r18, 0x0A	; 10
    1fda:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
				break;
    1fde:	a7 c0       	rjmp	.+334    	; 0x212e <ReportScore+0x1d6>
			case 8:
				ledMode = DISPLAY8;
    1fe0:	2b e0       	ldi	r18, 0x0B	; 11
    1fe2:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
				break;
    1fe6:	a3 c0       	rjmp	.+326    	; 0x212e <ReportScore+0x1d6>
			case 9:
				ledMode = DISPLAY9;
    1fe8:	2c e0       	ldi	r18, 0x0C	; 12
    1fea:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
				break;
    1fee:	9f c0       	rjmp	.+318    	; 0x212e <ReportScore+0x1d6>
    1ff0:	3f ef       	ldi	r19, 0xFF	; 255
    1ff2:	43 ed       	ldi	r20, 0xD3	; 211
    1ff4:	20 e3       	ldi	r18, 0x30	; 48
    1ff6:	31 50       	subi	r19, 0x01	; 1
    1ff8:	40 40       	sbci	r20, 0x00	; 0
    1ffa:	20 40       	sbci	r18, 0x00	; 0
    1ffc:	e1 f7       	brne	.-8      	; 0x1ff6 <ReportScore+0x9e>
    1ffe:	00 c0       	rjmp	.+0      	; 0x2000 <ReportScore+0xa8>
    2000:	00 00       	nop
			default:
				//uh oh! Your score is probably really high dude!
				break;
		}
		_delay_ms(REPORT_SCORE_DELAY);
		ledMode = LEDSOFF; 
    2002:	2d e0       	ldi	r18, 0x0D	; 13
    2004:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
    2008:	3f ef       	ldi	r19, 0xFF	; 255
    200a:	44 e3       	ldi	r20, 0x34	; 52
    200c:	2c e0       	ldi	r18, 0x0C	; 12
    200e:	31 50       	subi	r19, 0x01	; 1
    2010:	40 40       	sbci	r20, 0x00	; 0
    2012:	20 40       	sbci	r18, 0x00	; 0
    2014:	e1 f7       	brne	.-8      	; 0x200e <ReportScore+0xb6>
    2016:	00 c0       	rjmp	.+0      	; 0x2018 <ReportScore+0xc0>
    2018:	00 00       	nop
		_delay_ms(REPORT_SCORE_DELAY_BETWEEN_DIGITS);
	}
	if(tens || hundreds)
    201a:	99 23       	and	r25, r25
    201c:	51 f0       	breq	.+20     	; 0x2032 <ReportScore+0xda>
	{
		switch(tens)
    201e:	49 2f       	mov	r20, r25
    2020:	50 e0       	ldi	r21, 0x00	; 0
    2022:	4a 30       	cpi	r20, 0x0A	; 10
    2024:	51 05       	cpc	r21, r1
    2026:	60 f5       	brcc	.+88     	; 0x2080 <ReportScore+0x128>
    2028:	fa 01       	movw	r30, r20
    202a:	e3 58       	subi	r30, 0x83	; 131
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	0c 94 e1 1f 	jmp	0x3fc2	; 0x3fc2 <__tablejump2__>
		{
			case 0:
				ledMode = DISPLAY0;
    2032:	93 e0       	ldi	r25, 0x03	; 3
    2034:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
				break;
    2038:	23 c0       	rjmp	.+70     	; 0x2080 <ReportScore+0x128>
			case 1:
				ledMode = DISPLAY1;
    203a:	94 e0       	ldi	r25, 0x04	; 4
    203c:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
				break;
    2040:	1f c0       	rjmp	.+62     	; 0x2080 <ReportScore+0x128>
			case 2:
				ledMode = DISPLAY2;
    2042:	95 e0       	ldi	r25, 0x05	; 5
    2044:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
				break;
    2048:	1b c0       	rjmp	.+54     	; 0x2080 <ReportScore+0x128>
			case 3:
				ledMode = DISPLAY3;
    204a:	96 e0       	ldi	r25, 0x06	; 6
    204c:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
				break;
    2050:	17 c0       	rjmp	.+46     	; 0x2080 <ReportScore+0x128>
			case 4:
				ledMode = DISPLAY4;
    2052:	97 e0       	ldi	r25, 0x07	; 7
    2054:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
				break;
    2058:	13 c0       	rjmp	.+38     	; 0x2080 <ReportScore+0x128>
			case 5:
				ledMode	= DISPLAY5;
    205a:	98 e0       	ldi	r25, 0x08	; 8
    205c:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
				break;
    2060:	0f c0       	rjmp	.+30     	; 0x2080 <ReportScore+0x128>
			case 6:
				ledMode = DISPLAY6;
    2062:	99 e0       	ldi	r25, 0x09	; 9
    2064:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
				break;
    2068:	0b c0       	rjmp	.+22     	; 0x2080 <ReportScore+0x128>
			case 7:
				ledMode = DISPLAY7;
    206a:	9a e0       	ldi	r25, 0x0A	; 10
    206c:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
				break;
    2070:	07 c0       	rjmp	.+14     	; 0x2080 <ReportScore+0x128>
			case 8:
				ledMode = DISPLAY8;
    2072:	9b e0       	ldi	r25, 0x0B	; 11
    2074:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
				break;
    2078:	03 c0       	rjmp	.+6      	; 0x2080 <ReportScore+0x128>
			case 9:
				ledMode = DISPLAY9;
    207a:	9c e0       	ldi	r25, 0x0C	; 12
    207c:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
    2080:	3f ef       	ldi	r19, 0xFF	; 255
    2082:	43 ed       	ldi	r20, 0xD3	; 211
    2084:	90 e3       	ldi	r25, 0x30	; 48
    2086:	31 50       	subi	r19, 0x01	; 1
    2088:	40 40       	sbci	r20, 0x00	; 0
    208a:	90 40       	sbci	r25, 0x00	; 0
    208c:	e1 f7       	brne	.-8      	; 0x2086 <ReportScore+0x12e>
    208e:	00 c0       	rjmp	.+0      	; 0x2090 <ReportScore+0x138>
    2090:	00 00       	nop
			default:
			//uh oh! Your score is probably really high dude!
			break;
		}
		_delay_ms(REPORT_SCORE_DELAY);
		ledMode = LEDSOFF;
    2092:	9d e0       	ldi	r25, 0x0D	; 13
    2094:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
    2098:	2f ef       	ldi	r18, 0xFF	; 255
    209a:	34 e3       	ldi	r19, 0x34	; 52
    209c:	4c e0       	ldi	r20, 0x0C	; 12
    209e:	21 50       	subi	r18, 0x01	; 1
    20a0:	30 40       	sbci	r19, 0x00	; 0
    20a2:	40 40       	sbci	r20, 0x00	; 0
    20a4:	e1 f7       	brne	.-8      	; 0x209e <ReportScore+0x146>
    20a6:	00 c0       	rjmp	.+0      	; 0x20a8 <ReportScore+0x150>
    20a8:	00 00       	nop
		_delay_ms(REPORT_SCORE_DELAY_BETWEEN_DIGITS);
	}
	
	
	
	switch(ones)
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	8a 30       	cpi	r24, 0x0A	; 10
    20ae:	91 05       	cpc	r25, r1
    20b0:	60 f5       	brcc	.+88     	; 0x210a <ReportScore+0x1b2>
    20b2:	fc 01       	movw	r30, r24
    20b4:	e9 57       	subi	r30, 0x79	; 121
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	0c 94 e1 1f 	jmp	0x3fc2	; 0x3fc2 <__tablejump2__>
	{
		case 0:
		ledMode = DISPLAY0;
    20bc:	83 e0       	ldi	r24, 0x03	; 3
    20be:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
		break;
    20c2:	23 c0       	rjmp	.+70     	; 0x210a <ReportScore+0x1b2>
		case 1:
		ledMode = DISPLAY1;
    20c4:	84 e0       	ldi	r24, 0x04	; 4
    20c6:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
		break;
    20ca:	1f c0       	rjmp	.+62     	; 0x210a <ReportScore+0x1b2>
		case 2:
		ledMode = DISPLAY2;
    20cc:	85 e0       	ldi	r24, 0x05	; 5
    20ce:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
		break;
    20d2:	1b c0       	rjmp	.+54     	; 0x210a <ReportScore+0x1b2>
		case 3:
		ledMode = DISPLAY3;
    20d4:	86 e0       	ldi	r24, 0x06	; 6
    20d6:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
		break;
    20da:	17 c0       	rjmp	.+46     	; 0x210a <ReportScore+0x1b2>
		case 4:
		ledMode = DISPLAY4;
    20dc:	87 e0       	ldi	r24, 0x07	; 7
    20de:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
		break;
    20e2:	13 c0       	rjmp	.+38     	; 0x210a <ReportScore+0x1b2>
		case 5:
		ledMode	= DISPLAY5;
    20e4:	88 e0       	ldi	r24, 0x08	; 8
    20e6:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
		break;
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <ReportScore+0x1b2>
		case 6:
		ledMode = DISPLAY6;
    20ec:	89 e0       	ldi	r24, 0x09	; 9
    20ee:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
		break;
    20f2:	0b c0       	rjmp	.+22     	; 0x210a <ReportScore+0x1b2>
		case 7:
		ledMode = DISPLAY7;
    20f4:	8a e0       	ldi	r24, 0x0A	; 10
    20f6:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
		break;
    20fa:	07 c0       	rjmp	.+14     	; 0x210a <ReportScore+0x1b2>
		case 8:
		ledMode = DISPLAY8;
    20fc:	8b e0       	ldi	r24, 0x0B	; 11
    20fe:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
		break;
    2102:	03 c0       	rjmp	.+6      	; 0x210a <ReportScore+0x1b2>
		case 9:
		ledMode = DISPLAY9;
    2104:	8c e0       	ldi	r24, 0x0C	; 12
    2106:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
    210a:	8f ef       	ldi	r24, 0xFF	; 255
    210c:	93 ed       	ldi	r25, 0xD3	; 211
    210e:	20 e3       	ldi	r18, 0x30	; 48
    2110:	81 50       	subi	r24, 0x01	; 1
    2112:	90 40       	sbci	r25, 0x00	; 0
    2114:	20 40       	sbci	r18, 0x00	; 0
    2116:	e1 f7       	brne	.-8      	; 0x2110 <ReportScore+0x1b8>
    2118:	00 c0       	rjmp	.+0      	; 0x211a <ReportScore+0x1c2>
    211a:	00 00       	nop
		default:
		//uh oh! Your score is probably really high dude!
		break;
	}
	_delay_ms(REPORT_SCORE_DELAY);
	curLed = 0;
    211c:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <curLed>
	ledMode = NEWGAMEANIMATE;
    2120:	8e e0       	ldi	r24, 0x0E	; 14
    2122:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
	//ledMode = NORMALMODE;
}		
    2126:	08 95       	ret
		}
		_delay_ms(REPORT_SCORE_DELAY);
		ledMode = LEDSOFF; 
		_delay_ms(REPORT_SCORE_DELAY_BETWEEN_DIGITS);
	}
	if(tens || hundreds)
    2128:	91 11       	cpse	r25, r1
    212a:	79 cf       	rjmp	.-270    	; 0x201e <ReportScore+0xc6>
    212c:	be cf       	rjmp	.-132    	; 0x20aa <ReportScore+0x152>
    212e:	3f ef       	ldi	r19, 0xFF	; 255
    2130:	43 ed       	ldi	r20, 0xD3	; 211
    2132:	20 e3       	ldi	r18, 0x30	; 48
    2134:	31 50       	subi	r19, 0x01	; 1
    2136:	40 40       	sbci	r20, 0x00	; 0
    2138:	20 40       	sbci	r18, 0x00	; 0
    213a:	e1 f7       	brne	.-8      	; 0x2134 <ReportScore+0x1dc>
    213c:	00 c0       	rjmp	.+0      	; 0x213e <ReportScore+0x1e6>
    213e:	00 00       	nop
			default:
				//uh oh! Your score is probably really high dude!
				break;
		}
		_delay_ms(REPORT_SCORE_DELAY);
		ledMode = LEDSOFF; 
    2140:	2d e0       	ldi	r18, 0x0D	; 13
    2142:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
    2146:	3f ef       	ldi	r19, 0xFF	; 255
    2148:	44 e3       	ldi	r20, 0x34	; 52
    214a:	2c e0       	ldi	r18, 0x0C	; 12
    214c:	31 50       	subi	r19, 0x01	; 1
    214e:	40 40       	sbci	r20, 0x00	; 0
    2150:	20 40       	sbci	r18, 0x00	; 0
    2152:	e1 f7       	brne	.-8      	; 0x214c <ReportScore+0x1f4>
    2154:	00 c0       	rjmp	.+0      	; 0x2156 <ReportScore+0x1fe>
    2156:	00 00       	nop
		_delay_ms(REPORT_SCORE_DELAY_BETWEEN_DIGITS);
	}
	if(tens || hundreds)
    2158:	91 11       	cpse	r25, r1
    215a:	61 cf       	rjmp	.-318    	; 0x201e <ReportScore+0xc6>
    215c:	6a cf       	rjmp	.-300    	; 0x2032 <ReportScore+0xda>

0000215e <NewGame>:
void NewGame(void)					// Restore the game to starting conditions!
{	
	//loopFlag = 1;
	//curLed = 0;
	//curLedWhenPressed = 0;
	cScaler = 0;
    215e:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <cScaler>
	delayScaler = 0;
    2162:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <delayScaler+0x1>
    2166:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <delayScaler>
	ClearLed();
    216a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <ClearLed>
	cScaler = 0;
	delayScaler = 0;
	score = 0;
    216e:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <score>
	NewGameAnimation();
    2172:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <NewGameAnimation>
	
	#if(IncreaseSpeed == 1)
		GAME_SPEED = DEFAULT_GAME_SPEED;
    2176:	8a e5       	ldi	r24, 0x5A	; 90
    2178:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    217c:	08 95       	ret

0000217e <FlashX>:
	#endif	
}

void FlashX(void)	
{
	ledMode = DISPLAYX;
    217e:	8f e0       	ldi	r24, 0x0F	; 15
    2180:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
    2184:	2f e7       	ldi	r18, 0x7F	; 127
    2186:	8f e4       	ldi	r24, 0x4F	; 79
    2188:	92 e1       	ldi	r25, 0x12	; 18
    218a:	21 50       	subi	r18, 0x01	; 1
    218c:	80 40       	sbci	r24, 0x00	; 0
    218e:	90 40       	sbci	r25, 0x00	; 0
    2190:	e1 f7       	brne	.-8      	; 0x218a <FlashX+0xc>
    2192:	00 c0       	rjmp	.+0      	; 0x2194 <FlashX+0x16>
    2194:	00 00       	nop
	_delay_ms(750);
	ledMode = LEDSOFF;
    2196:	8d e0       	ldi	r24, 0x0D	; 13
    2198:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
    219c:	2f e7       	ldi	r18, 0x7F	; 127
    219e:	8f e4       	ldi	r24, 0x4F	; 79
    21a0:	92 e1       	ldi	r25, 0x12	; 18
    21a2:	21 50       	subi	r18, 0x01	; 1
    21a4:	80 40       	sbci	r24, 0x00	; 0
    21a6:	90 40       	sbci	r25, 0x00	; 0
    21a8:	e1 f7       	brne	.-8      	; 0x21a2 <FlashX+0x24>
    21aa:	00 c0       	rjmp	.+0      	; 0x21ac <FlashX+0x2e>
    21ac:	00 00       	nop
    21ae:	08 95       	ret

000021b0 <SpeedUp>:
}

void SpeedUp(void)
{
	double val = ((double) GAME_SPEED)*(1-SpeedUpPercent);
	GAME_SPEED = ceil(val);
    21b0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    21b4:	70 e0       	ldi	r23, 0x00	; 0
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__floatunsisf>
    21be:	2d ec       	ldi	r18, 0xCD	; 205
    21c0:	3c ec       	ldi	r19, 0xCC	; 204
    21c2:	4c e6       	ldi	r20, 0x6C	; 108
    21c4:	5f e3       	ldi	r21, 0x3F	; 63
    21c6:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <__mulsf3>
    21ca:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <ceil>
    21ce:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <__fixunssfsi>
    21d2:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
    21d6:	08 95       	ret

000021d8 <main>:
{
	uint8_t key_status0 = 0;
	//uint8_t key_status1 = 0;

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    21d8:	0e 94 b0 00 	call	0x160	; 0x160 <atmel_start_init>
	init();
    21dc:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <init>
	ledIntEnable();
    21e0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <ledIntEnable>
const uint8_t	LED_BANKE_TAB[] = {	(EMASK&~(0b1<<0)),	(EMASK&~(0b1<<1)),	(EMASK&~(0b1<<2)),	(EMASK&~(0b1<<3)),	(EMASK&~(0b1<<4)),	(EMASK&~(0b1<<5)),	(EMASK&~(0b1<<6)),	(EMASK&~(0b1<<7))};


void ledIntSetup(void)
{
	OCR2B = 0xFF;				//Set Timer 0 INT B Compare Register value.
    21e4:	8f ef       	ldi	r24, 0xFF	; 255
    21e6:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	ledIntSetup();
	/* Enable interrupts */
	cpu_irq_enable();
    21ea:	78 94       	sei
	
	NewGameAnimation();
    21ec:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <NewGameAnimation>
					}
					#endif
					else
					{	
						FlashX();
						loopFlag = 1;					// set the loopFlag so that repeat touches are not processed
    21f0:	c1 e0       	ldi	r28, 0x01	; 1
					#if(DirectionTricking == 0)			// If in normal game mode
					else if(TARGETLED == curLed)		// Target Hit!
					{
						score++;						// increment the player's score
						loopFlag = 1;					// set the loopFlag so that repeat touches are not processed
						curLedWhenPressed = curLed;		// store current led value for comparison later (to clear loopFlag lock)...
    21f2:	d2 e0       	ldi	r29, 0x02	; 2
	/** If any of the two self-capacitance buttons is touched, the LED is turned ON
	 * When touch is released, the LED is turned OFF
	 */
	while (1) {
		/* Does acquisition and post-processing */
		touch_process();
    21f4:	0e 94 d7 11 	call	0x23ae	; 0x23ae <touch_process>
		if (measurement_done_touch == 1) {
    21f8:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <measurement_done_touch>
    21fc:	81 30       	cpi	r24, 0x01	; 1
    21fe:	d1 f7       	brne	.-12     	; 0x21f4 <main+0x1c>
			measurement_done_touch = 0;
    2200:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <measurement_done_touch>
			
			key_status0 = get_sensor_state(0) & 0x80;
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	0e 94 1f 12 	call	0x243e	; 0x243e <get_sensor_state>
			}
			#endif
			
			#if((NumberDisplayTest == 0) && (RandomNumberTest == 0))
			{
				if ((0u != key_status0))
    220c:	88 23       	and	r24, r24
    220e:	94 f7       	brge	.-28     	; 0x21f4 <main+0x1c>
						DetermineNewRandom();			// Get a new random num for redundancy
						numberPresses++;				// Increment so code behaves normally from now on.
					}
					#endif 
					
					if(0 < loopFlag)					// If loopFlag is set
    2210:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <loopFlag>
    2214:	81 11       	cpse	r24, r1
    2216:	ee cf       	rjmp	.-36     	; 0x21f4 <main+0x1c>
					{
						// Don't process touch!
					}
					
					#if(DirectionTricking == 0)			// If in normal game mode
					else if(TARGETLED == curLed)		// Target Hit!
    2218:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    221c:	82 30       	cpi	r24, 0x02	; 2
    221e:	91 f4       	brne	.+36     	; 0x2244 <main+0x6c>
					{
						score++;						// increment the player's score
    2220:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <score>
    2224:	8f 5f       	subi	r24, 0xFF	; 255
    2226:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <score>
						loopFlag = 1;					// set the loopFlag so that repeat touches are not processed
    222a:	c0 93 88 01 	sts	0x0188, r28	; 0x800188 <loopFlag>
						curLedWhenPressed = curLed;		// store current led value for comparison later (to clear loopFlag lock)...
    222e:	d0 93 87 01 	sts	0x0187, r29	; 0x800187 <curLedWhenPressed>
						
						delayScaler = 0;				// Reset Delay counter so that it doesn't hang on paused mode...
    2232:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <delayScaler+0x1>
    2236:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <delayScaler>
						ledMode = 2;//PAUSEDMODE;		// Put game into paused mode, LED holds on Target LED.
    223a:	d0 93 8b 01 	sts	0x018B, r29	; 0x80018b <ledMode>
						#if(IncreaseSpeed == 1)
						SpeedUp();
    223e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <SpeedUp>
    2242:	d8 cf       	rjmp	.-80     	; 0x21f4 <main+0x1c>
						#endif
					}
					#endif
					else
					{	
						FlashX();
    2244:	0e 94 bf 10 	call	0x217e	; 0x217e <FlashX>
						loopFlag = 1;					// set the loopFlag so that repeat touches are not processed
    2248:	c0 93 88 01 	sts	0x0188, r28	; 0x800188 <loopFlag>
						curLedWhenPressed = curLed;		// store current led value for comparison later (to clear loopFlag lock)... 
    224c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <curLed>
    2250:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <curLedWhenPressed>
						ReportScore(score);				// Run the Score Report routine
    2254:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <score>
    2258:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <ReportScore>
						NewGame();						// Reset status, start new game!
    225c:	0e 94 af 10 	call	0x215e	; 0x215e <NewGame>
    2260:	c9 cf       	rjmp	.-110    	; 0x21f4 <main+0x1c>

00002262 <__vector_15>:
		}
	}
}

ISR (TIMER0_COMPB_vect)
{
    2262:	1f 92       	push	r1
    2264:	0f 92       	push	r0
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	0f 92       	push	r0
    226a:	11 24       	eor	r1, r1
    226c:	2f 93       	push	r18
    226e:	3f 93       	push	r19
    2270:	4f 93       	push	r20
    2272:	5f 93       	push	r21
    2274:	6f 93       	push	r22
    2276:	7f 93       	push	r23
    2278:	8f 93       	push	r24
    227a:	9f 93       	push	r25
    227c:	af 93       	push	r26
    227e:	bf 93       	push	r27
    2280:	ef 93       	push	r30
    2282:	ff 93       	push	r31
	isrSwitchCase();
    2284:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <isrSwitchCase>
    2288:	ff 91       	pop	r31
    228a:	ef 91       	pop	r30
    228c:	bf 91       	pop	r27
    228e:	af 91       	pop	r26
    2290:	9f 91       	pop	r25
    2292:	8f 91       	pop	r24
    2294:	7f 91       	pop	r23
    2296:	6f 91       	pop	r22
    2298:	5f 91       	pop	r21
    229a:	4f 91       	pop	r20
    229c:	3f 91       	pop	r19
    229e:	2f 91       	pop	r18
    22a0:	0f 90       	pop	r0
    22a2:	0f be       	out	0x3f, r0	; 63
    22a4:	0f 90       	pop	r0
    22a6:	1f 90       	pop	r1
    22a8:	18 95       	reti

000022aa <qtm_measure_complete_callback>:
{
	/* Calibrate Node */
	qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
	/* Initialize key */
	qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
}
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <touch_postprocess_request>
    22b0:	08 95       	ret

000022b2 <qtm_post_process_complete>:
    22b2:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <qtlib_key_set1>
    22b6:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <qtlib_key_set1+0x1>
    22ba:	80 81       	ld	r24, Z
    22bc:	88 23       	and	r24, r24
    22be:	44 f4       	brge	.+16     	; 0x22d0 <qtm_post_process_complete+0x1e>
    22c0:	e0 91 bf 01 	lds	r30, 0x01BF	; 0x8001bf <p_qtm_control>
    22c4:	f0 91 c0 01 	lds	r31, 0x01C0	; 0x8001c0 <p_qtm_control+0x1>
    22c8:	80 81       	ld	r24, Z
    22ca:	84 60       	ori	r24, 0x04	; 4
    22cc:	80 83       	st	Z, r24
    22ce:	08 95       	ret
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <measurement_done_touch>
    22d6:	08 95       	ret

000022d8 <qtm_error_callback>:
    22d8:	88 23       	and	r24, r24
    22da:	24 f4       	brge	.+8      	; 0x22e4 <qtm_error_callback+0xc>
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <module_error_code>
    22e2:	08 95       	ret
    22e4:	86 fd       	sbrc	r24, 6
    22e6:	03 c0       	rjmp	.+6      	; 0x22ee <qtm_error_callback+0x16>
    22e8:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <module_error_code>
    22ec:	08 95       	ret
    22ee:	8f 70       	andi	r24, 0x0F	; 15
    22f0:	8e 5f       	subi	r24, 0xFE	; 254
    22f2:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <module_error_code>
    22f6:	08 95       	ret

000022f8 <init_complete_callback>:
    22f8:	8d eb       	ldi	r24, 0xBD	; 189
    22fa:	91 e0       	ldi	r25, 0x01	; 1
    22fc:	0e 94 a8 1c 	call	0x3950	; 0x3950 <qtm_ptc_qtlib_assign_signal_memory>
    2300:	60 e0       	ldi	r22, 0x00	; 0
    2302:	70 e0       	ldi	r23, 0x00	; 0
    2304:	8b e4       	ldi	r24, 0x4B	; 75
    2306:	91 e0       	ldi	r25, 0x01	; 1
    2308:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <qtm_enable_sensor_node>
    230c:	60 e0       	ldi	r22, 0x00	; 0
    230e:	70 e0       	ldi	r23, 0x00	; 0
    2310:	8b e4       	ldi	r24, 0x4B	; 75
    2312:	91 e0       	ldi	r25, 0x01	; 1
    2314:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <qtm_calibrate_sensor_node>
    2318:	48 eb       	ldi	r20, 0xB8	; 184
    231a:	51 e0       	ldi	r21, 0x01	; 1
    231c:	60 e0       	ldi	r22, 0x00	; 0
    231e:	8d e1       	ldi	r24, 0x1D	; 29
    2320:	91 e0       	ldi	r25, 0x01	; 1
    2322:	0e 94 01 13 	call	0x2602	; 0x2602 <qtm_init_sensor_key>
    2326:	08 95       	ret

00002328 <touch_init>:
    2328:	88 e0       	ldi	r24, 0x08	; 8
    232a:	87 bd       	out	0x27, r24	; 39
    232c:	e5 e6       	ldi	r30, 0x65	; 101
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	8f 7e       	andi	r24, 0xEF	; 239
    2334:	80 83       	st	Z, r24
    2336:	73 98       	cbi	0x0e, 3	; 14
    2338:	e1 ec       	ldi	r30, 0xC1	; 193
    233a:	f1 e0       	ldi	r31, 0x01	; 1
    233c:	10 82       	st	Z, r1
    233e:	89 e1       	ldi	r24, 0x19	; 25
    2340:	91 e0       	ldi	r25, 0x01	; 1
    2342:	92 83       	std	Z+2, r25	; 0x02
    2344:	81 83       	std	Z+1, r24	; 0x01
    2346:	83 e1       	ldi	r24, 0x13	; 19
    2348:	91 e0       	ldi	r25, 0x01	; 1
    234a:	94 83       	std	Z+4, r25	; 0x04
    234c:	83 83       	std	Z+3, r24	; 0x03
    234e:	8b e0       	ldi	r24, 0x0B	; 11
    2350:	91 e0       	ldi	r25, 0x01	; 1
    2352:	96 83       	std	Z+6, r25	; 0x06
    2354:	85 83       	std	Z+5, r24	; 0x05
    2356:	8f e0       	ldi	r24, 0x0F	; 15
    2358:	91 e0       	ldi	r25, 0x01	; 1
    235a:	90 87       	std	Z+8, r25	; 0x08
    235c:	87 83       	std	Z+7, r24	; 0x07
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	91 e0       	ldi	r25, 0x01	; 1
    2362:	92 87       	std	Z+10, r25	; 0x0a
    2364:	81 87       	std	Z+9, r24	; 0x09
    2366:	87 e0       	ldi	r24, 0x07	; 7
    2368:	91 e0       	ldi	r25, 0x01	; 1
    236a:	94 87       	std	Z+12, r25	; 0x0c
    236c:	83 87       	std	Z+11, r24	; 0x0b
    236e:	8a eb       	ldi	r24, 0xBA	; 186
    2370:	9a e1       	ldi	r25, 0x1A	; 26
    2372:	96 87       	std	Z+14, r25	; 0x0e
    2374:	85 87       	std	Z+13, r24	; 0x0d
    2376:	8c e7       	ldi	r24, 0x7C	; 124
    2378:	91 e1       	ldi	r25, 0x11	; 17
    237a:	90 8b       	std	Z+16, r25	; 0x10
    237c:	87 87       	std	Z+15, r24	; 0x0f
    237e:	8c e6       	ldi	r24, 0x6C	; 108
    2380:	91 e1       	ldi	r25, 0x11	; 17
    2382:	92 8b       	std	Z+18, r25	; 0x12
    2384:	81 8b       	std	Z+17, r24	; 0x11
    2386:	85 e5       	ldi	r24, 0x55	; 85
    2388:	91 e1       	ldi	r25, 0x11	; 17
    238a:	94 8b       	std	Z+20, r25	; 0x14
    238c:	83 8b       	std	Z+19, r24	; 0x13
    238e:	16 8a       	std	Z+22, r1	; 0x16
    2390:	15 8a       	std	Z+21, r1	; 0x15
    2392:	89 e5       	ldi	r24, 0x59	; 89
    2394:	91 e1       	ldi	r25, 0x11	; 17
    2396:	90 8f       	std	Z+24, r25	; 0x18
    2398:	87 8b       	std	Z+23, r24	; 0x17
    239a:	cf 01       	movw	r24, r30
    239c:	0e 94 81 18 	call	0x3102	; 0x3102 <qtm_binding_layer_init>
    23a0:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <qmt_get_binding_layer_ptr>
    23a4:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <p_qtm_control+0x1>
    23a8:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <p_qtm_control>
    23ac:	08 95       	ret

000023ae <touch_process>:
    23ae:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <time_to_measure_touch_flag>
    23b2:	81 30       	cpi	r24, 0x01	; 1
    23b4:	39 f4       	brne	.+14     	; 0x23c4 <touch_process+0x16>
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <qtm_lib_start_acquisition>
    23bc:	81 11       	cpse	r24, r1
    23be:	02 c0       	rjmp	.+4      	; 0x23c4 <touch_process+0x16>
    23c0:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <time_to_measure_touch_flag>
    23c4:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <touch_postprocess_request>
    23c8:	81 30       	cpi	r24, 0x01	; 1
    23ca:	c9 f4       	brne	.+50     	; 0x23fe <touch_process+0x50>
    23cc:	0e 94 30 19 	call	0x3260	; 0x3260 <qtm_lib_acq_process>
    23d0:	81 11       	cpse	r24, r1
    23d2:	03 c0       	rjmp	.+6      	; 0x23da <touch_process+0x2c>
    23d4:	0e 94 38 19 	call	0x3270	; 0x3270 <qtm_lib_post_process>
    23d8:	03 c0       	rjmp	.+6      	; 0x23e0 <touch_process+0x32>
    23da:	80 e8       	ldi	r24, 0x80	; 128
    23dc:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <qtm_error_callback>
    23e0:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <touch_postprocess_request>
    23e4:	e0 91 bf 01 	lds	r30, 0x01BF	; 0x8001bf <p_qtm_control>
    23e8:	f0 91 c0 01 	lds	r31, 0x01C0	; 0x8001c0 <p_qtm_control+0x1>
    23ec:	80 81       	ld	r24, Z
    23ee:	82 ff       	sbrs	r24, 2
    23f0:	06 c0       	rjmp	.+12     	; 0x23fe <touch_process+0x50>
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <time_to_measure_touch_flag>
    23f8:	80 81       	ld	r24, Z
    23fa:	8b 7f       	andi	r24, 0xFB	; 251
    23fc:	80 83       	st	Z, r24
    23fe:	08 95       	ret

00002400 <touch_timer_handler>:
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <time_to_measure_touch_flag>
    2406:	84 e1       	ldi	r24, 0x14	; 20
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	0e 94 f6 12 	call	0x25ec	; 0x25ec <qtm_update_qtlib_timer>
    240e:	08 95       	ret

00002410 <mega_touch_timer>:
    2410:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <touch_time_counter.2416>
    2414:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <touch_time_counter.2416+0x1>
    2418:	44 97       	sbiw	r24, 0x14	; 20
    241a:	39 f4       	brne	.+14     	; 0x242a <mega_touch_timer+0x1a>
    241c:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <touch_time_counter.2416+0x1>
    2420:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <touch_time_counter.2416>
    2424:	0e 94 00 12 	call	0x2400	; 0x2400 <touch_timer_handler>
    2428:	08 95       	ret
    242a:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <touch_time_counter.2416>
    242e:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <touch_time_counter.2416+0x1>
    2432:	01 96       	adiw	r24, 0x01	; 1
    2434:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <touch_time_counter.2416+0x1>
    2438:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <touch_time_counter.2416>
    243c:	08 95       	ret

0000243e <get_sensor_state>:
    243e:	9c 01       	movw	r18, r24
    2440:	22 0f       	add	r18, r18
    2442:	33 1f       	adc	r19, r19
    2444:	82 0f       	add	r24, r18
    2446:	93 1f       	adc	r25, r19
    2448:	88 0f       	add	r24, r24
    244a:	99 1f       	adc	r25, r25
    244c:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <qtlib_key_set1+0x4>
    2450:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <qtlib_key_set1+0x5>
    2454:	e8 0f       	add	r30, r24
    2456:	f9 1f       	adc	r31, r25
    2458:	80 81       	ld	r24, Z
    245a:	08 95       	ret

0000245c <__vector_37>:
Input  : none
Output : none
Notes  : none
============================================================================*/
ISR(PTC_EOC_vect)
{
    245c:	1f 92       	push	r1
    245e:	0f 92       	push	r0
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	0f 92       	push	r0
    2464:	11 24       	eor	r1, r1
    2466:	2f 93       	push	r18
    2468:	3f 93       	push	r19
    246a:	4f 93       	push	r20
    246c:	5f 93       	push	r21
    246e:	6f 93       	push	r22
    2470:	7f 93       	push	r23
    2472:	8f 93       	push	r24
    2474:	9f 93       	push	r25
    2476:	af 93       	push	r26
    2478:	bf 93       	push	r27
    247a:	ef 93       	push	r30
    247c:	ff 93       	push	r31
	qtm_m328pb_ptc_handler_eoc();
    247e:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <qtm_m328pb_ptc_handler_eoc>
}
    2482:	ff 91       	pop	r31
    2484:	ef 91       	pop	r30
    2486:	bf 91       	pop	r27
    2488:	af 91       	pop	r26
    248a:	9f 91       	pop	r25
    248c:	8f 91       	pop	r24
    248e:	7f 91       	pop	r23
    2490:	6f 91       	pop	r22
    2492:	5f 91       	pop	r21
    2494:	4f 91       	pop	r20
    2496:	3f 91       	pop	r19
    2498:	2f 91       	pop	r18
    249a:	0f 90       	pop	r0
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	0f 90       	pop	r0
    24a0:	1f 90       	pop	r1
    24a2:	18 95       	reti

000024a4 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
    24a4:	8d e3       	ldi	r24, 0x3D	; 61
    24a6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f8065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
    24aa:	8f ef       	ldi	r24, 0xFF	; 255
    24ac:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
    24b0:	94 b1       	in	r25, 0x04	; 4
    24b2:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
    24b4:	95 b1       	in	r25, 0x05	; 5
    24b6:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
    24b8:	97 b1       	in	r25, 0x07	; 7
    24ba:	90 78       	andi	r25, 0x80	; 128
    24bc:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
    24be:	98 b1       	in	r25, 0x08	; 8
    24c0:	9f 67       	ori	r25, 0x7F	; 127
    24c2:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
    24c4:	9a b1       	in	r25, 0x0a	; 10
    24c6:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
    24c8:	9b b1       	in	r25, 0x0b	; 11
    24ca:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
    24cc:	8d b1       	in	r24, 0x0d	; 13
    24ce:	80 7f       	andi	r24, 0xF0	; 240
    24d0:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
    24d2:	8e b1       	in	r24, 0x0e	; 14
    24d4:	8f 60       	ori	r24, 0x0F	; 15
    24d6:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
    24d8:	40 e0       	ldi	r20, 0x00	; 0
    24da:	60 e8       	ldi	r22, 0x80	; 128
    24dc:	81 e6       	ldi	r24, 0x61	; 97
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	0e 94 79 12 	call	0x24f2	; 0x24f2 <protected_write_io>

	SMCR = (0 << SM2) | (1 << SM1) | (1 << SM0) | // Power Save
    24e4:	86 e0       	ldi	r24, 0x06	; 6
    24e6:	83 bf       	out	0x33, r24	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
    24e8:	15 be       	out	0x35, r1	; 53

	ENABLE_INTERRUPTS();
    24ea:	78 94       	sei
#include <system.h>

void Timer_initialization(void)
{

	Timer_init();
    24ec:	0e 94 80 12 	call	0x2500	; 0x2500 <Timer_init>
    24f0:	08 95       	ret

000024f2 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
    24f2:	2f b7       	in	r18, 0x3f	; 63
	cli
    24f4:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
    24f6:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
    24f8:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
    24fa:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
    24fc:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
    24fe:	08 95       	ret

00002500 <Timer_init>:
 */
int8_t Timer_init()
{

	/* Enable TC0 */
	PRR0 &= ~(1 << PRTIM0);
    2500:	e4 e6       	ldi	r30, 0x64	; 100
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	8f 7d       	andi	r24, 0xDF	; 223
    2508:	80 83       	st	Z, r24

	TCCR0A = (0 << COM0A1) | (0 << COM0A0)   /* Normal port operation, OCA disconnected */
    250a:	82 e0       	ldi	r24, 0x02	; 2
    250c:	84 bd       	out	0x24, r24	; 36
	         | (0 << COM0B1) | (0 << COM0B0) /* Normal port operation, OCB disconnected */
	         | (1 << WGM01) | (0 << WGM00);  /* TC8 Mode 2 CTC */

	TCCR0B = 0                                          /* TC8 Mode 2 CTC */
    250e:	95 e0       	ldi	r25, 0x05	; 5
    2510:	95 bd       	out	0x25, r25	; 37
			 | (1 << CS02) | (0 << CS01) | (1 << CS00); /* IO clock divided by 1024 */
			
	TIMSK0 = 0 << OCIE0B   /* Output Compare B Match Interrupt Enable: disabled */
    2512:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	// GTCCR = 0 << TSM /* Timer/Counter Synchronization Mode: disabled */
	//		 | 0 << PSRASY /* Prescaler Reset Timer/Counter2: disabled */
	//		 | 0 << PSRSYNC; /* Prescaler Reset: disabled */

	return 0;
}
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	08 95       	ret

0000251a <check_for_aks_block>:
    251a:	cf 92       	push	r12
    251c:	df 92       	push	r13
    251e:	ff 92       	push	r15
    2520:	0f 93       	push	r16
    2522:	1f 93       	push	r17
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	ec 01       	movw	r28, r24
    252a:	ae 81       	ldd	r26, Y+6	; 0x06
    252c:	bf 81       	ldd	r27, Y+7	; 0x07
    252e:	eb 01       	movw	r28, r22
    2530:	cc 0f       	add	r28, r28
    2532:	dd 1f       	adc	r29, r29
    2534:	c6 0f       	add	r28, r22
    2536:	d7 1f       	adc	r29, r23
    2538:	ca 0f       	add	r28, r26
    253a:	db 1f       	adc	r29, r27
    253c:	fa 80       	ldd	r15, Y+2	; 0x02
    253e:	fc 01       	movw	r30, r24
    2540:	44 81       	ldd	r20, Z+4	; 0x04
    2542:	55 81       	ldd	r21, Z+5	; 0x05
    2544:	e6 e0       	ldi	r30, 0x06	; 6
    2546:	e6 9f       	mul	r30, r22
    2548:	90 01       	movw	r18, r0
    254a:	e7 9f       	mul	r30, r23
    254c:	30 0d       	add	r19, r0
    254e:	11 24       	eor	r1, r1
    2550:	8a 01       	movw	r16, r20
    2552:	02 0f       	add	r16, r18
    2554:	13 1f       	adc	r17, r19
    2556:	f8 01       	movw	r30, r16
    2558:	22 81       	ldd	r18, Z+2	; 0x02
    255a:	33 81       	ldd	r19, Z+3	; 0x03
    255c:	f9 01       	movw	r30, r18
    255e:	21 81       	ldd	r18, Z+1	; 0x01
    2560:	32 81       	ldd	r19, Z+2	; 0x02
    2562:	f8 01       	movw	r30, r16
    2564:	04 81       	ldd	r16, Z+4	; 0x04
    2566:	15 81       	ldd	r17, Z+5	; 0x05
    2568:	20 1b       	sub	r18, r16
    256a:	31 0b       	sbc	r19, r17
    256c:	e8 81       	ld	r30, Y
    256e:	2e 1b       	sub	r18, r30
    2570:	31 09       	sbc	r19, r1
    2572:	ec 01       	movw	r28, r24
    2574:	ea 81       	ldd	r30, Y+2	; 0x02
    2576:	fb 81       	ldd	r31, Y+3	; 0x03
    2578:	00 81       	ld	r16, Z
    257a:	11 81       	ldd	r17, Z+1	; 0x01
    257c:	fa 01       	movw	r30, r20
    257e:	40 e0       	ldi	r20, 0x00	; 0
    2580:	50 e0       	ldi	r21, 0x00	; 0
    2582:	40 17       	cp	r20, r16
    2584:	51 07       	cpc	r21, r17
    2586:	39 f1       	breq	.+78     	; 0x25d6 <check_for_aks_block+0xbc>
    2588:	46 17       	cp	r20, r22
    258a:	57 07       	cpc	r21, r23
    258c:	f9 f0       	breq	.+62     	; 0x25cc <check_for_aks_block+0xb2>
    258e:	12 96       	adiw	r26, 0x02	; 2
    2590:	8c 91       	ld	r24, X
    2592:	12 97       	sbiw	r26, 0x02	; 2
    2594:	f8 12       	cpse	r15, r24
    2596:	1a c0       	rjmp	.+52     	; 0x25cc <check_for_aks_block+0xb2>
    2598:	80 81       	ld	r24, Z
    259a:	85 58       	subi	r24, 0x85	; 133
    259c:	82 30       	cpi	r24, 0x02	; 2
    259e:	e8 f0       	brcs	.+58     	; 0x25da <check_for_aks_block+0xc0>
    25a0:	c4 80       	ldd	r12, Z+4	; 0x04
    25a2:	d5 80       	ldd	r13, Z+5	; 0x05
    25a4:	82 81       	ldd	r24, Z+2	; 0x02
    25a6:	93 81       	ldd	r25, Z+3	; 0x03
    25a8:	ec 01       	movw	r28, r24
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	9a 81       	ldd	r25, Y+2	; 0x02
    25ae:	c8 16       	cp	r12, r24
    25b0:	d9 06       	cpc	r13, r25
    25b2:	60 f4       	brcc	.+24     	; 0x25cc <check_for_aks_block+0xb2>
    25b4:	8c 19       	sub	r24, r12
    25b6:	9d 09       	sbc	r25, r13
    25b8:	cc 91       	ld	r28, X
    25ba:	d0 e0       	ldi	r29, 0x00	; 0
    25bc:	c8 17       	cp	r28, r24
    25be:	d9 07       	cpc	r29, r25
    25c0:	28 f4       	brcc	.+10     	; 0x25cc <check_for_aks_block+0xb2>
    25c2:	8c 1b       	sub	r24, r28
    25c4:	9d 0b       	sbc	r25, r29
    25c6:	28 17       	cp	r18, r24
    25c8:	39 07       	cpc	r19, r25
    25ca:	38 f0       	brcs	.+14     	; 0x25da <check_for_aks_block+0xc0>
    25cc:	4f 5f       	subi	r20, 0xFF	; 255
    25ce:	5f 4f       	sbci	r21, 0xFF	; 255
    25d0:	13 96       	adiw	r26, 0x03	; 3
    25d2:	36 96       	adiw	r30, 0x06	; 6
    25d4:	d6 cf       	rjmp	.-84     	; 0x2582 <check_for_aks_block+0x68>
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	01 c0       	rjmp	.+2      	; 0x25dc <check_for_aks_block+0xc2>
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	df 91       	pop	r29
    25de:	cf 91       	pop	r28
    25e0:	1f 91       	pop	r17
    25e2:	0f 91       	pop	r16
    25e4:	ff 90       	pop	r15
    25e6:	df 90       	pop	r13
    25e8:	cf 90       	pop	r12
    25ea:	08 95       	ret

000025ec <qtm_update_qtlib_timer>:
    25ec:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <qtm_local_ms_timecount>
    25f0:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <qtm_local_ms_timecount+0x1>
    25f4:	82 0f       	add	r24, r18
    25f6:	93 1f       	adc	r25, r19
    25f8:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <qtm_local_ms_timecount+0x1>
    25fc:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <qtm_local_ms_timecount>
    2600:	08 95       	ret

00002602 <qtm_init_sensor_key>:
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	d9 f0       	breq	.+54     	; 0x263c <qtm_init_sensor_key+0x3a>
    2606:	41 15       	cp	r20, r1
    2608:	51 05       	cpc	r21, r1
    260a:	c1 f0       	breq	.+48     	; 0x263c <qtm_init_sensor_key+0x3a>
    260c:	26 e0       	ldi	r18, 0x06	; 6
    260e:	62 9f       	mul	r22, r18
    2610:	b0 01       	movw	r22, r0
    2612:	11 24       	eor	r1, r1
    2614:	dc 01       	movw	r26, r24
    2616:	14 96       	adiw	r26, 0x04	; 4
    2618:	ed 91       	ld	r30, X+
    261a:	fc 91       	ld	r31, X
    261c:	15 97       	sbiw	r26, 0x05	; 5
    261e:	e6 0f       	add	r30, r22
    2620:	f7 1f       	adc	r31, r23
    2622:	21 e0       	ldi	r18, 0x01	; 1
    2624:	20 83       	st	Z, r18
    2626:	14 96       	adiw	r26, 0x04	; 4
    2628:	8d 91       	ld	r24, X+
    262a:	9c 91       	ld	r25, X
    262c:	15 97       	sbiw	r26, 0x05	; 5
    262e:	fc 01       	movw	r30, r24
    2630:	e6 0f       	add	r30, r22
    2632:	f7 1f       	adc	r31, r23
    2634:	53 83       	std	Z+3, r21	; 0x03
    2636:	42 83       	std	Z+2, r20	; 0x02
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	08 95       	ret
    263c:	8b e0       	ldi	r24, 0x0B	; 11
    263e:	08 95       	ret

00002640 <qtm_key_sensors_process>:
    2640:	2f 92       	push	r2
    2642:	3f 92       	push	r3
    2644:	4f 92       	push	r4
    2646:	5f 92       	push	r5
    2648:	6f 92       	push	r6
    264a:	7f 92       	push	r7
    264c:	8f 92       	push	r8
    264e:	9f 92       	push	r9
    2650:	af 92       	push	r10
    2652:	bf 92       	push	r11
    2654:	cf 92       	push	r12
    2656:	df 92       	push	r13
    2658:	ef 92       	push	r14
    265a:	ff 92       	push	r15
    265c:	0f 93       	push	r16
    265e:	1f 93       	push	r17
    2660:	cf 93       	push	r28
    2662:	df 93       	push	r29
    2664:	00 97       	sbiw	r24, 0x00	; 0
    2666:	09 f4       	brne	.+2      	; 0x266a <qtm_key_sensors_process+0x2a>
    2668:	7d c3       	rjmp	.+1786   	; 0x2d64 <qtm_key_sensors_process+0x724>
    266a:	ec 01       	movw	r28, r24
    266c:	a1 2c       	mov	r10, r1
    266e:	b1 2c       	mov	r11, r1
    2670:	81 2c       	mov	r8, r1
    2672:	91 2c       	mov	r9, r1
    2674:	21 2c       	mov	r2, r1
    2676:	d1 2c       	mov	r13, r1
    2678:	33 e0       	ldi	r19, 0x03	; 3
    267a:	c3 2e       	mov	r12, r19
    267c:	45 e8       	ldi	r20, 0x85	; 133
    267e:	64 2e       	mov	r6, r20
    2680:	56 e8       	ldi	r21, 0x86	; 134
    2682:	75 2e       	mov	r7, r21
    2684:	67 e0       	ldi	r22, 0x07	; 7
    2686:	36 2e       	mov	r3, r22
    2688:	72 e0       	ldi	r23, 0x02	; 2
    268a:	47 2e       	mov	r4, r23
    268c:	e8 e0       	ldi	r30, 0x08	; 8
    268e:	5e 2e       	mov	r5, r30
    2690:	ea 81       	ldd	r30, Y+2	; 0x02
    2692:	fb 81       	ldd	r31, Y+3	; 0x03
    2694:	80 81       	ld	r24, Z
    2696:	91 81       	ldd	r25, Z+1	; 0x01
    2698:	88 16       	cp	r8, r24
    269a:	99 06       	cpc	r9, r25
    269c:	08 f0       	brcs	.+2      	; 0x26a0 <qtm_key_sensors_process+0x60>
    269e:	a5 c1       	rjmp	.+842    	; 0x29ea <qtm_key_sensors_process+0x3aa>
    26a0:	75 01       	movw	r14, r10
    26a2:	ee 0c       	add	r14, r14
    26a4:	ff 1c       	adc	r15, r15
    26a6:	0c 81       	ldd	r16, Y+4	; 0x04
    26a8:	1d 81       	ldd	r17, Y+5	; 0x05
    26aa:	0e 0d       	add	r16, r14
    26ac:	1f 1d       	adc	r17, r15
    26ae:	d8 01       	movw	r26, r16
    26b0:	8c 91       	ld	r24, X
    26b2:	84 30       	cpi	r24, 0x04	; 4
    26b4:	09 f4       	brne	.+2      	; 0x26b8 <qtm_key_sensors_process+0x78>
    26b6:	a2 c0       	rjmp	.+324    	; 0x27fc <qtm_key_sensors_process+0x1bc>
    26b8:	38 f4       	brcc	.+14     	; 0x26c8 <qtm_key_sensors_process+0x88>
    26ba:	82 30       	cpi	r24, 0x02	; 2
    26bc:	01 f1       	breq	.+64     	; 0x26fe <qtm_key_sensors_process+0xbe>
    26be:	08 f0       	brcs	.+2      	; 0x26c2 <qtm_key_sensors_process+0x82>
    26c0:	49 c0       	rjmp	.+146    	; 0x2754 <qtm_key_sensors_process+0x114>
    26c2:	81 30       	cpi	r24, 0x01	; 1
    26c4:	59 f0       	breq	.+22     	; 0x26dc <qtm_key_sensors_process+0x9c>
    26c6:	8a c1       	rjmp	.+788    	; 0x29dc <qtm_key_sensors_process+0x39c>
    26c8:	85 38       	cpi	r24, 0x85	; 133
    26ca:	09 f4       	brne	.+2      	; 0x26ce <qtm_key_sensors_process+0x8e>
    26cc:	c4 c0       	rjmp	.+392    	; 0x2856 <qtm_key_sensors_process+0x216>
    26ce:	86 38       	cpi	r24, 0x86	; 134
    26d0:	09 f4       	brne	.+2      	; 0x26d4 <qtm_key_sensors_process+0x94>
    26d2:	f8 c0       	rjmp	.+496    	; 0x28c4 <qtm_key_sensors_process+0x284>
    26d4:	87 30       	cpi	r24, 0x07	; 7
    26d6:	09 f0       	breq	.+2      	; 0x26da <qtm_key_sensors_process+0x9a>
    26d8:	81 c1       	rjmp	.+770    	; 0x29dc <qtm_key_sensors_process+0x39c>
    26da:	39 c1       	rjmp	.+626    	; 0x294e <qtm_key_sensors_process+0x30e>
    26dc:	d8 01       	movw	r26, r16
    26de:	12 96       	adiw	r26, 0x02	; 2
    26e0:	ed 91       	ld	r30, X+
    26e2:	fc 91       	ld	r31, X
    26e4:	13 97       	sbiw	r26, 0x03	; 3
    26e6:	80 81       	ld	r24, Z
    26e8:	8e 71       	andi	r24, 0x1E	; 30
    26ea:	09 f0       	breq	.+2      	; 0x26ee <qtm_key_sensors_process+0xae>
    26ec:	69 c1       	rjmp	.+722    	; 0x29c0 <qtm_key_sensors_process+0x380>
    26ee:	4c 92       	st	X, r4
    26f0:	8c 81       	ldd	r24, Y+4	; 0x04
    26f2:	9d 81       	ldd	r25, Y+5	; 0x05
    26f4:	fc 01       	movw	r30, r24
    26f6:	ee 0d       	add	r30, r14
    26f8:	ff 1d       	adc	r31, r15
    26fa:	51 82       	std	Z+1, r5	; 0x01
    26fc:	61 c1       	rjmp	.+706    	; 0x29c0 <qtm_key_sensors_process+0x380>
    26fe:	f8 01       	movw	r30, r16
    2700:	21 81       	ldd	r18, Z+1	; 0x01
    2702:	22 23       	and	r18, r18
    2704:	29 f1       	breq	.+74     	; 0x2750 <qtm_key_sensors_process+0x110>
    2706:	02 80       	ldd	r0, Z+2	; 0x02
    2708:	f3 81       	ldd	r31, Z+3	; 0x03
    270a:	e0 2d       	mov	r30, r0
    270c:	25 30       	cpi	r18, 0x05	; 5
    270e:	20 f0       	brcs	.+8      	; 0x2718 <qtm_key_sensors_process+0xd8>
    2710:	81 81       	ldd	r24, Z+1	; 0x01
    2712:	92 81       	ldd	r25, Z+2	; 0x02
    2714:	d8 01       	movw	r26, r16
    2716:	0e c0       	rjmp	.+28     	; 0x2734 <qtm_key_sensors_process+0xf4>
    2718:	d8 01       	movw	r26, r16
    271a:	14 96       	adiw	r26, 0x04	; 4
    271c:	8d 91       	ld	r24, X+
    271e:	9c 91       	ld	r25, X
    2720:	15 97       	sbiw	r26, 0x05	; 5
    2722:	41 81       	ldd	r20, Z+1	; 0x01
    2724:	52 81       	ldd	r21, Z+2	; 0x02
    2726:	84 17       	cp	r24, r20
    2728:	95 07       	cpc	r25, r21
    272a:	69 f0       	breq	.+26     	; 0x2746 <qtm_key_sensors_process+0x106>
    272c:	48 17       	cp	r20, r24
    272e:	59 07       	cpc	r21, r25
    2730:	30 f4       	brcc	.+12     	; 0x273e <qtm_key_sensors_process+0xfe>
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	15 96       	adiw	r26, 0x05	; 5
    2736:	9c 93       	st	X, r25
    2738:	8e 93       	st	-X, r24
    273a:	14 97       	sbiw	r26, 0x04	; 4
    273c:	04 c0       	rjmp	.+8      	; 0x2746 <qtm_key_sensors_process+0x106>
    273e:	01 96       	adiw	r24, 0x01	; 1
    2740:	f8 01       	movw	r30, r16
    2742:	95 83       	std	Z+5, r25	; 0x05
    2744:	84 83       	std	Z+4, r24	; 0x04
    2746:	21 50       	subi	r18, 0x01	; 1
    2748:	d8 01       	movw	r26, r16
    274a:	11 96       	adiw	r26, 0x01	; 1
    274c:	2c 93       	st	X, r18
    274e:	38 c1       	rjmp	.+624    	; 0x29c0 <qtm_key_sensors_process+0x380>
    2750:	f8 01       	movw	r30, r16
    2752:	30 c1       	rjmp	.+608    	; 0x29b4 <qtm_key_sensors_process+0x374>
    2754:	d8 01       	movw	r26, r16
    2756:	14 96       	adiw	r26, 0x04	; 4
    2758:	2d 91       	ld	r18, X+
    275a:	3c 91       	ld	r19, X
    275c:	15 97       	sbiw	r26, 0x05	; 5
    275e:	12 96       	adiw	r26, 0x02	; 2
    2760:	8d 91       	ld	r24, X+
    2762:	9c 91       	ld	r25, X
    2764:	13 97       	sbiw	r26, 0x03	; 3
    2766:	dc 01       	movw	r26, r24
    2768:	11 96       	adiw	r26, 0x01	; 1
    276a:	4d 91       	ld	r20, X+
    276c:	5c 91       	ld	r21, X
    276e:	12 97       	sbiw	r26, 0x02	; 2
    2770:	24 17       	cp	r18, r20
    2772:	35 07       	cpc	r19, r21
    2774:	09 f4       	brne	.+2      	; 0x2778 <qtm_key_sensors_process+0x138>
    2776:	32 c1       	rjmp	.+612    	; 0x29dc <qtm_key_sensors_process+0x39c>
    2778:	8e 81       	ldd	r24, Y+6	; 0x06
    277a:	9f 81       	ldd	r25, Y+7	; 0x07
    277c:	42 17       	cp	r20, r18
    277e:	53 07       	cpc	r21, r19
    2780:	e0 f4       	brcc	.+56     	; 0x27ba <qtm_key_sensors_process+0x17a>
    2782:	24 1b       	sub	r18, r20
    2784:	35 0b       	sbc	r19, r21
    2786:	dc 01       	movw	r26, r24
    2788:	aa 0d       	add	r26, r10
    278a:	bb 1d       	adc	r27, r11
    278c:	8c 91       	ld	r24, X
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	05 80       	ldd	r0, Z+5	; 0x05
    2792:	02 c0       	rjmp	.+4      	; 0x2798 <qtm_key_sensors_process+0x158>
    2794:	95 95       	asr	r25
    2796:	87 95       	ror	r24
    2798:	0a 94       	dec	r0
    279a:	e2 f7       	brpl	.-8      	; 0x2794 <qtm_key_sensors_process+0x154>
    279c:	99 27       	eor	r25, r25
    279e:	28 17       	cp	r18, r24
    27a0:	39 07       	cpc	r19, r25
    27a2:	08 f4       	brcc	.+2      	; 0x27a6 <qtm_key_sensors_process+0x166>
    27a4:	1b c1       	rjmp	.+566    	; 0x29dc <qtm_key_sensors_process+0x39c>
    27a6:	84 81       	ldd	r24, Z+4	; 0x04
    27a8:	88 23       	and	r24, r24
    27aa:	09 f4       	brne	.+2      	; 0x27ae <qtm_key_sensors_process+0x16e>
    27ac:	17 c1       	rjmp	.+558    	; 0x29dc <qtm_key_sensors_process+0x39c>
    27ae:	f8 01       	movw	r30, r16
    27b0:	30 82       	st	Z, r3
    27b2:	ea 81       	ldd	r30, Y+2	; 0x02
    27b4:	fb 81       	ldd	r31, Y+3	; 0x03
    27b6:	24 81       	ldd	r18, Z+4	; 0x04
    27b8:	1a c0       	rjmp	.+52     	; 0x27ee <qtm_key_sensors_process+0x1ae>
    27ba:	fc 01       	movw	r30, r24
    27bc:	ea 0d       	add	r30, r10
    27be:	fb 1d       	adc	r31, r11
    27c0:	42 1b       	sub	r20, r18
    27c2:	53 0b       	sbc	r21, r19
    27c4:	80 81       	ld	r24, Z
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	48 17       	cp	r20, r24
    27ca:	59 07       	cpc	r21, r25
    27cc:	08 f4       	brcc	.+2      	; 0x27d0 <qtm_key_sensors_process+0x190>
    27ce:	06 c1       	rjmp	.+524    	; 0x29dc <qtm_key_sensors_process+0x39c>
    27d0:	82 81       	ldd	r24, Z+2	; 0x02
    27d2:	88 23       	and	r24, r24
    27d4:	31 f0       	breq	.+12     	; 0x27e2 <qtm_key_sensors_process+0x1a2>
    27d6:	b4 01       	movw	r22, r8
    27d8:	ce 01       	movw	r24, r28
    27da:	0e 94 8d 12 	call	0x251a	; 0x251a <check_for_aks_block>
    27de:	81 11       	cpse	r24, r1
    27e0:	fd c0       	rjmp	.+506    	; 0x29dc <qtm_key_sensors_process+0x39c>
    27e2:	e4 e0       	ldi	r30, 0x04	; 4
    27e4:	d8 01       	movw	r26, r16
    27e6:	ec 93       	st	X, r30
    27e8:	ea 81       	ldd	r30, Y+2	; 0x02
    27ea:	fb 81       	ldd	r31, Y+3	; 0x03
    27ec:	22 81       	ldd	r18, Z+2	; 0x02
    27ee:	8c 81       	ldd	r24, Y+4	; 0x04
    27f0:	9d 81       	ldd	r25, Y+5	; 0x05
    27f2:	fc 01       	movw	r30, r24
    27f4:	ee 0d       	add	r30, r14
    27f6:	ff 1d       	adc	r31, r15
    27f8:	21 83       	std	Z+1, r18	; 0x01
    27fa:	e2 c0       	rjmp	.+452    	; 0x29c0 <qtm_key_sensors_process+0x380>
    27fc:	d8 01       	movw	r26, r16
    27fe:	14 96       	adiw	r26, 0x04	; 4
    2800:	2d 91       	ld	r18, X+
    2802:	3c 91       	ld	r19, X
    2804:	15 97       	sbiw	r26, 0x05	; 5
    2806:	12 96       	adiw	r26, 0x02	; 2
    2808:	ed 91       	ld	r30, X+
    280a:	fc 91       	ld	r31, X
    280c:	13 97       	sbiw	r26, 0x03	; 3
    280e:	81 81       	ldd	r24, Z+1	; 0x01
    2810:	92 81       	ldd	r25, Z+2	; 0x02
    2812:	82 17       	cp	r24, r18
    2814:	93 07       	cpc	r25, r19
    2816:	10 f4       	brcc	.+4      	; 0x281c <qtm_key_sensors_process+0x1dc>
    2818:	cc 92       	st	X, r12
    281a:	d7 c0       	rjmp	.+430    	; 0x29ca <qtm_key_sensors_process+0x38a>
    281c:	ee 81       	ldd	r30, Y+6	; 0x06
    281e:	ff 81       	ldd	r31, Y+7	; 0x07
    2820:	ea 0d       	add	r30, r10
    2822:	fb 1d       	adc	r31, r11
    2824:	82 1b       	sub	r24, r18
    2826:	93 0b       	sbc	r25, r19
    2828:	20 81       	ld	r18, Z
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	28 17       	cp	r18, r24
    282e:	39 07       	cpc	r19, r25
    2830:	08 f0       	brcs	.+2      	; 0x2834 <qtm_key_sensors_process+0x1f4>
    2832:	c9 c0       	rjmp	.+402    	; 0x29c6 <qtm_key_sensors_process+0x386>
    2834:	82 81       	ldd	r24, Z+2	; 0x02
    2836:	88 23       	and	r24, r24
    2838:	31 f0       	breq	.+12     	; 0x2846 <qtm_key_sensors_process+0x206>
    283a:	b4 01       	movw	r22, r8
    283c:	ce 01       	movw	r24, r28
    283e:	0e 94 8d 12 	call	0x251a	; 0x251a <check_for_aks_block>
    2842:	81 11       	cpse	r24, r1
    2844:	cb c0       	rjmp	.+406    	; 0x29dc <qtm_key_sensors_process+0x39c>
    2846:	f8 01       	movw	r30, r16
    2848:	81 81       	ldd	r24, Z+1	; 0x01
    284a:	88 23       	and	r24, r24
    284c:	09 f4       	brne	.+2      	; 0x2850 <qtm_key_sensors_process+0x210>
    284e:	68 c0       	rjmp	.+208    	; 0x2920 <qtm_key_sensors_process+0x2e0>
    2850:	81 50       	subi	r24, 0x01	; 1
    2852:	81 83       	std	Z+1, r24	; 0x01
    2854:	b5 c0       	rjmp	.+362    	; 0x29c0 <qtm_key_sensors_process+0x380>
    2856:	a8 81       	ld	r26, Y
    2858:	b9 81       	ldd	r27, Y+1	; 0x01
    285a:	80 85       	ldd	r24, Z+8	; 0x08
    285c:	13 96       	adiw	r26, 0x03	; 3
    285e:	8c 93       	st	X, r24
    2860:	ec 81       	ldd	r30, Y+4	; 0x04
    2862:	fd 81       	ldd	r31, Y+5	; 0x05
    2864:	ee 0d       	add	r30, r14
    2866:	ff 1d       	adc	r31, r15
    2868:	44 81       	ldd	r20, Z+4	; 0x04
    286a:	55 81       	ldd	r21, Z+5	; 0x05
    286c:	a2 81       	ldd	r26, Z+2	; 0x02
    286e:	b3 81       	ldd	r27, Z+3	; 0x03
    2870:	11 96       	adiw	r26, 0x01	; 1
    2872:	8d 91       	ld	r24, X+
    2874:	9c 91       	ld	r25, X
    2876:	12 97       	sbiw	r26, 0x02	; 2
    2878:	84 17       	cp	r24, r20
    287a:	95 07       	cpc	r25, r21
    287c:	c0 f0       	brcs	.+48     	; 0x28ae <qtm_key_sensors_process+0x26e>
    287e:	ae 81       	ldd	r26, Y+6	; 0x06
    2880:	bf 81       	ldd	r27, Y+7	; 0x07
    2882:	aa 0d       	add	r26, r10
    2884:	bb 1d       	adc	r27, r11
    2886:	6c 91       	ld	r22, X
    2888:	26 2f       	mov	r18, r22
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	11 96       	adiw	r26, 0x01	; 1
    288e:	7c 91       	ld	r23, X
    2890:	7f 5f       	subi	r23, 0xFF	; 255
    2892:	02 c0       	rjmp	.+4      	; 0x2898 <qtm_key_sensors_process+0x258>
    2894:	35 95       	asr	r19
    2896:	27 95       	ror	r18
    2898:	7a 95       	dec	r23
    289a:	e2 f7       	brpl	.-8      	; 0x2894 <qtm_key_sensors_process+0x254>
    289c:	84 1b       	sub	r24, r20
    289e:	95 0b       	sbc	r25, r21
    28a0:	62 1b       	sub	r22, r18
    28a2:	26 2f       	mov	r18, r22
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	28 17       	cp	r18, r24
    28a8:	39 07       	cpc	r19, r25
    28aa:	08 f4       	brcc	.+2      	; 0x28ae <qtm_key_sensors_process+0x26e>
    28ac:	95 c0       	rjmp	.+298    	; 0x29d8 <qtm_key_sensors_process+0x398>
    28ae:	70 82       	st	Z, r7
    28b0:	ea 81       	ldd	r30, Y+2	; 0x02
    28b2:	fb 81       	ldd	r31, Y+3	; 0x03
    28b4:	22 81       	ldd	r18, Z+2	; 0x02
    28b6:	8c 81       	ldd	r24, Y+4	; 0x04
    28b8:	9d 81       	ldd	r25, Y+5	; 0x05
    28ba:	fc 01       	movw	r30, r24
    28bc:	ee 0d       	add	r30, r14
    28be:	ff 1d       	adc	r31, r15
    28c0:	21 83       	std	Z+1, r18	; 0x01
    28c2:	42 c0       	rjmp	.+132    	; 0x2948 <qtm_key_sensors_process+0x308>
    28c4:	d8 01       	movw	r26, r16
    28c6:	14 96       	adiw	r26, 0x04	; 4
    28c8:	6d 91       	ld	r22, X+
    28ca:	7c 91       	ld	r23, X
    28cc:	15 97       	sbiw	r26, 0x05	; 5
    28ce:	12 96       	adiw	r26, 0x02	; 2
    28d0:	ed 91       	ld	r30, X+
    28d2:	fc 91       	ld	r31, X
    28d4:	13 97       	sbiw	r26, 0x03	; 3
    28d6:	21 81       	ldd	r18, Z+1	; 0x01
    28d8:	32 81       	ldd	r19, Z+2	; 0x02
    28da:	26 17       	cp	r18, r22
    28dc:	37 07       	cpc	r19, r23
    28de:	58 f4       	brcc	.+22     	; 0x28f6 <qtm_key_sensors_process+0x2b6>
    28e0:	11 96       	adiw	r26, 0x01	; 1
    28e2:	8c 91       	ld	r24, X
    28e4:	11 97       	sbiw	r26, 0x01	; 1
    28e6:	81 11       	cpse	r24, r1
    28e8:	02 c0       	rjmp	.+4      	; 0x28ee <qtm_key_sensors_process+0x2ae>
    28ea:	cc 92       	st	X, r12
    28ec:	75 c0       	rjmp	.+234    	; 0x29d8 <qtm_key_sensors_process+0x398>
    28ee:	81 50       	subi	r24, 0x01	; 1
    28f0:	f8 01       	movw	r30, r16
    28f2:	81 83       	std	Z+1, r24	; 0x01
    28f4:	71 c0       	rjmp	.+226    	; 0x29d8 <qtm_key_sensors_process+0x398>
    28f6:	ee 81       	ldd	r30, Y+6	; 0x06
    28f8:	ff 81       	ldd	r31, Y+7	; 0x07
    28fa:	ea 0d       	add	r30, r10
    28fc:	fb 1d       	adc	r31, r11
    28fe:	80 81       	ld	r24, Z
    2900:	48 2f       	mov	r20, r24
    2902:	50 e0       	ldi	r21, 0x00	; 0
    2904:	91 81       	ldd	r25, Z+1	; 0x01
    2906:	9f 5f       	subi	r25, 0xFF	; 255
    2908:	02 c0       	rjmp	.+4      	; 0x290e <qtm_key_sensors_process+0x2ce>
    290a:	55 95       	asr	r21
    290c:	47 95       	ror	r20
    290e:	9a 95       	dec	r25
    2910:	e2 f7       	brpl	.-8      	; 0x290a <qtm_key_sensors_process+0x2ca>
    2912:	26 1b       	sub	r18, r22
    2914:	37 0b       	sbc	r19, r23
    2916:	84 1b       	sub	r24, r20
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	82 17       	cp	r24, r18
    291c:	93 07       	cpc	r25, r19
    291e:	60 f4       	brcc	.+24     	; 0x2938 <qtm_key_sensors_process+0x2f8>
    2920:	d8 01       	movw	r26, r16
    2922:	6c 92       	st	X, r6
    2924:	ea 81       	ldd	r30, Y+2	; 0x02
    2926:	fb 81       	ldd	r31, Y+3	; 0x03
    2928:	23 81       	ldd	r18, Z+3	; 0x03
    292a:	8c 81       	ldd	r24, Y+4	; 0x04
    292c:	9d 81       	ldd	r25, Y+5	; 0x05
    292e:	fc 01       	movw	r30, r24
    2930:	ee 0d       	add	r30, r14
    2932:	ff 1d       	adc	r31, r15
    2934:	21 83       	std	Z+1, r18	; 0x01
    2936:	50 c0       	rjmp	.+160    	; 0x29d8 <qtm_key_sensors_process+0x398>
    2938:	f8 01       	movw	r30, r16
    293a:	81 81       	ldd	r24, Z+1	; 0x01
    293c:	81 11       	cpse	r24, r1
    293e:	02 c0       	rjmp	.+4      	; 0x2944 <qtm_key_sensors_process+0x304>
    2940:	c0 82       	st	Z, r12
    2942:	4a c0       	rjmp	.+148    	; 0x29d8 <qtm_key_sensors_process+0x398>
    2944:	81 50       	subi	r24, 0x01	; 1
    2946:	81 83       	std	Z+1, r24	; 0x01
    2948:	22 24       	eor	r2, r2
    294a:	23 94       	inc	r2
    294c:	39 c0       	rjmp	.+114    	; 0x29c0 <qtm_key_sensors_process+0x380>
    294e:	d8 01       	movw	r26, r16
    2950:	14 96       	adiw	r26, 0x04	; 4
    2952:	2d 91       	ld	r18, X+
    2954:	3c 91       	ld	r19, X
    2956:	15 97       	sbiw	r26, 0x05	; 5
    2958:	12 96       	adiw	r26, 0x02	; 2
    295a:	8d 91       	ld	r24, X+
    295c:	9c 91       	ld	r25, X
    295e:	13 97       	sbiw	r26, 0x03	; 3
    2960:	dc 01       	movw	r26, r24
    2962:	11 96       	adiw	r26, 0x01	; 1
    2964:	8d 91       	ld	r24, X+
    2966:	9c 91       	ld	r25, X
    2968:	12 97       	sbiw	r26, 0x02	; 2
    296a:	82 17       	cp	r24, r18
    296c:	93 07       	cpc	r25, r19
    296e:	58 f5       	brcc	.+86     	; 0x29c6 <qtm_key_sensors_process+0x386>
    2970:	28 1b       	sub	r18, r24
    2972:	39 0b       	sbc	r19, r25
    2974:	ae 81       	ldd	r26, Y+6	; 0x06
    2976:	bf 81       	ldd	r27, Y+7	; 0x07
    2978:	aa 0d       	add	r26, r10
    297a:	bb 1d       	adc	r27, r11
    297c:	8c 91       	ld	r24, X
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	05 80       	ldd	r0, Z+5	; 0x05
    2982:	02 c0       	rjmp	.+4      	; 0x2988 <qtm_key_sensors_process+0x348>
    2984:	95 95       	asr	r25
    2986:	87 95       	ror	r24
    2988:	0a 94       	dec	r0
    298a:	e2 f7       	brpl	.-8      	; 0x2984 <qtm_key_sensors_process+0x344>
    298c:	99 27       	eor	r25, r25
    298e:	28 17       	cp	r18, r24
    2990:	39 07       	cpc	r19, r25
    2992:	c8 f0       	brcs	.+50     	; 0x29c6 <qtm_key_sensors_process+0x386>
    2994:	d8 01       	movw	r26, r16
    2996:	11 96       	adiw	r26, 0x01	; 1
    2998:	8c 91       	ld	r24, X
    299a:	11 97       	sbiw	r26, 0x01	; 1
    299c:	81 11       	cpse	r24, r1
    299e:	0c c0       	rjmp	.+24     	; 0x29b8 <qtm_key_sensors_process+0x378>
    29a0:	e1 e0       	ldi	r30, 0x01	; 1
    29a2:	ec 93       	st	X, r30
    29a4:	8c 81       	ldd	r24, Y+4	; 0x04
    29a6:	9d 81       	ldd	r25, Y+5	; 0x05
    29a8:	fc 01       	movw	r30, r24
    29aa:	ee 0d       	add	r30, r14
    29ac:	ff 1d       	adc	r31, r15
    29ae:	02 80       	ldd	r0, Z+2	; 0x02
    29b0:	f3 81       	ldd	r31, Z+3	; 0x03
    29b2:	e0 2d       	mov	r30, r0
    29b4:	c0 82       	st	Z, r12
    29b6:	12 c0       	rjmp	.+36     	; 0x29dc <qtm_key_sensors_process+0x39c>
    29b8:	81 50       	subi	r24, 0x01	; 1
    29ba:	d8 01       	movw	r26, r16
    29bc:	11 96       	adiw	r26, 0x01	; 1
    29be:	8c 93       	st	X, r24
    29c0:	dd 24       	eor	r13, r13
    29c2:	d3 94       	inc	r13
    29c4:	0b c0       	rjmp	.+22     	; 0x29dc <qtm_key_sensors_process+0x39c>
    29c6:	f8 01       	movw	r30, r16
    29c8:	c0 82       	st	Z, r12
    29ca:	8c 81       	ldd	r24, Y+4	; 0x04
    29cc:	9d 81       	ldd	r25, Y+5	; 0x05
    29ce:	fc 01       	movw	r30, r24
    29d0:	ee 0d       	add	r30, r14
    29d2:	ff 1d       	adc	r31, r15
    29d4:	11 82       	std	Z+1, r1	; 0x01
    29d6:	02 c0       	rjmp	.+4      	; 0x29dc <qtm_key_sensors_process+0x39c>
    29d8:	22 24       	eor	r2, r2
    29da:	23 94       	inc	r2
    29dc:	ff ef       	ldi	r31, 0xFF	; 255
    29de:	8f 1a       	sub	r8, r31
    29e0:	9f 0a       	sbc	r9, r31
    29e2:	83 e0       	ldi	r24, 0x03	; 3
    29e4:	a8 0e       	add	r10, r24
    29e6:	b1 1c       	adc	r11, r1
    29e8:	53 ce       	rjmp	.-858    	; 0x2690 <qtm_key_sensors_process+0x50>
    29ea:	e8 81       	ld	r30, Y
    29ec:	f9 81       	ldd	r31, Y+1	; 0x01
    29ee:	80 81       	ld	r24, Z
    29f0:	87 ff       	sbrs	r24, 7
    29f2:	23 c0       	rjmp	.+70     	; 0x2a3a <qtm_key_sensors_process+0x3fa>
    29f4:	40 e0       	ldi	r20, 0x00	; 0
    29f6:	50 e0       	ldi	r21, 0x00	; 0
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	ea 81       	ldd	r30, Y+2	; 0x02
    29fe:	fb 81       	ldd	r31, Y+3	; 0x03
    2a00:	80 81       	ld	r24, Z
    2a02:	91 81       	ldd	r25, Z+1	; 0x01
    2a04:	28 17       	cp	r18, r24
    2a06:	39 07       	cpc	r19, r25
    2a08:	98 f4       	brcc	.+38     	; 0x2a30 <qtm_key_sensors_process+0x3f0>
    2a0a:	ec 81       	ldd	r30, Y+4	; 0x04
    2a0c:	fd 81       	ldd	r31, Y+5	; 0x05
    2a0e:	e4 0f       	add	r30, r20
    2a10:	f5 1f       	adc	r31, r21
    2a12:	a2 81       	ldd	r26, Z+2	; 0x02
    2a14:	b3 81       	ldd	r27, Z+3	; 0x03
    2a16:	8c 91       	ld	r24, X
    2a18:	80 fd       	sbrc	r24, 0
    2a1a:	05 c0       	rjmp	.+10     	; 0x2a26 <qtm_key_sensors_process+0x3e6>
    2a1c:	90 81       	ld	r25, Z
    2a1e:	97 7f       	andi	r25, 0xF7	; 247
    2a20:	11 f0       	breq	.+4      	; 0x2a26 <qtm_key_sensors_process+0x3e6>
    2a22:	81 60       	ori	r24, 0x01	; 1
    2a24:	8c 93       	st	X, r24
    2a26:	2f 5f       	subi	r18, 0xFF	; 255
    2a28:	3f 4f       	sbci	r19, 0xFF	; 255
    2a2a:	4a 5f       	subi	r20, 0xFA	; 250
    2a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a2e:	e6 cf       	rjmp	.-52     	; 0x29fc <qtm_key_sensors_process+0x3bc>
    2a30:	e8 81       	ld	r30, Y
    2a32:	f9 81       	ldd	r31, Y+1	; 0x01
    2a34:	80 81       	ld	r24, Z
    2a36:	8f 77       	andi	r24, 0x7F	; 127
    2a38:	80 83       	st	Z, r24
    2a3a:	d1 10       	cpse	r13, r1
    2a3c:	07 c0       	rjmp	.+14     	; 0x2a4c <qtm_key_sensors_process+0x40c>
    2a3e:	e8 81       	ld	r30, Y
    2a40:	f9 81       	ldd	r31, Y+1	; 0x01
    2a42:	21 10       	cpse	r2, r1
    2a44:	6f c0       	rjmp	.+222    	; 0x2b24 <qtm_key_sensors_process+0x4e4>
    2a46:	80 81       	ld	r24, Z
    2a48:	8e 7f       	andi	r24, 0xFE	; 254
    2a4a:	6e c0       	rjmp	.+220    	; 0x2b28 <qtm_key_sensors_process+0x4e8>
    2a4c:	ea 81       	ldd	r30, Y+2	; 0x02
    2a4e:	fb 81       	ldd	r31, Y+3	; 0x03
    2a50:	81 85       	ldd	r24, Z+9	; 0x09
    2a52:	88 23       	and	r24, r24
    2a54:	a1 f3       	breq	.-24     	; 0x2a3e <qtm_key_sensors_process+0x3fe>
    2a56:	e8 81       	ld	r30, Y
    2a58:	f9 81       	ldd	r31, Y+1	; 0x01
    2a5a:	80 81       	ld	r24, Z
    2a5c:	80 68       	ori	r24, 0x80	; 128
    2a5e:	80 83       	st	Z, r24
    2a60:	ea 81       	ldd	r30, Y+2	; 0x02
    2a62:	fb 81       	ldd	r31, Y+3	; 0x03
    2a64:	81 85       	ldd	r24, Z+9	; 0x09
    2a66:	81 30       	cpi	r24, 0x01	; 1
    2a68:	51 f7       	brne	.-44     	; 0x2a3e <qtm_key_sensors_process+0x3fe>
    2a6a:	40 e0       	ldi	r20, 0x00	; 0
    2a6c:	50 e0       	ldi	r21, 0x00	; 0
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	96 e0       	ldi	r25, 0x06	; 6
    2a74:	d9 2e       	mov	r13, r25
    2a76:	ea 81       	ldd	r30, Y+2	; 0x02
    2a78:	fb 81       	ldd	r31, Y+3	; 0x03
    2a7a:	60 81       	ld	r22, Z
    2a7c:	71 81       	ldd	r23, Z+1	; 0x01
    2a7e:	26 17       	cp	r18, r22
    2a80:	37 07       	cpc	r19, r23
    2a82:	e8 f6       	brcc	.-70     	; 0x2a3e <qtm_key_sensors_process+0x3fe>
    2a84:	0c 81       	ldd	r16, Y+4	; 0x04
    2a86:	1d 81       	ldd	r17, Y+5	; 0x05
    2a88:	fa 01       	movw	r30, r20
    2a8a:	ee 0f       	add	r30, r30
    2a8c:	ff 1f       	adc	r31, r31
    2a8e:	e0 0f       	add	r30, r16
    2a90:	f1 1f       	adc	r31, r17
    2a92:	80 81       	ld	r24, Z
    2a94:	98 2f       	mov	r25, r24
    2a96:	97 7f       	andi	r25, 0xF7	; 247
    2a98:	a1 f1       	breq	.+104    	; 0x2b02 <qtm_key_sensors_process+0x4c2>
    2a9a:	85 38       	cpi	r24, 0x85	; 133
    2a9c:	11 f0       	breq	.+4      	; 0x2aa2 <qtm_key_sensors_process+0x462>
    2a9e:	83 30       	cpi	r24, 0x03	; 3
    2aa0:	b1 f5       	brne	.+108    	; 0x2b0e <qtm_key_sensors_process+0x4ce>
    2aa2:	ee 80       	ldd	r14, Y+6	; 0x06
    2aa4:	ff 80       	ldd	r15, Y+7	; 0x07
    2aa6:	d7 01       	movw	r26, r14
    2aa8:	a4 0f       	add	r26, r20
    2aaa:	b5 1f       	adc	r27, r21
    2aac:	12 96       	adiw	r26, 0x02	; 2
    2aae:	bc 90       	ld	r11, X
    2ab0:	bb 20       	and	r11, r11
    2ab2:	39 f1       	breq	.+78     	; 0x2b02 <qtm_key_sensors_process+0x4c2>
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	c1 2c       	mov	r12, r1
    2aba:	86 17       	cp	r24, r22
    2abc:	97 07       	cpc	r25, r23
    2abe:	f8 f4       	brcc	.+62     	; 0x2afe <qtm_key_sensors_process+0x4be>
    2ac0:	28 17       	cp	r18, r24
    2ac2:	39 07       	cpc	r19, r25
    2ac4:	d1 f0       	breq	.+52     	; 0x2afa <qtm_key_sensors_process+0x4ba>
    2ac6:	d8 9e       	mul	r13, r24
    2ac8:	d0 01       	movw	r26, r0
    2aca:	d9 9e       	mul	r13, r25
    2acc:	b0 0d       	add	r27, r0
    2ace:	11 24       	eor	r1, r1
    2ad0:	a0 0f       	add	r26, r16
    2ad2:	b1 1f       	adc	r27, r17
    2ad4:	ac 91       	ld	r26, X
    2ad6:	a4 30       	cpi	r26, 0x04	; 4
    2ad8:	11 f0       	breq	.+4      	; 0x2ade <qtm_key_sensors_process+0x49e>
    2ada:	a6 38       	cpi	r26, 0x86	; 134
    2adc:	71 f4       	brne	.+28     	; 0x2afa <qtm_key_sensors_process+0x4ba>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	aa 0f       	add	r26, r26
    2ae2:	bb 1f       	adc	r27, r27
    2ae4:	a8 0f       	add	r26, r24
    2ae6:	b9 1f       	adc	r27, r25
    2ae8:	ae 0d       	add	r26, r14
    2aea:	bf 1d       	adc	r27, r15
    2aec:	12 96       	adiw	r26, 0x02	; 2
    2aee:	ac 91       	ld	r26, X
    2af0:	ba 12       	cpse	r11, r26
    2af2:	03 c0       	rjmp	.+6      	; 0x2afa <qtm_key_sensors_process+0x4ba>
    2af4:	cb 01       	movw	r24, r22
    2af6:	cc 24       	eor	r12, r12
    2af8:	c3 94       	inc	r12
    2afa:	01 96       	adiw	r24, 0x01	; 1
    2afc:	de cf       	rjmp	.-68     	; 0x2aba <qtm_key_sensors_process+0x47a>
    2afe:	c1 10       	cpse	r12, r1
    2b00:	06 c0       	rjmp	.+12     	; 0x2b0e <qtm_key_sensors_process+0x4ce>
    2b02:	02 80       	ldd	r0, Z+2	; 0x02
    2b04:	f3 81       	ldd	r31, Z+3	; 0x03
    2b06:	e0 2d       	mov	r30, r0
    2b08:	80 81       	ld	r24, Z
    2b0a:	8e 7f       	andi	r24, 0xFE	; 254
    2b0c:	05 c0       	rjmp	.+10     	; 0x2b18 <qtm_key_sensors_process+0x4d8>
    2b0e:	02 80       	ldd	r0, Z+2	; 0x02
    2b10:	f3 81       	ldd	r31, Z+3	; 0x03
    2b12:	e0 2d       	mov	r30, r0
    2b14:	80 81       	ld	r24, Z
    2b16:	81 60       	ori	r24, 0x01	; 1
    2b18:	80 83       	st	Z, r24
    2b1a:	2f 5f       	subi	r18, 0xFF	; 255
    2b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b1e:	4d 5f       	subi	r20, 0xFD	; 253
    2b20:	5f 4f       	sbci	r21, 0xFF	; 255
    2b22:	a9 cf       	rjmp	.-174    	; 0x2a76 <qtm_key_sensors_process+0x436>
    2b24:	80 81       	ld	r24, Z
    2b26:	81 60       	ori	r24, 0x01	; 1
    2b28:	80 83       	st	Z, r24
    2b2a:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <qtm_local_ms_timecount>
    2b2e:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <qtm_local_ms_timecount+0x1>
    2b32:	e8 81       	ld	r30, Y
    2b34:	f9 81       	ldd	r31, Y+1	; 0x01
    2b36:	21 81       	ldd	r18, Z+1	; 0x01
    2b38:	32 81       	ldd	r19, Z+2	; 0x02
    2b3a:	a9 01       	movw	r20, r18
    2b3c:	48 53       	subi	r20, 0x38	; 56
    2b3e:	5f 4f       	sbci	r21, 0xFF	; 255
    2b40:	48 17       	cp	r20, r24
    2b42:	59 07       	cpc	r21, r25
    2b44:	38 f4       	brcc	.+14     	; 0x2b54 <qtm_key_sensors_process+0x514>
    2b46:	82 1b       	sub	r24, r18
    2b48:	93 0b       	sbc	r25, r19
    2b4a:	aa 24       	eor	r10, r10
    2b4c:	a3 94       	inc	r10
    2b4e:	a3 e0       	ldi	r26, 0x03	; 3
    2b50:	ba 2e       	mov	r11, r26
    2b52:	44 c0       	rjmp	.+136    	; 0x2bdc <qtm_key_sensors_process+0x59c>
    2b54:	82 17       	cp	r24, r18
    2b56:	93 07       	cpc	r25, r19
    2b58:	10 f0       	brcs	.+4      	; 0x2b5e <qtm_key_sensors_process+0x51e>
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	04 c1       	rjmp	.+520    	; 0x2d66 <qtm_key_sensors_process+0x726>
    2b5e:	82 1b       	sub	r24, r18
    2b60:	93 0b       	sbc	r25, r19
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	89 3c       	cpi	r24, 0xC9	; 201
    2b66:	91 05       	cpc	r25, r1
    2b68:	c0 f3       	brcs	.-16     	; 0x2b5a <qtm_key_sensors_process+0x51a>
    2b6a:	ef cf       	rjmp	.-34     	; 0x2b4a <qtm_key_sensors_process+0x50a>
    2b6c:	88 5c       	subi	r24, 0xC8	; 200
    2b6e:	91 09       	sbc	r25, r1
    2b70:	e8 81       	ld	r30, Y
    2b72:	f9 81       	ldd	r31, Y+1	; 0x01
    2b74:	21 81       	ldd	r18, Z+1	; 0x01
    2b76:	32 81       	ldd	r19, Z+2	; 0x02
    2b78:	28 53       	subi	r18, 0x38	; 56
    2b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b7c:	32 83       	std	Z+2, r19	; 0x02
    2b7e:	21 83       	std	Z+1, r18	; 0x01
    2b80:	23 81       	ldd	r18, Z+3	; 0x03
    2b82:	21 11       	cpse	r18, r1
    2b84:	96 c0       	rjmp	.+300    	; 0x2cb2 <qtm_key_sensors_process+0x672>
    2b86:	24 81       	ldd	r18, Z+4	; 0x04
    2b88:	22 23       	and	r18, r18
    2b8a:	11 f0       	breq	.+4      	; 0x2b90 <qtm_key_sensors_process+0x550>
    2b8c:	21 50       	subi	r18, 0x01	; 1
    2b8e:	24 83       	std	Z+4, r18	; 0x04
    2b90:	e8 81       	ld	r30, Y
    2b92:	f9 81       	ldd	r31, Y+1	; 0x01
    2b94:	25 81       	ldd	r18, Z+5	; 0x05
    2b96:	22 23       	and	r18, r18
    2b98:	11 f0       	breq	.+4      	; 0x2b9e <qtm_key_sensors_process+0x55e>
    2b9a:	21 50       	subi	r18, 0x01	; 1
    2b9c:	25 83       	std	Z+5, r18	; 0x05
    2b9e:	8a 80       	ldd	r8, Y+2	; 0x02
    2ba0:	9b 80       	ldd	r9, Y+3	; 0x03
    2ba2:	d4 01       	movw	r26, r8
    2ba4:	16 96       	adiw	r26, 0x06	; 6
    2ba6:	2c 91       	ld	r18, X
    2ba8:	16 97       	sbiw	r26, 0x06	; 6
    2baa:	21 11       	cpse	r18, r1
    2bac:	1b c0       	rjmp	.+54     	; 0x2be4 <qtm_key_sensors_process+0x5a4>
    2bae:	8a 80       	ldd	r8, Y+2	; 0x02
    2bb0:	9b 80       	ldd	r9, Y+3	; 0x03
    2bb2:	f4 01       	movw	r30, r8
    2bb4:	27 81       	ldd	r18, Z+7	; 0x07
    2bb6:	21 11       	cpse	r18, r1
    2bb8:	48 c0       	rjmp	.+144    	; 0x2c4a <qtm_key_sensors_process+0x60a>
    2bba:	ea 81       	ldd	r30, Y+2	; 0x02
    2bbc:	fb 81       	ldd	r31, Y+3	; 0x03
    2bbe:	23 81       	ldd	r18, Z+3	; 0x03
    2bc0:	22 23       	and	r18, r18
    2bc2:	61 f0       	breq	.+24     	; 0x2bdc <qtm_key_sensors_process+0x59c>
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	a0 e0       	ldi	r26, 0x00	; 0
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	ea 81       	ldd	r30, Y+2	; 0x02
    2bce:	fb 81       	ldd	r31, Y+3	; 0x03
    2bd0:	40 81       	ld	r20, Z
    2bd2:	51 81       	ldd	r21, Z+1	; 0x01
    2bd4:	a4 17       	cp	r26, r20
    2bd6:	b5 07       	cpc	r27, r21
    2bd8:	08 f4       	brcc	.+2      	; 0x2bdc <qtm_key_sensors_process+0x59c>
    2bda:	6e c0       	rjmp	.+220    	; 0x2cb8 <qtm_key_sensors_process+0x678>
    2bdc:	89 3c       	cpi	r24, 0xC9	; 201
    2bde:	91 05       	cpc	r25, r1
    2be0:	28 f6       	brcc	.-118    	; 0x2b6c <qtm_key_sensors_process+0x52c>
    2be2:	bb cf       	rjmp	.-138    	; 0x2b5a <qtm_key_sensors_process+0x51a>
    2be4:	08 81       	ld	r16, Y
    2be6:	19 81       	ldd	r17, Y+1	; 0x01
    2be8:	f8 01       	movw	r30, r16
    2bea:	24 81       	ldd	r18, Z+4	; 0x04
    2bec:	21 11       	cpse	r18, r1
    2bee:	df cf       	rjmp	.-66     	; 0x2bae <qtm_key_sensors_process+0x56e>
    2bf0:	ed 90       	ld	r14, X+
    2bf2:	fc 90       	ld	r15, X
    2bf4:	60 e0       	ldi	r22, 0x00	; 0
    2bf6:	70 e0       	ldi	r23, 0x00	; 0
    2bf8:	40 e0       	ldi	r20, 0x00	; 0
    2bfa:	50 e0       	ldi	r21, 0x00	; 0
    2bfc:	4e 15       	cp	r20, r14
    2bfe:	5f 05       	cpc	r21, r15
    2c00:	f1 f0       	breq	.+60     	; 0x2c3e <qtm_key_sensors_process+0x5fe>
    2c02:	ec 81       	ldd	r30, Y+4	; 0x04
    2c04:	fd 81       	ldd	r31, Y+5	; 0x05
    2c06:	e6 0f       	add	r30, r22
    2c08:	f7 1f       	adc	r31, r23
    2c0a:	20 81       	ld	r18, Z
    2c0c:	23 30       	cpi	r18, 0x03	; 3
    2c0e:	11 f0       	breq	.+4      	; 0x2c14 <qtm_key_sensors_process+0x5d4>
    2c10:	28 30       	cpi	r18, 0x08	; 8
    2c12:	81 f4       	brne	.+32     	; 0x2c34 <qtm_key_sensors_process+0x5f4>
    2c14:	24 81       	ldd	r18, Z+4	; 0x04
    2c16:	35 81       	ldd	r19, Z+5	; 0x05
    2c18:	c2 80       	ldd	r12, Z+2	; 0x02
    2c1a:	d3 80       	ldd	r13, Z+3	; 0x03
    2c1c:	d6 01       	movw	r26, r12
    2c1e:	11 96       	adiw	r26, 0x01	; 1
    2c20:	cd 90       	ld	r12, X+
    2c22:	dc 90       	ld	r13, X
    2c24:	12 97       	sbiw	r26, 0x02	; 2
    2c26:	2c 15       	cp	r18, r12
    2c28:	3d 05       	cpc	r19, r13
    2c2a:	20 f4       	brcc	.+8      	; 0x2c34 <qtm_key_sensors_process+0x5f4>
    2c2c:	2f 5f       	subi	r18, 0xFF	; 255
    2c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c30:	35 83       	std	Z+5, r19	; 0x05
    2c32:	24 83       	std	Z+4, r18	; 0x04
    2c34:	4f 5f       	subi	r20, 0xFF	; 255
    2c36:	5f 4f       	sbci	r21, 0xFF	; 255
    2c38:	6a 5f       	subi	r22, 0xFA	; 250
    2c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c3c:	df cf       	rjmp	.-66     	; 0x2bfc <qtm_key_sensors_process+0x5bc>
    2c3e:	f4 01       	movw	r30, r8
    2c40:	26 81       	ldd	r18, Z+6	; 0x06
    2c42:	d8 01       	movw	r26, r16
    2c44:	14 96       	adiw	r26, 0x04	; 4
    2c46:	2c 93       	st	X, r18
    2c48:	b2 cf       	rjmp	.-156    	; 0x2bae <qtm_key_sensors_process+0x56e>
    2c4a:	08 81       	ld	r16, Y
    2c4c:	19 81       	ldd	r17, Y+1	; 0x01
    2c4e:	d8 01       	movw	r26, r16
    2c50:	15 96       	adiw	r26, 0x05	; 5
    2c52:	2c 91       	ld	r18, X
    2c54:	21 11       	cpse	r18, r1
    2c56:	b1 cf       	rjmp	.-158    	; 0x2bba <qtm_key_sensors_process+0x57a>
    2c58:	e0 80       	ld	r14, Z
    2c5a:	f1 80       	ldd	r15, Z+1	; 0x01
    2c5c:	60 e0       	ldi	r22, 0x00	; 0
    2c5e:	70 e0       	ldi	r23, 0x00	; 0
    2c60:	40 e0       	ldi	r20, 0x00	; 0
    2c62:	50 e0       	ldi	r21, 0x00	; 0
    2c64:	4e 15       	cp	r20, r14
    2c66:	5f 05       	cpc	r21, r15
    2c68:	f1 f0       	breq	.+60     	; 0x2ca6 <qtm_key_sensors_process+0x666>
    2c6a:	ec 81       	ldd	r30, Y+4	; 0x04
    2c6c:	fd 81       	ldd	r31, Y+5	; 0x05
    2c6e:	e6 0f       	add	r30, r22
    2c70:	f7 1f       	adc	r31, r23
    2c72:	20 81       	ld	r18, Z
    2c74:	23 30       	cpi	r18, 0x03	; 3
    2c76:	11 f0       	breq	.+4      	; 0x2c7c <qtm_key_sensors_process+0x63c>
    2c78:	28 30       	cpi	r18, 0x08	; 8
    2c7a:	81 f4       	brne	.+32     	; 0x2c9c <qtm_key_sensors_process+0x65c>
    2c7c:	24 81       	ldd	r18, Z+4	; 0x04
    2c7e:	35 81       	ldd	r19, Z+5	; 0x05
    2c80:	c2 80       	ldd	r12, Z+2	; 0x02
    2c82:	d3 80       	ldd	r13, Z+3	; 0x03
    2c84:	d6 01       	movw	r26, r12
    2c86:	11 96       	adiw	r26, 0x01	; 1
    2c88:	cd 90       	ld	r12, X+
    2c8a:	dc 90       	ld	r13, X
    2c8c:	12 97       	sbiw	r26, 0x02	; 2
    2c8e:	c2 16       	cp	r12, r18
    2c90:	d3 06       	cpc	r13, r19
    2c92:	20 f4       	brcc	.+8      	; 0x2c9c <qtm_key_sensors_process+0x65c>
    2c94:	21 50       	subi	r18, 0x01	; 1
    2c96:	31 09       	sbc	r19, r1
    2c98:	35 83       	std	Z+5, r19	; 0x05
    2c9a:	24 83       	std	Z+4, r18	; 0x04
    2c9c:	4f 5f       	subi	r20, 0xFF	; 255
    2c9e:	5f 4f       	sbci	r21, 0xFF	; 255
    2ca0:	6a 5f       	subi	r22, 0xFA	; 250
    2ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca4:	df cf       	rjmp	.-66     	; 0x2c64 <qtm_key_sensors_process+0x624>
    2ca6:	f4 01       	movw	r30, r8
    2ca8:	27 81       	ldd	r18, Z+7	; 0x07
    2caa:	d8 01       	movw	r26, r16
    2cac:	15 96       	adiw	r26, 0x05	; 5
    2cae:	2c 93       	st	X, r18
    2cb0:	84 cf       	rjmp	.-248    	; 0x2bba <qtm_key_sensors_process+0x57a>
    2cb2:	21 50       	subi	r18, 0x01	; 1
    2cb4:	23 83       	std	Z+3, r18	; 0x03
    2cb6:	81 cf       	rjmp	.-254    	; 0x2bba <qtm_key_sensors_process+0x57a>
    2cb8:	a9 01       	movw	r20, r18
    2cba:	44 0f       	add	r20, r20
    2cbc:	55 1f       	adc	r21, r21
    2cbe:	ec 81       	ldd	r30, Y+4	; 0x04
    2cc0:	fd 81       	ldd	r31, Y+5	; 0x05
    2cc2:	e4 0f       	add	r30, r20
    2cc4:	f5 1f       	adc	r31, r21
    2cc6:	60 81       	ld	r22, Z
    2cc8:	65 38       	cpi	r22, 0x85	; 133
    2cca:	09 f0       	breq	.+2      	; 0x2cce <qtm_key_sensors_process+0x68e>
    2ccc:	47 c0       	rjmp	.+142    	; 0x2d5c <qtm_key_sensors_process+0x71c>
    2cce:	61 81       	ldd	r22, Z+1	; 0x01
    2cd0:	66 23       	and	r22, r22
    2cd2:	19 f0       	breq	.+6      	; 0x2cda <qtm_key_sensors_process+0x69a>
    2cd4:	61 50       	subi	r22, 0x01	; 1
    2cd6:	61 83       	std	Z+1, r22	; 0x01
    2cd8:	41 c0       	rjmp	.+130    	; 0x2d5c <qtm_key_sensors_process+0x71c>
    2cda:	a0 82       	st	Z, r10
    2cdc:	6c 81       	ldd	r22, Y+4	; 0x04
    2cde:	7d 81       	ldd	r23, Y+5	; 0x05
    2ce0:	fb 01       	movw	r30, r22
    2ce2:	e4 0f       	add	r30, r20
    2ce4:	f5 1f       	adc	r31, r21
    2ce6:	02 80       	ldd	r0, Z+2	; 0x02
    2ce8:	f3 81       	ldd	r31, Z+3	; 0x03
    2cea:	e0 2d       	mov	r30, r0
    2cec:	b0 82       	st	Z, r11
    2cee:	ee 81       	ldd	r30, Y+6	; 0x06
    2cf0:	ff 81       	ldd	r31, Y+7	; 0x07
    2cf2:	e2 0f       	add	r30, r18
    2cf4:	f3 1f       	adc	r31, r19
    2cf6:	d2 80       	ldd	r13, Z+2	; 0x02
    2cf8:	dd 20       	and	r13, r13
    2cfa:	81 f1       	breq	.+96     	; 0x2d5c <qtm_key_sensors_process+0x71c>
    2cfc:	40 e0       	ldi	r20, 0x00	; 0
    2cfe:	50 e0       	ldi	r21, 0x00	; 0
    2d00:	00 e0       	ldi	r16, 0x00	; 0
    2d02:	10 e0       	ldi	r17, 0x00	; 0
    2d04:	ea 81       	ldd	r30, Y+2	; 0x02
    2d06:	fb 81       	ldd	r31, Y+3	; 0x03
    2d08:	60 81       	ld	r22, Z
    2d0a:	71 81       	ldd	r23, Z+1	; 0x01
    2d0c:	06 17       	cp	r16, r22
    2d0e:	17 07       	cpc	r17, r23
    2d10:	28 f5       	brcc	.+74     	; 0x2d5c <qtm_key_sensors_process+0x71c>
    2d12:	ee 81       	ldd	r30, Y+6	; 0x06
    2d14:	ff 81       	ldd	r31, Y+7	; 0x07
    2d16:	e4 0f       	add	r30, r20
    2d18:	f5 1f       	adc	r31, r21
    2d1a:	62 81       	ldd	r22, Z+2	; 0x02
    2d1c:	d6 12       	cpse	r13, r22
    2d1e:	19 c0       	rjmp	.+50     	; 0x2d52 <qtm_key_sensors_process+0x712>
    2d20:	ba 01       	movw	r22, r20
    2d22:	66 0f       	add	r22, r22
    2d24:	77 1f       	adc	r23, r23
    2d26:	ec 81       	ldd	r30, Y+4	; 0x04
    2d28:	fd 81       	ldd	r31, Y+5	; 0x05
    2d2a:	4f 01       	movw	r8, r30
    2d2c:	86 0e       	add	r8, r22
    2d2e:	97 1e       	adc	r9, r23
    2d30:	f4 01       	movw	r30, r8
    2d32:	e2 80       	ldd	r14, Z+2	; 0x02
    2d34:	f3 80       	ldd	r15, Z+3	; 0x03
    2d36:	f7 01       	movw	r30, r14
    2d38:	f0 80       	ld	r15, Z
    2d3a:	f0 fe       	sbrs	r15, 0
    2d3c:	0a c0       	rjmp	.+20     	; 0x2d52 <qtm_key_sensors_process+0x712>
    2d3e:	f4 01       	movw	r30, r8
    2d40:	a0 82       	st	Z, r10
    2d42:	ec 81       	ldd	r30, Y+4	; 0x04
    2d44:	fd 81       	ldd	r31, Y+5	; 0x05
    2d46:	e6 0f       	add	r30, r22
    2d48:	f7 1f       	adc	r31, r23
    2d4a:	02 80       	ldd	r0, Z+2	; 0x02
    2d4c:	f3 81       	ldd	r31, Z+3	; 0x03
    2d4e:	e0 2d       	mov	r30, r0
    2d50:	b0 82       	st	Z, r11
    2d52:	0f 5f       	subi	r16, 0xFF	; 255
    2d54:	1f 4f       	sbci	r17, 0xFF	; 255
    2d56:	4d 5f       	subi	r20, 0xFD	; 253
    2d58:	5f 4f       	sbci	r21, 0xFF	; 255
    2d5a:	d4 cf       	rjmp	.-88     	; 0x2d04 <qtm_key_sensors_process+0x6c4>
    2d5c:	11 96       	adiw	r26, 0x01	; 1
    2d5e:	2d 5f       	subi	r18, 0xFD	; 253
    2d60:	3f 4f       	sbci	r19, 0xFF	; 255
    2d62:	34 cf       	rjmp	.-408    	; 0x2bcc <qtm_key_sensors_process+0x58c>
    2d64:	8b e0       	ldi	r24, 0x0B	; 11
    2d66:	df 91       	pop	r29
    2d68:	cf 91       	pop	r28
    2d6a:	1f 91       	pop	r17
    2d6c:	0f 91       	pop	r16
    2d6e:	ff 90       	pop	r15
    2d70:	ef 90       	pop	r14
    2d72:	df 90       	pop	r13
    2d74:	cf 90       	pop	r12
    2d76:	bf 90       	pop	r11
    2d78:	af 90       	pop	r10
    2d7a:	9f 90       	pop	r9
    2d7c:	8f 90       	pop	r8
    2d7e:	7f 90       	pop	r7
    2d80:	6f 90       	pop	r6
    2d82:	5f 90       	pop	r5
    2d84:	4f 90       	pop	r4
    2d86:	3f 90       	pop	r3
    2d88:	2f 90       	pop	r2
    2d8a:	08 95       	ret

00002d8c <qtm_freq_hop_autotune>:
    2d8c:	2f 92       	push	r2
    2d8e:	3f 92       	push	r3
    2d90:	4f 92       	push	r4
    2d92:	5f 92       	push	r5
    2d94:	6f 92       	push	r6
    2d96:	7f 92       	push	r7
    2d98:	8f 92       	push	r8
    2d9a:	9f 92       	push	r9
    2d9c:	af 92       	push	r10
    2d9e:	bf 92       	push	r11
    2da0:	cf 92       	push	r12
    2da2:	df 92       	push	r13
    2da4:	ef 92       	push	r14
    2da6:	ff 92       	push	r15
    2da8:	0f 93       	push	r16
    2daa:	1f 93       	push	r17
    2dac:	cf 93       	push	r28
    2dae:	df 93       	push	r29
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	2c 97       	sbiw	r28, 0x0c	; 12
    2db6:	0f b6       	in	r0, 0x3f	; 63
    2db8:	f8 94       	cli
    2dba:	de bf       	out	0x3e, r29	; 62
    2dbc:	0f be       	out	0x3f, r0	; 63
    2dbe:	cd bf       	out	0x3d, r28	; 61
    2dc0:	2c 01       	movw	r4, r24
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	09 f4       	brne	.+2      	; 0x2dc8 <qtm_freq_hop_autotune+0x3c>
    2dc6:	63 c1       	rjmp	.+710    	; 0x308e <qtm_freq_hop_autotune+0x302>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	12 96       	adiw	r26, 0x02	; 2
    2dcc:	2d 90       	ld	r2, X+
    2dce:	3c 90       	ld	r3, X
    2dd0:	13 97       	sbiw	r26, 0x03	; 3
    2dd2:	f1 01       	movw	r30, r2
    2dd4:	72 80       	ldd	r7, Z+2	; 0x02
    2dd6:	ed 91       	ld	r30, X+
    2dd8:	fc 91       	ld	r31, X
    2dda:	61 80       	ldd	r6, Z+1	; 0x01
    2ddc:	d1 01       	movw	r26, r2
    2dde:	17 96       	adiw	r26, 0x07	; 7
    2de0:	8c 91       	ld	r24, X
    2de2:	17 97       	sbiw	r26, 0x07	; 7
    2de4:	e7 2c       	mov	r14, r7
    2de6:	f1 2c       	mov	r15, r1
    2de8:	fc 82       	std	Y+4, r15	; 0x04
    2dea:	eb 82       	std	Y+3, r14	; 0x03
    2dec:	26 2d       	mov	r18, r6
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	88 23       	and	r24, r24
    2df2:	09 f4       	brne	.+2      	; 0x2df6 <qtm_freq_hop_autotune+0x6a>
    2df4:	a9 c0       	rjmp	.+338    	; 0x2f48 <qtm_freq_hop_autotune+0x1bc>
    2df6:	8d 90       	ld	r8, X+
    2df8:	9c 90       	ld	r9, X
    2dfa:	57 01       	movw	r10, r14
    2dfc:	aa 0c       	add	r10, r10
    2dfe:	bb 1c       	adc	r11, r11
    2e00:	69 01       	movw	r12, r18
    2e02:	cc 0c       	add	r12, r12
    2e04:	dd 1c       	adc	r13, r13
    2e06:	e1 2c       	mov	r14, r1
    2e08:	f1 2c       	mov	r15, r1
    2e0a:	40 e0       	ldi	r20, 0x00	; 0
    2e0c:	50 e0       	ldi	r21, 0x00	; 0
    2e0e:	00 e0       	ldi	r16, 0x00	; 0
    2e10:	10 e0       	ldi	r17, 0x00	; 0
    2e12:	08 15       	cp	r16, r8
    2e14:	19 05       	cpc	r17, r9
    2e16:	49 f1       	breq	.+82     	; 0x2e6a <qtm_freq_hop_autotune+0xde>
    2e18:	84 81       	ldd	r24, Z+4	; 0x04
    2e1a:	95 81       	ldd	r25, Z+5	; 0x05
    2e1c:	8e 0d       	add	r24, r14
    2e1e:	9f 1d       	adc	r25, r15
    2e20:	dc 01       	movw	r26, r24
    2e22:	11 96       	adiw	r26, 0x01	; 1
    2e24:	6d 91       	ld	r22, X+
    2e26:	7c 91       	ld	r23, X
    2e28:	12 97       	sbiw	r26, 0x02	; 2
    2e2a:	82 81       	ldd	r24, Z+2	; 0x02
    2e2c:	93 81       	ldd	r25, Z+3	; 0x03
    2e2e:	8c 0d       	add	r24, r12
    2e30:	9d 1d       	adc	r25, r13
    2e32:	dc 01       	movw	r26, r24
    2e34:	8d 91       	ld	r24, X+
    2e36:	9c 91       	ld	r25, X
    2e38:	86 17       	cp	r24, r22
    2e3a:	97 07       	cpc	r25, r23
    2e3c:	28 f4       	brcc	.+10     	; 0x2e48 <qtm_freq_hop_autotune+0xbc>
    2e3e:	db 01       	movw	r26, r22
    2e40:	a8 1b       	sub	r26, r24
    2e42:	b9 0b       	sbc	r27, r25
    2e44:	cd 01       	movw	r24, r26
    2e46:	05 c0       	rjmp	.+10     	; 0x2e52 <qtm_freq_hop_autotune+0xc6>
    2e48:	68 17       	cp	r22, r24
    2e4a:	79 07       	cpc	r23, r25
    2e4c:	30 f4       	brcc	.+12     	; 0x2e5a <qtm_freq_hop_autotune+0xce>
    2e4e:	86 1b       	sub	r24, r22
    2e50:	97 0b       	sbc	r25, r23
    2e52:	48 17       	cp	r20, r24
    2e54:	59 07       	cpc	r21, r25
    2e56:	08 f4       	brcc	.+2      	; 0x2e5a <qtm_freq_hop_autotune+0xce>
    2e58:	ac 01       	movw	r20, r24
    2e5a:	0f 5f       	subi	r16, 0xFF	; 255
    2e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5e:	b5 e0       	ldi	r27, 0x05	; 5
    2e60:	eb 0e       	add	r14, r27
    2e62:	f1 1c       	adc	r15, r1
    2e64:	ca 0c       	add	r12, r10
    2e66:	db 1c       	adc	r13, r11
    2e68:	d4 cf       	rjmp	.-88     	; 0x2e12 <qtm_freq_hop_autotune+0x86>
    2e6a:	d1 01       	movw	r26, r2
    2e6c:	18 96       	adiw	r26, 0x08	; 8
    2e6e:	8c 91       	ld	r24, X
    2e70:	68 2f       	mov	r22, r24
    2e72:	70 e0       	ldi	r23, 0x00	; 0
    2e74:	64 17       	cp	r22, r20
    2e76:	75 07       	cpc	r23, r21
    2e78:	08 f0       	brcs	.+2      	; 0x2e7c <qtm_freq_hop_autotune+0xf0>
    2e7a:	57 c0       	rjmp	.+174    	; 0x2f2a <qtm_freq_hop_autotune+0x19e>
    2e7c:	06 80       	ldd	r0, Z+6	; 0x06
    2e7e:	f7 81       	ldd	r31, Z+7	; 0x07
    2e80:	e0 2d       	mov	r30, r0
    2e82:	e2 0f       	add	r30, r18
    2e84:	f3 1f       	adc	r31, r19
    2e86:	80 81       	ld	r24, Z
    2e88:	8f 5f       	subi	r24, 0xFF	; 255
    2e8a:	80 83       	st	Z, r24
    2e8c:	f2 01       	movw	r30, r4
    2e8e:	40 81       	ld	r20, Z
    2e90:	51 81       	ldd	r21, Z+1	; 0x01
    2e92:	a2 81       	ldd	r26, Z+2	; 0x02
    2e94:	b3 81       	ldd	r27, Z+3	; 0x03
    2e96:	fa 01       	movw	r30, r20
    2e98:	81 81       	ldd	r24, Z+1	; 0x01
    2e9a:	46 81       	ldd	r20, Z+6	; 0x06
    2e9c:	57 81       	ldd	r21, Z+7	; 0x07
    2e9e:	fa 01       	movw	r30, r20
    2ea0:	e8 0f       	add	r30, r24
    2ea2:	f1 1d       	adc	r31, r1
    2ea4:	90 81       	ld	r25, Z
    2ea6:	19 96       	adiw	r26, 0x09	; 9
    2ea8:	8c 91       	ld	r24, X
    2eaa:	19 97       	sbiw	r26, 0x09	; 9
    2eac:	98 13       	cpse	r25, r24
    2eae:	4c c0       	rjmp	.+152    	; 0x2f48 <qtm_freq_hop_autotune+0x1bc>
    2eb0:	15 96       	adiw	r26, 0x05	; 5
    2eb2:	0d 91       	ld	r16, X+
    2eb4:	1c 91       	ld	r17, X
    2eb6:	16 97       	sbiw	r26, 0x06	; 6
    2eb8:	d8 01       	movw	r26, r16
    2eba:	a2 0f       	add	r26, r18
    2ebc:	b3 1f       	adc	r27, r19
    2ebe:	8c 91       	ld	r24, X
    2ec0:	88 23       	and	r24, r24
    2ec2:	11 f0       	breq	.+4      	; 0x2ec8 <qtm_freq_hop_autotune+0x13c>
    2ec4:	81 50       	subi	r24, 0x01	; 1
    2ec6:	01 c0       	rjmp	.+2      	; 0x2eca <qtm_freq_hop_autotune+0x13e>
    2ec8:	8f e0       	ldi	r24, 0x0F	; 15
    2eca:	f8 01       	movw	r30, r16
    2ecc:	61 e0       	ldi	r22, 0x01	; 1
    2ece:	70 e0       	ldi	r23, 0x00	; 0
    2ed0:	40 e0       	ldi	r20, 0x00	; 0
    2ed2:	50 e0       	ldi	r21, 0x00	; 0
    2ed4:	eb 80       	ldd	r14, Y+3	; 0x03
    2ed6:	fc 80       	ldd	r15, Y+4	; 0x04
    2ed8:	4e 15       	cp	r20, r14
    2eda:	5f 05       	cpc	r21, r15
    2edc:	60 f4       	brcc	.+24     	; 0x2ef6 <qtm_freq_hop_autotune+0x16a>
    2ede:	42 17       	cp	r20, r18
    2ee0:	53 07       	cpc	r21, r19
    2ee2:	29 f0       	breq	.+10     	; 0x2eee <qtm_freq_hop_autotune+0x162>
    2ee4:	90 81       	ld	r25, Z
    2ee6:	98 13       	cpse	r25, r24
    2ee8:	02 c0       	rjmp	.+4      	; 0x2eee <qtm_freq_hop_autotune+0x162>
    2eea:	60 e0       	ldi	r22, 0x00	; 0
    2eec:	70 e0       	ldi	r23, 0x00	; 0
    2eee:	4f 5f       	subi	r20, 0xFF	; 255
    2ef0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ef2:	31 96       	adiw	r30, 0x01	; 1
    2ef4:	ef cf       	rjmp	.-34     	; 0x2ed4 <qtm_freq_hop_autotune+0x148>
    2ef6:	67 2b       	or	r22, r23
    2ef8:	19 f3       	breq	.-58     	; 0x2ec0 <qtm_freq_hop_autotune+0x134>
    2efa:	8c 93       	st	X, r24
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	d2 01       	movw	r26, r4
    2f02:	12 96       	adiw	r26, 0x02	; 2
    2f04:	ed 91       	ld	r30, X+
    2f06:	fc 91       	ld	r31, X
    2f08:	13 97       	sbiw	r26, 0x03	; 3
    2f0a:	42 81       	ldd	r20, Z+2	; 0x02
    2f0c:	50 e0       	ldi	r21, 0x00	; 0
    2f0e:	84 17       	cp	r24, r20
    2f10:	95 07       	cpc	r25, r21
    2f12:	d0 f4       	brcc	.+52     	; 0x2f48 <qtm_freq_hop_autotune+0x1bc>
    2f14:	d2 01       	movw	r26, r4
    2f16:	ed 91       	ld	r30, X+
    2f18:	fc 91       	ld	r31, X
    2f1a:	06 80       	ldd	r0, Z+6	; 0x06
    2f1c:	f7 81       	ldd	r31, Z+7	; 0x07
    2f1e:	e0 2d       	mov	r30, r0
    2f20:	e8 0f       	add	r30, r24
    2f22:	f9 1f       	adc	r31, r25
    2f24:	10 82       	st	Z, r1
    2f26:	01 96       	adiw	r24, 0x01	; 1
    2f28:	eb cf       	rjmp	.-42     	; 0x2f00 <qtm_freq_hop_autotune+0x174>
    2f2a:	86 95       	lsr	r24
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	48 17       	cp	r20, r24
    2f30:	59 07       	cpc	r21, r25
    2f32:	50 f4       	brcc	.+20     	; 0x2f48 <qtm_freq_hop_autotune+0x1bc>
    2f34:	06 80       	ldd	r0, Z+6	; 0x06
    2f36:	f7 81       	ldd	r31, Z+7	; 0x07
    2f38:	e0 2d       	mov	r30, r0
    2f3a:	e2 0f       	add	r30, r18
    2f3c:	f3 1f       	adc	r31, r19
    2f3e:	80 81       	ld	r24, Z
    2f40:	88 23       	and	r24, r24
    2f42:	11 f0       	breq	.+4      	; 0x2f48 <qtm_freq_hop_autotune+0x1bc>
    2f44:	81 50       	subi	r24, 0x01	; 1
    2f46:	80 83       	st	Z, r24
    2f48:	f2 01       	movw	r30, r4
    2f4a:	02 80       	ldd	r0, Z+2	; 0x02
    2f4c:	f3 81       	ldd	r31, Z+3	; 0x03
    2f4e:	e0 2d       	mov	r30, r0
    2f50:	fa 83       	std	Y+2, r31	; 0x02
    2f52:	e9 83       	std	Y+1, r30	; 0x01
    2f54:	eb 80       	ldd	r14, Y+3	; 0x03
    2f56:	fc 80       	ldd	r15, Y+4	; 0x04
    2f58:	ee 0c       	add	r14, r14
    2f5a:	ff 1c       	adc	r15, r15
    2f5c:	fc 82       	std	Y+4, r15	; 0x04
    2f5e:	eb 82       	std	Y+3, r14	; 0x03
    2f60:	b9 01       	movw	r22, r18
    2f62:	66 0f       	add	r22, r22
    2f64:	77 1f       	adc	r23, r23
    2f66:	7e 83       	std	Y+6, r23	; 0x06
    2f68:	6d 83       	std	Y+5, r22	; 0x05
    2f6a:	d7 2c       	mov	r13, r7
    2f6c:	d6 94       	lsr	r13
    2f6e:	d3 94       	inc	r13
    2f70:	40 e0       	ldi	r20, 0x00	; 0
    2f72:	50 e0       	ldi	r21, 0x00	; 0
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	e1 2c       	mov	r14, r1
    2f7a:	f1 2c       	mov	r15, r1
    2f7c:	8d 2d       	mov	r24, r13
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	98 87       	std	Y+8, r25	; 0x08
    2f82:	8f 83       	std	Y+7, r24	; 0x07
    2f84:	a9 81       	ldd	r26, Y+1	; 0x01
    2f86:	ba 81       	ldd	r27, Y+2	; 0x02
    2f88:	8d 91       	ld	r24, X+
    2f8a:	9c 91       	ld	r25, X
    2f8c:	e8 16       	cp	r14, r24
    2f8e:	f9 06       	cpc	r15, r25
    2f90:	08 f0       	brcs	.+2      	; 0x2f94 <qtm_freq_hop_autotune+0x208>
    2f92:	68 c0       	rjmp	.+208    	; 0x3064 <qtm_freq_hop_autotune+0x2d8>
    2f94:	d2 01       	movw	r26, r4
    2f96:	ed 91       	ld	r30, X+
    2f98:	fc 91       	ld	r31, X
    2f9a:	a4 81       	ldd	r26, Z+4	; 0x04
    2f9c:	b5 81       	ldd	r27, Z+5	; 0x05
    2f9e:	bd 01       	movw	r22, r26
    2fa0:	62 0f       	add	r22, r18
    2fa2:	73 1f       	adc	r23, r19
    2fa4:	7c 87       	std	Y+12, r23	; 0x0c
    2fa6:	6b 87       	std	Y+11, r22	; 0x0b
    2fa8:	db 01       	movw	r26, r22
    2faa:	8c 91       	ld	r24, X
    2fac:	8c 71       	andi	r24, 0x1C	; 28
    2fae:	09 f0       	breq	.+2      	; 0x2fb2 <qtm_freq_hop_autotune+0x226>
    2fb0:	4f c0       	rjmp	.+158    	; 0x3050 <qtm_freq_hop_autotune+0x2c4>
    2fb2:	11 96       	adiw	r26, 0x01	; 1
    2fb4:	6d 91       	ld	r22, X+
    2fb6:	7c 91       	ld	r23, X
    2fb8:	12 97       	sbiw	r26, 0x02	; 2
    2fba:	82 81       	ldd	r24, Z+2	; 0x02
    2fbc:	93 81       	ldd	r25, Z+3	; 0x03
    2fbe:	84 0f       	add	r24, r20
    2fc0:	95 1f       	adc	r25, r21
    2fc2:	ed 81       	ldd	r30, Y+5	; 0x05
    2fc4:	fe 81       	ldd	r31, Y+6	; 0x06
    2fc6:	e8 0f       	add	r30, r24
    2fc8:	f9 1f       	adc	r31, r25
    2fca:	71 83       	std	Z+1, r23	; 0x01
    2fcc:	60 83       	st	Z, r22
    2fce:	a1 2c       	mov	r10, r1
    2fd0:	b1 2c       	mov	r11, r1
    2fd2:	c1 2c       	mov	r12, r1
    2fd4:	c7 14       	cp	r12, r7
    2fd6:	c0 f5       	brcc	.+112    	; 0x3048 <qtm_freq_hop_autotune+0x2bc>
    2fd8:	fc 01       	movw	r30, r24
    2fda:	ec 0d       	add	r30, r12
    2fdc:	f1 1d       	adc	r31, r1
    2fde:	ec 0d       	add	r30, r12
    2fe0:	f1 1d       	adc	r31, r1
    2fe2:	9a 87       	std	Y+10, r25	; 0x0a
    2fe4:	89 87       	std	Y+9, r24	; 0x09
    2fe6:	99 24       	eor	r9, r9
    2fe8:	93 94       	inc	r9
    2fea:	81 2c       	mov	r8, r1
    2fec:	31 2c       	mov	r3, r1
    2fee:	73 14       	cp	r7, r3
    2ff0:	c9 f0       	breq	.+50     	; 0x3024 <qtm_freq_hop_autotune+0x298>
    2ff2:	c3 14       	cp	r12, r3
    2ff4:	79 f0       	breq	.+30     	; 0x3014 <qtm_freq_hop_autotune+0x288>
    2ff6:	a9 85       	ldd	r26, Y+9	; 0x09
    2ff8:	ba 85       	ldd	r27, Y+10	; 0x0a
    2ffa:	0d 91       	ld	r16, X+
    2ffc:	1c 91       	ld	r17, X
    2ffe:	60 81       	ld	r22, Z
    3000:	71 81       	ldd	r23, Z+1	; 0x01
    3002:	06 17       	cp	r16, r22
    3004:	17 07       	cpc	r17, r23
    3006:	11 f4       	brne	.+4      	; 0x300c <qtm_freq_hop_autotune+0x280>
    3008:	93 94       	inc	r9
    300a:	04 c0       	rjmp	.+8      	; 0x3014 <qtm_freq_hop_autotune+0x288>
    300c:	06 17       	cp	r16, r22
    300e:	17 07       	cpc	r17, r23
    3010:	08 f4       	brcc	.+2      	; 0x3014 <qtm_freq_hop_autotune+0x288>
    3012:	83 94       	inc	r8
    3014:	33 94       	inc	r3
    3016:	69 85       	ldd	r22, Y+9	; 0x09
    3018:	7a 85       	ldd	r23, Y+10	; 0x0a
    301a:	6e 5f       	subi	r22, 0xFE	; 254
    301c:	7f 4f       	sbci	r23, 0xFF	; 255
    301e:	7a 87       	std	Y+10, r23	; 0x0a
    3020:	69 87       	std	Y+9, r22	; 0x09
    3022:	e5 cf       	rjmp	.-54     	; 0x2fee <qtm_freq_hop_autotune+0x262>
    3024:	9d 14       	cp	r9, r13
    3026:	58 f4       	brcc	.+22     	; 0x303e <qtm_freq_hop_autotune+0x2b2>
    3028:	8d 14       	cp	r8, r13
    302a:	60 f4       	brcc	.+24     	; 0x3044 <qtm_freq_hop_autotune+0x2b8>
    302c:	69 2d       	mov	r22, r9
    302e:	70 e0       	ldi	r23, 0x00	; 0
    3030:	68 0d       	add	r22, r8
    3032:	71 1d       	adc	r23, r1
    3034:	af 81       	ldd	r26, Y+7	; 0x07
    3036:	b8 85       	ldd	r27, Y+8	; 0x08
    3038:	6a 17       	cp	r22, r26
    303a:	7b 07       	cpc	r23, r27
    303c:	1c f0       	brlt	.+6      	; 0x3044 <qtm_freq_hop_autotune+0x2b8>
    303e:	a0 80       	ld	r10, Z
    3040:	b1 80       	ldd	r11, Z+1	; 0x01
    3042:	c7 2c       	mov	r12, r7
    3044:	c3 94       	inc	r12
    3046:	c6 cf       	rjmp	.-116    	; 0x2fd4 <qtm_freq_hop_autotune+0x248>
    3048:	eb 85       	ldd	r30, Y+11	; 0x0b
    304a:	fc 85       	ldd	r31, Y+12	; 0x0c
    304c:	b2 82       	std	Z+2, r11	; 0x02
    304e:	a1 82       	std	Z+1, r10	; 0x01
    3050:	ff ef       	ldi	r31, 0xFF	; 255
    3052:	ef 1a       	sub	r14, r31
    3054:	ff 0a       	sbc	r15, r31
    3056:	2b 5f       	subi	r18, 0xFB	; 251
    3058:	3f 4f       	sbci	r19, 0xFF	; 255
    305a:	6b 81       	ldd	r22, Y+3	; 0x03
    305c:	7c 81       	ldd	r23, Y+4	; 0x04
    305e:	46 0f       	add	r20, r22
    3060:	57 1f       	adc	r21, r23
    3062:	90 cf       	rjmp	.-224    	; 0x2f84 <qtm_freq_hop_autotune+0x1f8>
    3064:	63 94       	inc	r6
    3066:	67 14       	cp	r6, r7
    3068:	08 f0       	brcs	.+2      	; 0x306c <qtm_freq_hop_autotune+0x2e0>
    306a:	61 2c       	mov	r6, r1
    306c:	e9 81       	ldd	r30, Y+1	; 0x01
    306e:	fa 81       	ldd	r31, Y+2	; 0x02
    3070:	a3 81       	ldd	r26, Z+3	; 0x03
    3072:	b4 81       	ldd	r27, Z+4	; 0x04
    3074:	85 81       	ldd	r24, Z+5	; 0x05
    3076:	96 81       	ldd	r25, Z+6	; 0x06
    3078:	fc 01       	movw	r30, r24
    307a:	e6 0d       	add	r30, r6
    307c:	f1 1d       	adc	r31, r1
    307e:	80 81       	ld	r24, Z
    3080:	8c 93       	st	X, r24
    3082:	d2 01       	movw	r26, r4
    3084:	ed 91       	ld	r30, X+
    3086:	fc 91       	ld	r31, X
    3088:	61 82       	std	Z+1, r6	; 0x01
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	01 c0       	rjmp	.+2      	; 0x3090 <qtm_freq_hop_autotune+0x304>
    308e:	8b e0       	ldi	r24, 0x0B	; 11
    3090:	2c 96       	adiw	r28, 0x0c	; 12
    3092:	0f b6       	in	r0, 0x3f	; 63
    3094:	f8 94       	cli
    3096:	de bf       	out	0x3e, r29	; 62
    3098:	0f be       	out	0x3f, r0	; 63
    309a:	cd bf       	out	0x3d, r28	; 61
    309c:	df 91       	pop	r29
    309e:	cf 91       	pop	r28
    30a0:	1f 91       	pop	r17
    30a2:	0f 91       	pop	r16
    30a4:	ff 90       	pop	r15
    30a6:	ef 90       	pop	r14
    30a8:	df 90       	pop	r13
    30aa:	cf 90       	pop	r12
    30ac:	bf 90       	pop	r11
    30ae:	af 90       	pop	r10
    30b0:	9f 90       	pop	r9
    30b2:	8f 90       	pop	r8
    30b4:	7f 90       	pop	r7
    30b6:	6f 90       	pop	r6
    30b8:	5f 90       	pop	r5
    30ba:	4f 90       	pop	r4
    30bc:	3f 90       	pop	r3
    30be:	2f 90       	pop	r2
    30c0:	08 95       	ret

000030c2 <qtm_error_handler>:
    30c2:	95 e0       	ldi	r25, 0x05	; 5
    30c4:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <qtm_state>
    30c8:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <qtm>
    30cc:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <qtm+0x1>
    30d0:	01 88       	ldd	r0, Z+17	; 0x11
    30d2:	f2 89       	ldd	r31, Z+18	; 0x12
    30d4:	e0 2d       	mov	r30, r0
    30d6:	30 97       	sbiw	r30, 0x00	; 0
    30d8:	09 f0       	breq	.+2      	; 0x30dc <qtm_error_handler+0x1a>
    30da:	09 94       	ijmp
    30dc:	ff cf       	rjmp	.-2      	; 0x30dc <qtm_error_handler+0x1a>

000030de <generic_callback_function>:
    30de:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <qtm>
    30e2:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <qtm+0x1>
    30e6:	03 88       	ldd	r0, Z+19	; 0x13
    30e8:	f4 89       	ldd	r31, Z+20	; 0x14
    30ea:	e0 2d       	mov	r30, r0
    30ec:	30 97       	sbiw	r30, 0x00	; 0
    30ee:	09 f0       	breq	.+2      	; 0x30f2 <generic_callback_function+0x14>
    30f0:	09 94       	ijmp
    30f2:	80 e4       	ldi	r24, 0x40	; 64
    30f4:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <qtm_error_handler>

000030f8 <qmt_get_binding_layer_ptr>:
    30f8:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <qtm>
    30fc:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <qtm+0x1>
    3100:	08 95       	ret

00003102 <qtm_binding_layer_init>:
    3102:	cf 93       	push	r28
    3104:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <qtm+0x1>
    3108:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <qtm>
    310c:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <qtm_state>
    3110:	85 30       	cpi	r24, 0x05	; 5
    3112:	39 f0       	breq	.+14     	; 0x3122 <qtm_binding_layer_init+0x20>
    3114:	82 30       	cpi	r24, 0x02	; 2
    3116:	28 f0       	brcs	.+10     	; 0x3122 <qtm_binding_layer_init+0x20>
    3118:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <errors>
    311c:	88 23       	and	r24, r24
    311e:	71 f1       	breq	.+92     	; 0x317c <qtm_binding_layer_init+0x7a>
    3120:	40 c0       	rjmp	.+128    	; 0x31a2 <qtm_binding_layer_init+0xa0>
    3122:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <errors>
    3126:	c0 e0       	ldi	r28, 0x00	; 0
    3128:	a0 91 e0 01 	lds	r26, 0x01E0	; 0x8001e0 <qtm>
    312c:	b0 91 e1 01 	lds	r27, 0x01E1	; 0x8001e1 <qtm+0x1>
    3130:	8c 2f       	mov	r24, r28
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	88 0f       	add	r24, r24
    3136:	99 1f       	adc	r25, r25
    3138:	11 96       	adiw	r26, 0x01	; 1
    313a:	ed 91       	ld	r30, X+
    313c:	fc 91       	ld	r31, X
    313e:	12 97       	sbiw	r26, 0x02	; 2
    3140:	e8 0f       	add	r30, r24
    3142:	f9 1f       	adc	r31, r25
    3144:	01 90       	ld	r0, Z+
    3146:	f0 81       	ld	r31, Z
    3148:	e0 2d       	mov	r30, r0
    314a:	30 97       	sbiw	r30, 0x00	; 0
    314c:	29 f3       	breq	.-54     	; 0x3118 <qtm_binding_layer_init+0x16>
    314e:	17 96       	adiw	r26, 0x07	; 7
    3150:	2d 91       	ld	r18, X+
    3152:	3c 91       	ld	r19, X
    3154:	18 97       	sbiw	r26, 0x08	; 8
    3156:	d9 01       	movw	r26, r18
    3158:	a8 0f       	add	r26, r24
    315a:	b9 1f       	adc	r27, r25
    315c:	8d 91       	ld	r24, X+
    315e:	9c 91       	ld	r25, X
    3160:	09 95       	icall
    3162:	88 23       	and	r24, r24
    3164:	29 f0       	breq	.+10     	; 0x3170 <qtm_binding_layer_init+0x6e>
    3166:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <errors>
    316a:	8f 5f       	subi	r24, 0xFF	; 255
    316c:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <errors>
    3170:	cf 5f       	subi	r28, 0xFF	; 255
    3172:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <errors>
    3176:	88 23       	and	r24, r24
    3178:	b9 f2       	breq	.-82     	; 0x3128 <qtm_binding_layer_init+0x26>
    317a:	ce cf       	rjmp	.-100    	; 0x3118 <qtm_binding_layer_init+0x16>
    317c:	82 e0       	ldi	r24, 0x02	; 2
    317e:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <qtm_state>
    3182:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <qtm>
    3186:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <qtm+0x1>
    318a:	07 84       	ldd	r0, Z+15	; 0x0f
    318c:	f0 89       	ldd	r31, Z+16	; 0x10
    318e:	e0 2d       	mov	r30, r0
    3190:	30 97       	sbiw	r30, 0x00	; 0
    3192:	11 f0       	breq	.+4      	; 0x3198 <qtm_binding_layer_init+0x96>
    3194:	09 95       	icall
    3196:	08 c0       	rjmp	.+16     	; 0x31a8 <qtm_binding_layer_init+0xa6>
    3198:	85 e0       	ldi	r24, 0x05	; 5
    319a:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <qtm_state>
    319e:	81 e0       	ldi	r24, 0x01	; 1
    31a0:	01 c0       	rjmp	.+2      	; 0x31a4 <qtm_binding_layer_init+0xa2>
    31a2:	8f 5f       	subi	r24, 0xFF	; 255
    31a4:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <errors>
    31a8:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <errors>
    31ac:	88 23       	and	r24, r24
    31ae:	31 f0       	breq	.+12     	; 0x31bc <qtm_binding_layer_init+0xba>
    31b0:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <errors>
    31b4:	80 e8       	ldi	r24, 0x80	; 128
    31b6:	cf 91       	pop	r28
    31b8:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <qtm_error_handler>
    31bc:	cf 91       	pop	r28
    31be:	08 95       	ret

000031c0 <qtm_lib_start_acquisition>:
    31c0:	1f 93       	push	r17
    31c2:	cf 93       	push	r28
    31c4:	df 93       	push	r29
    31c6:	18 2f       	mov	r17, r24
    31c8:	a0 91 e0 01 	lds	r26, 0x01E0	; 0x8001e0 <qtm>
    31cc:	b0 91 e1 01 	lds	r27, 0x01E1	; 0x8001e1 <qtm+0x1>
    31d0:	15 96       	adiw	r26, 0x05	; 5
    31d2:	2d 91       	ld	r18, X+
    31d4:	3c 91       	ld	r19, X
    31d6:	16 97       	sbiw	r26, 0x06	; 6
    31d8:	d0 e0       	ldi	r29, 0x00	; 0
    31da:	f9 01       	movw	r30, r18
    31dc:	ed 0f       	add	r30, r29
    31de:	f1 1d       	adc	r31, r1
    31e0:	ed 0f       	add	r30, r29
    31e2:	f1 1d       	adc	r31, r1
    31e4:	80 81       	ld	r24, Z
    31e6:	91 81       	ldd	r25, Z+1	; 0x01
    31e8:	89 2b       	or	r24, r25
    31ea:	11 f0       	breq	.+4      	; 0x31f0 <qtm_lib_start_acquisition+0x30>
    31ec:	df 5f       	subi	r29, 0xFF	; 255
    31ee:	f5 cf       	rjmp	.-22     	; 0x31da <qtm_lib_start_acquisition+0x1a>
    31f0:	53 96       	adiw	r26, 0x13	; 19
    31f2:	8d 91       	ld	r24, X+
    31f4:	9c 91       	ld	r25, X
    31f6:	54 97       	sbiw	r26, 0x14	; 20
    31f8:	89 2b       	or	r24, r25
    31fa:	49 f1       	breq	.+82     	; 0x324e <qtm_lib_start_acquisition+0x8e>
    31fc:	81 2f       	mov	r24, r17
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	88 0f       	add	r24, r24
    3202:	99 1f       	adc	r25, r25
    3204:	f9 01       	movw	r30, r18
    3206:	e8 0f       	add	r30, r24
    3208:	f9 1f       	adc	r31, r25
    320a:	01 90       	ld	r0, Z+
    320c:	f0 81       	ld	r31, Z
    320e:	e0 2d       	mov	r30, r0
    3210:	30 97       	sbiw	r30, 0x00	; 0
    3212:	e9 f0       	breq	.+58     	; 0x324e <qtm_lib_start_acquisition+0x8e>
    3214:	1b 96       	adiw	r26, 0x0b	; 11
    3216:	2d 91       	ld	r18, X+
    3218:	3c 91       	ld	r19, X
    321a:	1c 97       	sbiw	r26, 0x0c	; 12
    321c:	d9 01       	movw	r26, r18
    321e:	a8 0f       	add	r26, r24
    3220:	b9 1f       	adc	r27, r25
    3222:	8d 91       	ld	r24, X+
    3224:	9c 91       	ld	r25, X
    3226:	00 97       	sbiw	r24, 0x00	; 0
    3228:	91 f0       	breq	.+36     	; 0x324e <qtm_lib_start_acquisition+0x8e>
    322a:	6f e6       	ldi	r22, 0x6F	; 111
    322c:	78 e1       	ldi	r23, 0x18	; 24
    322e:	09 95       	icall
    3230:	c8 2f       	mov	r28, r24
    3232:	81 11       	cpse	r24, r1
    3234:	06 c0       	rjmp	.+12     	; 0x3242 <qtm_lib_start_acquisition+0x82>
    3236:	83 e0       	ldi	r24, 0x03	; 3
    3238:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <qtm_state>
    323c:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <current_process_id>
    3240:	03 c0       	rjmp	.+6      	; 0x3248 <qtm_lib_start_acquisition+0x88>
    3242:	82 e0       	ldi	r24, 0x02	; 2
    3244:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <qtm_state>
    3248:	1d 17       	cp	r17, r29
    324a:	28 f0       	brcs	.+10     	; 0x3256 <qtm_lib_start_acquisition+0x96>
    324c:	01 c0       	rjmp	.+2      	; 0x3250 <qtm_lib_start_acquisition+0x90>
    324e:	c2 e0       	ldi	r28, 0x02	; 2
    3250:	82 e8       	ldi	r24, 0x82	; 130
    3252:	0e 94 61 18 	call	0x30c2	; 0x30c2 <qtm_error_handler>
    3256:	8c 2f       	mov	r24, r28
    3258:	df 91       	pop	r29
    325a:	cf 91       	pop	r28
    325c:	1f 91       	pop	r17
    325e:	08 95       	ret

00003260 <qtm_lib_acq_process>:
    3260:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <qtm>
    3264:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <qtm+0x1>
    3268:	05 84       	ldd	r0, Z+13	; 0x0d
    326a:	f6 85       	ldd	r31, Z+14	; 0x0e
    326c:	e0 2d       	mov	r30, r0
    326e:	09 94       	ijmp

00003270 <qtm_lib_post_process>:
    3270:	1f 93       	push	r17
    3272:	cf 93       	push	r28
    3274:	df 93       	push	r29
    3276:	1f 92       	push	r1
    3278:	cd b7       	in	r28, 0x3d	; 61
    327a:	de b7       	in	r29, 0x3e	; 62
    327c:	19 82       	std	Y+1, r1	; 0x01
    327e:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <qtm>
    3282:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <qtm+0x1>
    3286:	05 88       	ldd	r0, Z+21	; 0x15
    3288:	f6 89       	ldd	r31, Z+22	; 0x16
    328a:	e0 2d       	mov	r30, r0
    328c:	30 97       	sbiw	r30, 0x00	; 0
    328e:	49 f0       	breq	.+18     	; 0x32a2 <qtm_lib_post_process+0x32>
    3290:	82 e0       	ldi	r24, 0x02	; 2
    3292:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <qtm_state>
    3296:	ce 01       	movw	r24, r28
    3298:	01 96       	adiw	r24, 0x01	; 1
    329a:	09 95       	icall
    329c:	83 e0       	ldi	r24, 0x03	; 3
    329e:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <qtm_state>
    32a2:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <errors>
    32a6:	81 11       	cpse	r24, r1
    32a8:	2c c0       	rjmp	.+88     	; 0x3302 <qtm_lib_post_process+0x92>
    32aa:	19 81       	ldd	r17, Y+1	; 0x01
    32ac:	11 11       	cpse	r17, r1
    32ae:	29 c0       	rjmp	.+82     	; 0x3302 <qtm_lib_post_process+0x92>
    32b0:	84 e0       	ldi	r24, 0x04	; 4
    32b2:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <qtm_state>
    32b6:	a0 91 e0 01 	lds	r26, 0x01E0	; 0x8001e0 <qtm>
    32ba:	b0 91 e1 01 	lds	r27, 0x01E1	; 0x8001e1 <qtm+0x1>
    32be:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <current_process_id>
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	88 0f       	add	r24, r24
    32c6:	99 1f       	adc	r25, r25
    32c8:	13 96       	adiw	r26, 0x03	; 3
    32ca:	ed 91       	ld	r30, X+
    32cc:	fc 91       	ld	r31, X
    32ce:	14 97       	sbiw	r26, 0x04	; 4
    32d0:	e8 0f       	add	r30, r24
    32d2:	f9 1f       	adc	r31, r25
    32d4:	01 90       	ld	r0, Z+
    32d6:	f0 81       	ld	r31, Z
    32d8:	e0 2d       	mov	r30, r0
    32da:	19 96       	adiw	r26, 0x09	; 9
    32dc:	2d 91       	ld	r18, X+
    32de:	3c 91       	ld	r19, X
    32e0:	1a 97       	sbiw	r26, 0x0a	; 10
    32e2:	30 97       	sbiw	r30, 0x00	; 0
    32e4:	81 f0       	breq	.+32     	; 0x3306 <qtm_lib_post_process+0x96>
    32e6:	d9 01       	movw	r26, r18
    32e8:	a8 0f       	add	r26, r24
    32ea:	b9 1f       	adc	r27, r25
    32ec:	8d 91       	ld	r24, X+
    32ee:	9c 91       	ld	r25, X
    32f0:	09 95       	icall
    32f2:	81 11       	cpse	r24, r1
    32f4:	3e c0       	rjmp	.+124    	; 0x3372 <qtm_lib_post_process+0x102>
    32f6:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <current_process_id>
    32fa:	8f 5f       	subi	r24, 0xFF	; 255
    32fc:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <current_process_id>
    3300:	da cf       	rjmp	.-76     	; 0x32b6 <qtm_lib_post_process+0x46>
    3302:	10 e0       	ldi	r17, 0x00	; 0
    3304:	3d c0       	rjmp	.+122    	; 0x3380 <qtm_lib_post_process+0x110>
    3306:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <current_process_id>
    330a:	f9 01       	movw	r30, r18
    330c:	e1 0f       	add	r30, r17
    330e:	f1 1d       	adc	r31, r1
    3310:	e1 0f       	add	r30, r17
    3312:	f1 1d       	adc	r31, r1
    3314:	01 90       	ld	r0, Z+
    3316:	f0 81       	ld	r31, Z
    3318:	e0 2d       	mov	r30, r0
    331a:	30 97       	sbiw	r30, 0x00	; 0
    331c:	59 f0       	breq	.+22     	; 0x3334 <qtm_lib_post_process+0xc4>
    331e:	01 90       	ld	r0, Z+
    3320:	f0 81       	ld	r31, Z
    3322:	e0 2d       	mov	r30, r0
    3324:	80 81       	ld	r24, Z
    3326:	87 ff       	sbrs	r24, 7
    3328:	03 c0       	rjmp	.+6      	; 0x3330 <qtm_lib_post_process+0xc0>
    332a:	9c 91       	ld	r25, X
    332c:	94 60       	ori	r25, 0x04	; 4
    332e:	9c 93       	st	X, r25
    3330:	1f 5f       	subi	r17, 0xFF	; 255
    3332:	eb cf       	rjmp	.-42     	; 0x330a <qtm_lib_post_process+0x9a>
    3334:	10 93 98 01 	sts	0x0198, r17	; 0x800198 <current_process_id>
    3338:	82 e0       	ldi	r24, 0x02	; 2
    333a:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <qtm_state>
    333e:	57 96       	adiw	r26, 0x17	; 23
    3340:	ed 91       	ld	r30, X+
    3342:	fc 91       	ld	r31, X
    3344:	58 97       	sbiw	r26, 0x18	; 24
    3346:	30 97       	sbiw	r30, 0x00	; 0
    3348:	11 f0       	breq	.+4      	; 0x334e <qtm_lib_post_process+0xde>
    334a:	09 95       	icall
    334c:	05 c0       	rjmp	.+10     	; 0x3358 <qtm_lib_post_process+0xe8>
    334e:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <errors>
    3352:	8f 5f       	subi	r24, 0xFF	; 255
    3354:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <errors>
    3358:	10 e0       	ldi	r17, 0x00	; 0
    335a:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <errors>
    335e:	88 23       	and	r24, r24
    3360:	79 f0       	breq	.+30     	; 0x3380 <qtm_lib_post_process+0x110>
    3362:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <errors>
    3366:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <current_process_id>
    336a:	80 64       	ori	r24, 0x40	; 64
    336c:	0e 94 61 18 	call	0x30c2	; 0x30c2 <qtm_error_handler>
    3370:	07 c0       	rjmp	.+14     	; 0x3380 <qtm_lib_post_process+0x110>
    3372:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <errors>
    3376:	8f 5f       	subi	r24, 0xFF	; 255
    3378:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <errors>
    337c:	13 e0       	ldi	r17, 0x03	; 3
    337e:	ed cf       	rjmp	.-38     	; 0x335a <qtm_lib_post_process+0xea>
    3380:	81 2f       	mov	r24, r17
    3382:	0f 90       	pop	r0
    3384:	df 91       	pop	r29
    3386:	cf 91       	pop	r28
    3388:	1f 91       	pop	r17
    338a:	08 95       	ret

0000338c <select_next_channel_to_measure>:
    338c:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <current_measure_channel>
    3390:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <current_measure_channel+0x1>
    3394:	a0 91 e2 01 	lds	r26, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    3398:	b0 91 e3 01 	lds	r27, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    339c:	ed 91       	ld	r30, X+
    339e:	fc 91       	ld	r31, X
    33a0:	11 97       	sbiw	r26, 0x01	; 1
    33a2:	40 81       	ld	r20, Z
    33a4:	51 81       	ldd	r21, Z+1	; 0x01
    33a6:	25 e0       	ldi	r18, 0x05	; 5
    33a8:	28 9f       	mul	r18, r24
    33aa:	b0 01       	movw	r22, r0
    33ac:	29 9f       	mul	r18, r25
    33ae:	70 0d       	add	r23, r0
    33b0:	11 24       	eor	r1, r1
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	84 17       	cp	r24, r20
    33b8:	95 07       	cpc	r25, r21
    33ba:	a8 f4       	brcc	.+42     	; 0x33e6 <select_next_channel_to_measure+0x5a>
    33bc:	14 96       	adiw	r26, 0x04	; 4
    33be:	ed 91       	ld	r30, X+
    33c0:	fc 91       	ld	r31, X
    33c2:	15 97       	sbiw	r26, 0x05	; 5
    33c4:	e2 0f       	add	r30, r18
    33c6:	f3 1f       	adc	r31, r19
    33c8:	e6 0f       	add	r30, r22
    33ca:	f7 1f       	adc	r31, r23
    33cc:	e0 81       	ld	r30, Z
    33ce:	2b 5f       	subi	r18, 0xFB	; 251
    33d0:	3f 4f       	sbci	r19, 0xFF	; 255
    33d2:	e0 fd       	sbrc	r30, 0
    33d4:	02 c0       	rjmp	.+4      	; 0x33da <select_next_channel_to_measure+0x4e>
    33d6:	01 96       	adiw	r24, 0x01	; 1
    33d8:	ee cf       	rjmp	.-36     	; 0x33b6 <select_next_channel_to_measure+0x2a>
    33da:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <current_measure_channel+0x1>
    33de:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <current_measure_channel>
    33e2:	80 e0       	ldi	r24, 0x00	; 0
    33e4:	08 95       	ret
    33e6:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <current_measure_channel+0x1>
    33ea:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <current_measure_channel>
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	08 95       	ret

000033f2 <qtm_measure_node>:
    33f2:	4a e0       	ldi	r20, 0x0A	; 10
    33f4:	48 9f       	mul	r20, r24
    33f6:	90 01       	movw	r18, r0
    33f8:	49 9f       	mul	r20, r25
    33fa:	30 0d       	add	r19, r0
    33fc:	11 24       	eor	r1, r1
    33fe:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    3402:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    3406:	02 80       	ldd	r0, Z+2	; 0x02
    3408:	f3 81       	ldd	r31, Z+3	; 0x03
    340a:	e0 2d       	mov	r30, r0
    340c:	e2 0f       	add	r30, r18
    340e:	f3 1f       	adc	r31, r19
    3410:	42 81       	ldd	r20, Z+2	; 0x02
    3412:	40 93 f8 00 	sts	0x00F8, r20	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7f80f8>
    3416:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    341a:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    341e:	02 80       	ldd	r0, Z+2	; 0x02
    3420:	f3 81       	ldd	r31, Z+3	; 0x03
    3422:	e0 2d       	mov	r30, r0
    3424:	e2 0f       	add	r30, r18
    3426:	f3 1f       	adc	r31, r19
    3428:	43 81       	ldd	r20, Z+3	; 0x03
    342a:	40 93 f9 00 	sts	0x00F9, r20	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7f80f9>
    342e:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    3432:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    3436:	02 80       	ldd	r0, Z+2	; 0x02
    3438:	f3 81       	ldd	r31, Z+3	; 0x03
    343a:	e0 2d       	mov	r30, r0
    343c:	e2 0f       	add	r30, r18
    343e:	f3 1f       	adc	r31, r19
    3440:	44 81       	ldd	r20, Z+4	; 0x04
    3442:	40 93 fa 00 	sts	0x00FA, r20	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f80fa>
    3446:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    344a:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    344e:	02 80       	ldd	r0, Z+2	; 0x02
    3450:	f3 81       	ldd	r31, Z+3	; 0x03
    3452:	e0 2d       	mov	r30, r0
    3454:	e2 0f       	add	r30, r18
    3456:	f3 1f       	adc	r31, r19
    3458:	40 81       	ld	r20, Z
    345a:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    345e:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    3462:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    3466:	02 80       	ldd	r0, Z+2	; 0x02
    3468:	f3 81       	ldd	r31, Z+3	; 0x03
    346a:	e0 2d       	mov	r30, r0
    346c:	e2 0f       	add	r30, r18
    346e:	f3 1f       	adc	r31, r19
    3470:	41 81       	ldd	r20, Z+1	; 0x01
    3472:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    3476:	65 e0       	ldi	r22, 0x05	; 5
    3478:	68 9f       	mul	r22, r24
    347a:	a0 01       	movw	r20, r0
    347c:	69 9f       	mul	r22, r25
    347e:	50 0d       	add	r21, r0
    3480:	11 24       	eor	r1, r1
    3482:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    3486:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    348a:	04 80       	ldd	r0, Z+4	; 0x04
    348c:	f5 81       	ldd	r31, Z+5	; 0x05
    348e:	e0 2d       	mov	r30, r0
    3490:	e4 0f       	add	r30, r20
    3492:	f5 1f       	adc	r31, r21
    3494:	83 81       	ldd	r24, Z+3	; 0x03
    3496:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
    349a:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    349e:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    34a2:	04 80       	ldd	r0, Z+4	; 0x04
    34a4:	f5 81       	ldd	r31, Z+5	; 0x05
    34a6:	e0 2d       	mov	r30, r0
    34a8:	e4 0f       	add	r30, r20
    34aa:	f5 1f       	adc	r31, r21
    34ac:	83 81       	ldd	r24, Z+3	; 0x03
    34ae:	94 81       	ldd	r25, Z+4	; 0x04
    34b0:	88 27       	eor	r24, r24
    34b2:	9f 73       	andi	r25, 0x3F	; 63
    34b4:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7f80e6>
    34b8:	a0 91 e2 01 	lds	r26, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    34bc:	b0 91 e3 01 	lds	r27, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    34c0:	14 96       	adiw	r26, 0x04	; 4
    34c2:	ed 91       	ld	r30, X+
    34c4:	fc 91       	ld	r31, X
    34c6:	15 97       	sbiw	r26, 0x05	; 5
    34c8:	e4 0f       	add	r30, r20
    34ca:	f5 1f       	adc	r31, r21
    34cc:	80 81       	ld	r24, Z
    34ce:	81 fd       	sbrc	r24, 1
    34d0:	60 83       	st	Z, r22
    34d2:	14 96       	adiw	r26, 0x04	; 4
    34d4:	8d 91       	ld	r24, X+
    34d6:	9c 91       	ld	r25, X
    34d8:	15 97       	sbiw	r26, 0x05	; 5
    34da:	fc 01       	movw	r30, r24
    34dc:	e4 0f       	add	r30, r20
    34de:	f5 1f       	adc	r31, r21
    34e0:	80 81       	ld	r24, Z
    34e2:	8c 71       	andi	r24, 0x1C	; 28
    34e4:	71 f4       	brne	.+28     	; 0x3502 <qtm_measure_node+0x110>
    34e6:	12 96       	adiw	r26, 0x02	; 2
    34e8:	ed 91       	ld	r30, X+
    34ea:	fc 91       	ld	r31, X
    34ec:	13 97       	sbiw	r26, 0x03	; 3
    34ee:	e2 0f       	add	r30, r18
    34f0:	f3 1f       	adc	r31, r19
    34f2:	e0 85       	ldd	r30, Z+8	; 0x08
    34f4:	e2 95       	swap	r30
    34f6:	ef 70       	andi	r30, 0x0F	; 15
    34f8:	f0 e0       	ldi	r31, 0x00	; 0
    34fa:	e0 58       	subi	r30, 0x80	; 128
    34fc:	fe 4f       	sbci	r31, 0xFE	; 254
    34fe:	80 81       	ld	r24, Z
    3500:	01 c0       	rjmp	.+2      	; 0x3504 <qtm_measure_node+0x112>
    3502:	8f e3       	ldi	r24, 0x3F	; 63
    3504:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7f80e7>
    3508:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    350c:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    3510:	02 80       	ldd	r0, Z+2	; 0x02
    3512:	f3 81       	ldd	r31, Z+3	; 0x03
    3514:	e0 2d       	mov	r30, r0
    3516:	e2 0f       	add	r30, r18
    3518:	f3 1f       	adc	r31, r19
    351a:	86 81       	ldd	r24, Z+6	; 0x06
    351c:	8b 3f       	cpi	r24, 0xFB	; 251
    351e:	10 f4       	brcc	.+4      	; 0x3524 <qtm_measure_node+0x132>
    3520:	8c 5f       	subi	r24, 0xFC	; 252
    3522:	01 c0       	rjmp	.+2      	; 0x3526 <qtm_measure_node+0x134>
    3524:	8f ef       	ldi	r24, 0xFF	; 255
    3526:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    352a:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    352e:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    3532:	02 80       	ldd	r0, Z+2	; 0x02
    3534:	f3 81       	ldd	r31, Z+3	; 0x03
    3536:	e0 2d       	mov	r30, r0
    3538:	e2 0f       	add	r30, r18
    353a:	f3 1f       	adc	r31, r19
    353c:	87 81       	ldd	r24, Z+7	; 0x07
    353e:	80 7f       	andi	r24, 0xF0	; 240
    3540:	91 85       	ldd	r25, Z+9	; 0x09
    3542:	89 2b       	or	r24, r25
    3544:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    3548:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    354c:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    3550:	82 81       	ldd	r24, Z+2	; 0x02
    3552:	93 81       	ldd	r25, Z+3	; 0x03
    3554:	fc 01       	movw	r30, r24
    3556:	e2 0f       	add	r30, r18
    3558:	f3 1f       	adc	r31, r19
    355a:	87 81       	ldd	r24, Z+7	; 0x07
    355c:	8f 70       	andi	r24, 0x0F	; 15
    355e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    3562:	82 e1       	ldi	r24, 0x12	; 18
    3564:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    3568:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    356c:	81 60       	ori	r24, 0x01	; 1
    356e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    3572:	08 95       	ret

00003574 <qtm_acquisition_process>:
    3574:	4f 92       	push	r4
    3576:	5f 92       	push	r5
    3578:	6f 92       	push	r6
    357a:	7f 92       	push	r7
    357c:	8f 92       	push	r8
    357e:	9f 92       	push	r9
    3580:	af 92       	push	r10
    3582:	bf 92       	push	r11
    3584:	cf 92       	push	r12
    3586:	df 92       	push	r13
    3588:	ef 92       	push	r14
    358a:	ff 92       	push	r15
    358c:	0f 93       	push	r16
    358e:	1f 93       	push	r17
    3590:	cf 93       	push	r28
    3592:	df 93       	push	r29
    3594:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <touch_seq_lib_state>
    3598:	88 23       	and	r24, r24
    359a:	09 f4       	brne	.+2      	; 0x359e <qtm_acquisition_process+0x2a>
    359c:	31 c1       	rjmp	.+610    	; 0x3800 <qtm_acquisition_process+0x28c>
    359e:	a0 91 e2 01 	lds	r26, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    35a2:	b0 91 e3 01 	lds	r27, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    35a6:	e0 90 e4 01 	lds	r14, 0x01E4	; 0x8001e4 <qtm_raw_data_measurements_ptr>
    35aa:	f0 90 e5 01 	lds	r15, 0x01E5	; 0x8001e5 <qtm_raw_data_measurements_ptr+0x1>
    35ae:	41 2c       	mov	r4, r1
    35b0:	51 2c       	mov	r5, r1
    35b2:	60 e0       	ldi	r22, 0x00	; 0
    35b4:	70 e0       	ldi	r23, 0x00	; 0
    35b6:	00 e0       	ldi	r16, 0x00	; 0
    35b8:	10 e0       	ldi	r17, 0x00	; 0
    35ba:	80 e0       	ldi	r24, 0x00	; 0
    35bc:	66 24       	eor	r6, r6
    35be:	63 94       	inc	r6
    35c0:	91 e8       	ldi	r25, 0x81	; 129
    35c2:	79 2e       	mov	r7, r25
    35c4:	aa 24       	eor	r10, r10
    35c6:	aa 94       	dec	r10
    35c8:	bb 24       	eor	r11, r11
    35ca:	b3 94       	inc	r11
    35cc:	cd 90       	ld	r12, X+
    35ce:	dc 90       	ld	r13, X
    35d0:	11 97       	sbiw	r26, 0x01	; 1
    35d2:	f6 01       	movw	r30, r12
    35d4:	20 81       	ld	r18, Z
    35d6:	31 81       	ldd	r19, Z+1	; 0x01
    35d8:	02 17       	cp	r16, r18
    35da:	13 07       	cpc	r17, r19
    35dc:	08 f0       	brcs	.+2      	; 0x35e0 <qtm_acquisition_process+0x6c>
    35de:	0c c1       	rjmp	.+536    	; 0x37f8 <qtm_acquisition_process+0x284>
    35e0:	e7 01       	movw	r28, r14
    35e2:	29 91       	ld	r18, Y+
    35e4:	39 91       	ld	r19, Y+
    35e6:	7e 01       	movw	r14, r28
    35e8:	14 96       	adiw	r26, 0x04	; 4
    35ea:	ed 91       	ld	r30, X+
    35ec:	fc 91       	ld	r31, X
    35ee:	15 97       	sbiw	r26, 0x05	; 5
    35f0:	e6 0f       	add	r30, r22
    35f2:	f7 1f       	adc	r31, r23
    35f4:	40 81       	ld	r20, Z
    35f6:	4c 71       	andi	r20, 0x1C	; 28
    35f8:	50 e0       	ldi	r21, 0x00	; 0
    35fa:	56 95       	lsr	r21
    35fc:	47 95       	ror	r20
    35fe:	56 95       	lsr	r21
    3600:	47 95       	ror	r20
    3602:	41 15       	cp	r20, r1
    3604:	51 05       	cpc	r21, r1
    3606:	21 f0       	breq	.+8      	; 0x3610 <qtm_acquisition_process+0x9c>
    3608:	41 30       	cpi	r20, 0x01	; 1
    360a:	51 05       	cpc	r21, r1
    360c:	c1 f0       	breq	.+48     	; 0x363e <qtm_acquisition_process+0xca>
    360e:	eb c0       	rjmp	.+470    	; 0x37e6 <qtm_acquisition_process+0x272>
    3610:	12 96       	adiw	r26, 0x02	; 2
    3612:	4d 91       	ld	r20, X+
    3614:	5c 91       	ld	r21, X
    3616:	13 97       	sbiw	r26, 0x03	; 3
    3618:	44 0d       	add	r20, r4
    361a:	55 1d       	adc	r21, r5
    361c:	ea 01       	movw	r28, r20
    361e:	98 85       	ldd	r25, Y+8	; 0x08
    3620:	9f 70       	andi	r25, 0x0F	; 15
    3622:	49 85       	ldd	r20, Y+9	; 0x09
    3624:	94 17       	cp	r25, r20
    3626:	10 f4       	brcc	.+4      	; 0x362c <qtm_acquisition_process+0xb8>
    3628:	49 1b       	sub	r20, r25
    362a:	01 c0       	rjmp	.+2      	; 0x362e <qtm_acquisition_process+0xba>
    362c:	40 e0       	ldi	r20, 0x00	; 0
    362e:	02 c0       	rjmp	.+4      	; 0x3634 <qtm_acquisition_process+0xc0>
    3630:	36 95       	lsr	r19
    3632:	27 95       	ror	r18
    3634:	4a 95       	dec	r20
    3636:	e2 f7       	brpl	.-8      	; 0x3630 <qtm_acquisition_process+0xbc>
    3638:	32 83       	std	Z+2, r19	; 0x02
    363a:	21 83       	std	Z+1, r18	; 0x01
    363c:	d5 c0       	rjmp	.+426    	; 0x37e8 <qtm_acquisition_process+0x274>
    363e:	12 96       	adiw	r26, 0x02	; 2
    3640:	4d 91       	ld	r20, X+
    3642:	5c 91       	ld	r21, X
    3644:	13 97       	sbiw	r26, 0x03	; 3
    3646:	44 0d       	add	r20, r4
    3648:	55 1d       	adc	r21, r5
    364a:	ea 01       	movw	r28, r20
    364c:	09 84       	ldd	r0, Y+9	; 0x09
    364e:	02 c0       	rjmp	.+4      	; 0x3654 <qtm_acquisition_process+0xe0>
    3650:	36 95       	lsr	r19
    3652:	27 95       	ror	r18
    3654:	0a 94       	dec	r0
    3656:	e2 f7       	brpl	.-8      	; 0x3650 <qtm_acquisition_process+0xdc>
    3658:	32 83       	std	Z+2, r19	; 0x02
    365a:	21 83       	std	Z+1, r18	; 0x01
    365c:	43 81       	ldd	r20, Z+3	; 0x03
    365e:	54 81       	ldd	r21, Z+4	; 0x04
    3660:	21 15       	cp	r18, r1
    3662:	d2 e0       	ldi	r29, 0x02	; 2
    3664:	3d 07       	cpc	r19, r29
    3666:	20 f0       	brcs	.+8      	; 0x3670 <qtm_acquisition_process+0xfc>
    3668:	2f 5f       	subi	r18, 0xFF	; 255
    366a:	31 40       	sbci	r19, 0x01	; 1
    366c:	91 e0       	ldi	r25, 0x01	; 1
    366e:	05 c0       	rjmp	.+10     	; 0x367a <qtm_acquisition_process+0x106>
    3670:	e5 01       	movw	r28, r10
    3672:	c2 1b       	sub	r28, r18
    3674:	d3 0b       	sbc	r29, r19
    3676:	9e 01       	movw	r18, r28
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	e6 01       	movw	r28, r12
    367c:	da 80       	ldd	r13, Y+2	; 0x02
    367e:	d0 e4       	ldi	r29, 0x40	; 64
    3680:	dd 12       	cpse	r13, r29
    3682:	05 c0       	rjmp	.+10     	; 0x368e <qtm_acquisition_process+0x11a>
    3684:	36 95       	lsr	r19
    3686:	27 95       	ror	r18
    3688:	99 23       	and	r25, r25
    368a:	19 f0       	breq	.+6      	; 0x3692 <qtm_acquisition_process+0x11e>
    368c:	09 c0       	rjmp	.+18     	; 0x36a0 <qtm_acquisition_process+0x12c>
    368e:	99 23       	and	r25, r25
    3690:	39 f0       	breq	.+14     	; 0x36a0 <qtm_acquisition_process+0x12c>
    3692:	4f 3f       	cpi	r20, 0xFF	; 255
    3694:	9f e3       	ldi	r25, 0x3F	; 63
    3696:	59 07       	cpc	r21, r25
    3698:	31 f4       	brne	.+12     	; 0x36a6 <qtm_acquisition_process+0x132>
    369a:	70 82       	st	Z, r7
    369c:	8e e0       	ldi	r24, 0x0E	; 14
    369e:	07 c0       	rjmp	.+14     	; 0x36ae <qtm_acquisition_process+0x13a>
    36a0:	88 24       	eor	r8, r8
    36a2:	83 94       	inc	r8
    36a4:	01 c0       	rjmp	.+2      	; 0x36a8 <qtm_acquisition_process+0x134>
    36a6:	81 2c       	mov	r8, r1
    36a8:	2a 30       	cpi	r18, 0x0A	; 10
    36aa:	31 05       	cpc	r19, r1
    36ac:	98 f4       	brcc	.+38     	; 0x36d4 <qtm_acquisition_process+0x160>
    36ae:	14 96       	adiw	r26, 0x04	; 4
    36b0:	ed 91       	ld	r30, X+
    36b2:	fc 91       	ld	r31, X
    36b4:	15 97       	sbiw	r26, 0x05	; 5
    36b6:	e6 0f       	add	r30, r22
    36b8:	f7 1f       	adc	r31, r23
    36ba:	20 81       	ld	r18, Z
    36bc:	27 ff       	sbrs	r18, 7
    36be:	60 82       	st	Z, r6
    36c0:	14 96       	adiw	r26, 0x04	; 4
    36c2:	ed 91       	ld	r30, X+
    36c4:	fc 91       	ld	r31, X
    36c6:	15 97       	sbiw	r26, 0x05	; 5
    36c8:	e6 0f       	add	r30, r22
    36ca:	f7 1f       	adc	r31, r23
    36cc:	5f 73       	andi	r21, 0x3F	; 63
    36ce:	54 83       	std	Z+4, r21	; 0x04
    36d0:	43 83       	std	Z+3, r20	; 0x03
    36d2:	8a c0       	rjmp	.+276    	; 0x37e8 <qtm_acquisition_process+0x274>
    36d4:	6a 01       	movw	r12, r20
    36d6:	cc 24       	eor	r12, r12
    36d8:	c0 e3       	ldi	r28, 0x30	; 48
    36da:	dc 22       	and	r13, r28
    36dc:	9d 2c       	mov	r9, r13
    36de:	92 94       	swap	r9
    36e0:	df e0       	ldi	r29, 0x0F	; 15
    36e2:	9d 22       	and	r9, r29
    36e4:	6a 01       	movw	r12, r20
    36e6:	cc 24       	eor	r12, r12
    36e8:	df e0       	ldi	r29, 0x0F	; 15
    36ea:	dd 22       	and	r13, r29
    36ec:	9d 2d       	mov	r25, r13
    36ee:	6a 01       	movw	r12, r20
    36f0:	c0 ef       	ldi	r28, 0xF0	; 240
    36f2:	cc 22       	and	r12, r28
    36f4:	dd 24       	eor	r13, r13
    36f6:	54 e0       	ldi	r21, 0x04	; 4
    36f8:	d6 94       	lsr	r13
    36fa:	c7 94       	ror	r12
    36fc:	5a 95       	dec	r21
    36fe:	e1 f7       	brne	.-8      	; 0x36f8 <qtm_acquisition_process+0x184>
    3700:	5c 2d       	mov	r21, r12
    3702:	4f 70       	andi	r20, 0x0F	; 15
    3704:	81 10       	cpse	r8, r1
    3706:	32 c0       	rjmp	.+100    	; 0x376c <qtm_acquisition_process+0x1f8>
    3708:	20 3d       	cpi	r18, 0xD0	; 208
    370a:	31 05       	cpc	r19, r1
    370c:	60 f0       	brcs	.+24     	; 0x3726 <qtm_acquisition_process+0x1b2>
    370e:	d3 e0       	ldi	r29, 0x03	; 3
    3710:	9d 16       	cp	r9, r29
    3712:	49 f0       	breq	.+18     	; 0x3726 <qtm_acquisition_process+0x1b2>
    3714:	93 94       	inc	r9
    3716:	2f 5c       	subi	r18, 0xCF	; 207
    3718:	31 09       	sbc	r19, r1
    371a:	f6 cf       	rjmp	.-20     	; 0x3708 <qtm_acquisition_process+0x194>
    371c:	9f 30       	cpi	r25, 0x0F	; 15
    371e:	41 f0       	breq	.+16     	; 0x3730 <qtm_acquisition_process+0x1bc>
    3720:	9f 5f       	subi	r25, 0xFF	; 255
    3722:	25 51       	subi	r18, 0x15	; 21
    3724:	31 09       	sbc	r19, r1
    3726:	26 31       	cpi	r18, 0x16	; 22
    3728:	31 05       	cpc	r19, r1
    372a:	c0 f7       	brcc	.-16     	; 0x371c <qtm_acquisition_process+0x1a8>
    372c:	9f 30       	cpi	r25, 0x0F	; 15
    372e:	69 f4       	brne	.+26     	; 0x374a <qtm_acquisition_process+0x1d6>
    3730:	93 e0       	ldi	r25, 0x03	; 3
    3732:	99 12       	cpse	r9, r25
    3734:	02 c0       	rjmp	.+4      	; 0x373a <qtm_acquisition_process+0x1c6>
    3736:	9f e0       	ldi	r25, 0x0F	; 15
    3738:	08 c0       	rjmp	.+16     	; 0x374a <qtm_acquisition_process+0x1d6>
    373a:	93 94       	inc	r9
    373c:	95 e0       	ldi	r25, 0x05	; 5
    373e:	05 c0       	rjmp	.+10     	; 0x374a <qtm_acquisition_process+0x1d6>
    3740:	5f 30       	cpi	r21, 0x0F	; 15
    3742:	49 f0       	breq	.+18     	; 0x3756 <qtm_acquisition_process+0x1e2>
    3744:	5f 5f       	subi	r21, 0xFF	; 255
    3746:	22 50       	subi	r18, 0x02	; 2
    3748:	31 09       	sbc	r19, r1
    374a:	23 30       	cpi	r18, 0x03	; 3
    374c:	31 05       	cpc	r19, r1
    374e:	c0 f7       	brcc	.-16     	; 0x3740 <qtm_acquisition_process+0x1cc>
    3750:	5f 30       	cpi	r21, 0x0F	; 15
    3752:	09 f0       	breq	.+2      	; 0x3756 <qtm_acquisition_process+0x1e2>
    3754:	5b c0       	rjmp	.+182    	; 0x380c <qtm_acquisition_process+0x298>
    3756:	9f 30       	cpi	r25, 0x0F	; 15
    3758:	09 f4       	brne	.+2      	; 0x375c <qtm_acquisition_process+0x1e8>
    375a:	54 c0       	rjmp	.+168    	; 0x3804 <qtm_acquisition_process+0x290>
    375c:	9f 5f       	subi	r25, 0xFF	; 255
    375e:	55 e0       	ldi	r21, 0x05	; 5
    3760:	55 c0       	rjmp	.+170    	; 0x380c <qtm_acquisition_process+0x298>
    3762:	99 20       	and	r9, r9
    3764:	61 f0       	breq	.+24     	; 0x377e <qtm_acquisition_process+0x20a>
    3766:	9a 94       	dec	r9
    3768:	2f 5c       	subi	r18, 0xCF	; 207
    376a:	31 09       	sbc	r19, r1
    376c:	20 3d       	cpi	r18, 0xD0	; 208
    376e:	31 05       	cpc	r19, r1
    3770:	c0 f7       	brcc	.-16     	; 0x3762 <qtm_acquisition_process+0x1ee>
    3772:	05 c0       	rjmp	.+10     	; 0x377e <qtm_acquisition_process+0x20a>
    3774:	99 23       	and	r25, r25
    3776:	41 f0       	breq	.+16     	; 0x3788 <qtm_acquisition_process+0x214>
    3778:	91 50       	subi	r25, 0x01	; 1
    377a:	25 51       	subi	r18, 0x15	; 21
    377c:	31 09       	sbc	r19, r1
    377e:	26 31       	cpi	r18, 0x16	; 22
    3780:	31 05       	cpc	r19, r1
    3782:	c0 f7       	brcc	.-16     	; 0x3774 <qtm_acquisition_process+0x200>
    3784:	91 11       	cpse	r25, r1
    3786:	0c c0       	rjmp	.+24     	; 0x37a0 <qtm_acquisition_process+0x22c>
    3788:	91 10       	cpse	r9, r1
    378a:	02 c0       	rjmp	.+4      	; 0x3790 <qtm_acquisition_process+0x21c>
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	08 c0       	rjmp	.+16     	; 0x37a0 <qtm_acquisition_process+0x22c>
    3790:	9a 94       	dec	r9
    3792:	9a e0       	ldi	r25, 0x0A	; 10
    3794:	05 c0       	rjmp	.+10     	; 0x37a0 <qtm_acquisition_process+0x22c>
    3796:	55 23       	and	r21, r21
    3798:	41 f0       	breq	.+16     	; 0x37aa <qtm_acquisition_process+0x236>
    379a:	51 50       	subi	r21, 0x01	; 1
    379c:	22 50       	subi	r18, 0x02	; 2
    379e:	31 09       	sbc	r19, r1
    37a0:	23 30       	cpi	r18, 0x03	; 3
    37a2:	31 05       	cpc	r19, r1
    37a4:	c0 f7       	brcc	.-16     	; 0x3796 <qtm_acquisition_process+0x222>
    37a6:	51 11       	cpse	r21, r1
    37a8:	0d c0       	rjmp	.+26     	; 0x37c4 <qtm_acquisition_process+0x250>
    37aa:	99 23       	and	r25, r25
    37ac:	b9 f1       	breq	.+110    	; 0x381c <qtm_acquisition_process+0x2a8>
    37ae:	91 50       	subi	r25, 0x01	; 1
    37b0:	5a e0       	ldi	r21, 0x0A	; 10
    37b2:	23 30       	cpi	r18, 0x03	; 3
    37b4:	31 05       	cpc	r19, r1
    37b6:	d0 f6       	brcc	.-76     	; 0x376c <qtm_acquisition_process+0x1f8>
    37b8:	05 c0       	rjmp	.+10     	; 0x37c4 <qtm_acquisition_process+0x250>
    37ba:	23 30       	cpi	r18, 0x03	; 3
    37bc:	31 05       	cpc	r19, r1
    37be:	58 f1       	brcs	.+86     	; 0x3816 <qtm_acquisition_process+0x2a2>
    37c0:	4f e0       	ldi	r20, 0x0F	; 15
    37c2:	5f e0       	ldi	r21, 0x0F	; 15
    37c4:	29 2d       	mov	r18, r9
    37c6:	30 e0       	ldi	r19, 0x00	; 0
    37c8:	32 2f       	mov	r19, r18
    37ca:	22 27       	eor	r18, r18
    37cc:	32 95       	swap	r19
    37ce:	30 7f       	andi	r19, 0xF0	; 240
    37d0:	39 2b       	or	r19, r25
    37d2:	24 2b       	or	r18, r20
    37d4:	c0 e1       	ldi	r28, 0x10	; 16
    37d6:	5c 9f       	mul	r21, r28
    37d8:	60 01       	movw	r12, r0
    37da:	11 24       	eor	r1, r1
    37dc:	c2 2a       	or	r12, r18
    37de:	d3 2a       	or	r13, r19
    37e0:	d4 82       	std	Z+4, r13	; 0x04
    37e2:	c3 82       	std	Z+3, r12	; 0x03
    37e4:	01 c0       	rjmp	.+2      	; 0x37e8 <qtm_acquisition_process+0x274>
    37e6:	ff cf       	rjmp	.-2      	; 0x37e6 <qtm_acquisition_process+0x272>
    37e8:	0f 5f       	subi	r16, 0xFF	; 255
    37ea:	1f 4f       	sbci	r17, 0xFF	; 255
    37ec:	6b 5f       	subi	r22, 0xFB	; 251
    37ee:	7f 4f       	sbci	r23, 0xFF	; 255
    37f0:	da e0       	ldi	r29, 0x0A	; 10
    37f2:	4d 0e       	add	r4, r29
    37f4:	51 1c       	adc	r5, r1
    37f6:	ea ce       	rjmp	.-556    	; 0x35cc <qtm_acquisition_process+0x58>
    37f8:	92 e0       	ldi	r25, 0x02	; 2
    37fa:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <touch_seq_lib_state>
    37fe:	10 c0       	rjmp	.+32     	; 0x3820 <qtm_acquisition_process+0x2ac>
    3800:	83 e0       	ldi	r24, 0x03	; 3
    3802:	0e c0       	rjmp	.+28     	; 0x3820 <qtm_acquisition_process+0x2ac>
    3804:	53 e0       	ldi	r21, 0x03	; 3
    3806:	95 16       	cp	r9, r21
    3808:	c1 f2       	breq	.-80     	; 0x37ba <qtm_acquisition_process+0x246>
    380a:	5f e0       	ldi	r21, 0x0F	; 15
    380c:	23 30       	cpi	r18, 0x03	; 3
    380e:	31 05       	cpc	r19, r1
    3810:	08 f0       	brcs	.+2      	; 0x3814 <qtm_acquisition_process+0x2a0>
    3812:	7a cf       	rjmp	.-268    	; 0x3708 <qtm_acquisition_process+0x194>
    3814:	d7 cf       	rjmp	.-82     	; 0x37c4 <qtm_acquisition_process+0x250>
    3816:	5f e0       	ldi	r21, 0x0F	; 15
    3818:	4f e0       	ldi	r20, 0x0F	; 15
    381a:	d4 cf       	rjmp	.-88     	; 0x37c4 <qtm_acquisition_process+0x250>
    381c:	50 e0       	ldi	r21, 0x00	; 0
    381e:	d2 cf       	rjmp	.-92     	; 0x37c4 <qtm_acquisition_process+0x250>
    3820:	df 91       	pop	r29
    3822:	cf 91       	pop	r28
    3824:	1f 91       	pop	r17
    3826:	0f 91       	pop	r16
    3828:	ff 90       	pop	r15
    382a:	ef 90       	pop	r14
    382c:	df 90       	pop	r13
    382e:	cf 90       	pop	r12
    3830:	bf 90       	pop	r11
    3832:	af 90       	pop	r10
    3834:	9f 90       	pop	r9
    3836:	8f 90       	pop	r8
    3838:	7f 90       	pop	r7
    383a:	6f 90       	pop	r6
    383c:	5f 90       	pop	r5
    383e:	4f 90       	pop	r4
    3840:	08 95       	ret

00003842 <qtm_ptc_init_acquisition_module>:
    3842:	8f 92       	push	r8
    3844:	9f 92       	push	r9
    3846:	af 92       	push	r10
    3848:	bf 92       	push	r11
    384a:	cf 92       	push	r12
    384c:	df 92       	push	r13
    384e:	ef 92       	push	r14
    3850:	ff 92       	push	r15
    3852:	cf 93       	push	r28
    3854:	df 93       	push	r29
    3856:	00 97       	sbiw	r24, 0x00	; 0
    3858:	09 f4       	brne	.+2      	; 0x385c <qtm_ptc_init_acquisition_module+0x1a>
    385a:	6c c0       	rjmp	.+216    	; 0x3934 <qtm_ptc_init_acquisition_module+0xf2>
    385c:	dc 01       	movw	r26, r24
    385e:	ed 91       	ld	r30, X+
    3860:	fc 91       	ld	r31, X
    3862:	c0 80       	ld	r12, Z
    3864:	d1 80       	ldd	r13, Z+1	; 0x01
    3866:	e1 2c       	mov	r14, r1
    3868:	f1 2c       	mov	r15, r1
    386a:	a0 e0       	ldi	r26, 0x00	; 0
    386c:	b0 e0       	ldi	r27, 0x00	; 0
    386e:	40 e0       	ldi	r20, 0x00	; 0
    3870:	50 e0       	ldi	r21, 0x00	; 0
    3872:	ba 01       	movw	r22, r20
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	ac 15       	cp	r26, r12
    387a:	bd 05       	cpc	r27, r13
    387c:	b1 f0       	breq	.+44     	; 0x38aa <qtm_ptc_init_acquisition_module+0x68>
    387e:	ec 01       	movw	r28, r24
    3880:	ea 81       	ldd	r30, Y+2	; 0x02
    3882:	fb 81       	ldd	r31, Y+3	; 0x03
    3884:	ee 0d       	add	r30, r14
    3886:	ff 1d       	adc	r31, r15
    3888:	a0 80       	ld	r10, Z
    388a:	b1 80       	ldd	r11, Z+1	; 0x01
    388c:	2a 29       	or	r18, r10
    388e:	3b 29       	or	r19, r11
    3890:	82 80       	ldd	r8, Z+2	; 0x02
    3892:	93 80       	ldd	r9, Z+3	; 0x03
    3894:	a4 80       	ldd	r10, Z+4	; 0x04
    3896:	b5 80       	ldd	r11, Z+5	; 0x05
    3898:	48 29       	or	r20, r8
    389a:	59 29       	or	r21, r9
    389c:	6a 29       	or	r22, r10
    389e:	7b 29       	or	r23, r11
    38a0:	11 96       	adiw	r26, 0x01	; 1
    38a2:	da e0       	ldi	r29, 0x0A	; 10
    38a4:	ed 0e       	add	r14, r29
    38a6:	f1 1c       	adc	r15, r1
    38a8:	e7 cf       	rjmp	.-50     	; 0x3878 <qtm_ptc_init_acquisition_module+0x36>
    38aa:	41 15       	cp	r20, r1
    38ac:	51 05       	cpc	r21, r1
    38ae:	61 05       	cpc	r22, r1
    38b0:	71 05       	cpc	r23, r1
    38b2:	09 f4       	brne	.+2      	; 0x38b6 <qtm_ptc_init_acquisition_module+0x74>
    38b4:	41 c0       	rjmp	.+130    	; 0x3938 <qtm_ptc_init_acquisition_module+0xf6>
    38b6:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <touch_seq_lib_state>
    38ba:	6a 01       	movw	r12, r20
    38bc:	7b 01       	movw	r14, r22
    38be:	cc 24       	eor	r12, r12
    38c0:	ee 24       	eor	r14, r14
    38c2:	ff 24       	eor	r15, r15
    38c4:	db 01       	movw	r26, r22
    38c6:	ca 01       	movw	r24, r20
    38c8:	88 27       	eor	r24, r24
    38ca:	99 27       	eor	r25, r25
    38cc:	bb 27       	eor	r27, r27
    38ce:	e1 11       	cpse	r30, r1
    38d0:	15 c0       	rjmp	.+42     	; 0x38fc <qtm_ptc_init_acquisition_module+0xba>
    38d2:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    38d6:	30 93 f1 00 	sts	0x00F1, r19	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    38da:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
    38de:	cd 2c       	mov	r12, r13
    38e0:	de 2c       	mov	r13, r14
    38e2:	ef 2c       	mov	r14, r15
    38e4:	ff 24       	eor	r15, r15
    38e6:	c0 92 f5 00 	sts	0x00F5, r12	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
    38ea:	cd 01       	movw	r24, r26
    38ec:	aa 27       	eor	r26, r26
    38ee:	bb 27       	eor	r27, r27
    38f0:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <touch_seq_lib_state>
    38fa:	1a c0       	rjmp	.+52     	; 0x3930 <qtm_ptc_init_acquisition_module+0xee>
    38fc:	e0 91 f0 00 	lds	r30, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    3900:	2e 2b       	or	r18, r30
    3902:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    3906:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    390a:	23 2b       	or	r18, r19
    390c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    3910:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
    3914:	42 2b       	or	r20, r18
    3916:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
    391a:	20 91 f5 00 	lds	r18, 0x00F5	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
    391e:	2d 29       	or	r18, r13
    3920:	20 93 f5 00 	sts	0x00F5, r18	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
    3924:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
    3928:	82 2f       	mov	r24, r18
    392a:	8a 2b       	or	r24, r26
    392c:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
    3930:	80 e0       	ldi	r24, 0x00	; 0
    3932:	03 c0       	rjmp	.+6      	; 0x393a <qtm_ptc_init_acquisition_module+0xf8>
    3934:	8b e0       	ldi	r24, 0x0B	; 11
    3936:	01 c0       	rjmp	.+2      	; 0x393a <qtm_ptc_init_acquisition_module+0xf8>
    3938:	82 e0       	ldi	r24, 0x02	; 2
    393a:	df 91       	pop	r29
    393c:	cf 91       	pop	r28
    393e:	ff 90       	pop	r15
    3940:	ef 90       	pop	r14
    3942:	df 90       	pop	r13
    3944:	cf 90       	pop	r12
    3946:	bf 90       	pop	r11
    3948:	af 90       	pop	r10
    394a:	9f 90       	pop	r9
    394c:	8f 90       	pop	r8
    394e:	08 95       	ret

00003950 <qtm_ptc_qtlib_assign_signal_memory>:
    3950:	00 97       	sbiw	r24, 0x00	; 0
    3952:	31 f0       	breq	.+12     	; 0x3960 <qtm_ptc_qtlib_assign_signal_memory+0x10>
    3954:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <qtm_raw_data_measurements_ptr+0x1>
    3958:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <qtm_raw_data_measurements_ptr>
    395c:	80 e0       	ldi	r24, 0x00	; 0
    395e:	08 95       	ret
    3960:	8b e0       	ldi	r24, 0x0B	; 11
    3962:	08 95       	ret

00003964 <qtm_ptc_start_measurement_seq>:
    3964:	cf 93       	push	r28
    3966:	df 93       	push	r29
    3968:	00 d0       	rcall	.+0      	; 0x396a <qtm_ptc_start_measurement_seq+0x6>
    396a:	00 d0       	rcall	.+0      	; 0x396c <qtm_ptc_start_measurement_seq+0x8>
    396c:	cd b7       	in	r28, 0x3d	; 61
    396e:	de b7       	in	r29, 0x3e	; 62
    3970:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <max_conversion_cycles>
    3974:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <max_conversion_cycles+0x1>
    3978:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <max_conversion_cycles+0x2>
    397c:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <max_conversion_cycles+0x3>
    3980:	61 15       	cp	r22, r1
    3982:	71 05       	cpc	r23, r1
    3984:	09 f4       	brne	.+2      	; 0x3988 <qtm_ptc_start_measurement_seq+0x24>
    3986:	db c0       	rjmp	.+438    	; 0x3b3e <qtm_ptc_start_measurement_seq+0x1da>
    3988:	00 97       	sbiw	r24, 0x00	; 0
    398a:	09 f4       	brne	.+2      	; 0x398e <qtm_ptc_start_measurement_seq+0x2a>
    398c:	d8 c0       	rjmp	.+432    	; 0x3b3e <qtm_ptc_start_measurement_seq+0x1da>
    398e:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <touch_seq_lib_state>
    3992:	22 23       	and	r18, r18
    3994:	09 f4       	brne	.+2      	; 0x3998 <qtm_ptc_start_measurement_seq+0x34>
    3996:	d5 c0       	rjmp	.+426    	; 0x3b42 <qtm_ptc_start_measurement_seq+0x1de>
    3998:	24 30       	cpi	r18, 0x04	; 4
    399a:	09 f0       	breq	.+2      	; 0x399e <qtm_ptc_start_measurement_seq+0x3a>
    399c:	93 c0       	rjmp	.+294    	; 0x3ac4 <qtm_ptc_start_measurement_seq+0x160>
    399e:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <ptc_eoc_ok_flag>
    39a2:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    39a6:	80 ff       	sbrs	r24, 0
    39a8:	8b c0       	rjmp	.+278    	; 0x3ac0 <qtm_ptc_start_measurement_seq+0x15c>
    39aa:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	a6 e0       	ldi	r26, 0x06	; 6
    39b2:	b0 e0       	ldi	r27, 0x00	; 0
    39b4:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <__umulhisi3>
    39b8:	60 93 a4 01 	sts	0x01A4, r22	; 0x8001a4 <max_conversion_cycles>
    39bc:	70 93 a5 01 	sts	0x01A5, r23	; 0x8001a5 <max_conversion_cycles+0x1>
    39c0:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <max_conversion_cycles+0x2>
    39c4:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <max_conversion_cycles+0x3>
    39c8:	20 91 e3 00 	lds	r18, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    39cc:	2f 70       	andi	r18, 0x0F	; 15
    39ce:	dc 01       	movw	r26, r24
    39d0:	cb 01       	movw	r24, r22
    39d2:	82 0f       	add	r24, r18
    39d4:	91 1d       	adc	r25, r1
    39d6:	a1 1d       	adc	r26, r1
    39d8:	b1 1d       	adc	r27, r1
    39da:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <max_conversion_cycles>
    39de:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <max_conversion_cycles+0x1>
    39e2:	a0 93 a6 01 	sts	0x01A6, r26	; 0x8001a6 <max_conversion_cycles+0x2>
    39e6:	b0 93 a7 01 	sts	0x01A7, r27	; 0x8001a7 <max_conversion_cycles+0x3>
    39ea:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    39ee:	27 70       	andi	r18, 0x07	; 7
    39f0:	04 c0       	rjmp	.+8      	; 0x39fa <qtm_ptc_start_measurement_seq+0x96>
    39f2:	88 0f       	add	r24, r24
    39f4:	99 1f       	adc	r25, r25
    39f6:	aa 1f       	adc	r26, r26
    39f8:	bb 1f       	adc	r27, r27
    39fa:	2a 95       	dec	r18
    39fc:	d2 f7       	brpl	.-12     	; 0x39f2 <qtm_ptc_start_measurement_seq+0x8e>
    39fe:	0e 96       	adiw	r24, 0x0e	; 14
    3a00:	a1 1d       	adc	r26, r1
    3a02:	b1 1d       	adc	r27, r1
    3a04:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <max_conversion_cycles>
    3a08:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <max_conversion_cycles+0x1>
    3a0c:	a0 93 a6 01 	sts	0x01A6, r26	; 0x8001a6 <max_conversion_cycles+0x2>
    3a10:	b0 93 a7 01 	sts	0x01A7, r27	; 0x8001a7 <max_conversion_cycles+0x3>
    3a14:	20 91 e1 00 	lds	r18, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    3a18:	23 70       	andi	r18, 0x03	; 3
    3a1a:	04 c0       	rjmp	.+8      	; 0x3a24 <qtm_ptc_start_measurement_seq+0xc0>
    3a1c:	88 0f       	add	r24, r24
    3a1e:	99 1f       	adc	r25, r25
    3a20:	aa 1f       	adc	r26, r26
    3a22:	bb 1f       	adc	r27, r27
    3a24:	2a 95       	dec	r18
    3a26:	d2 f7       	brpl	.-12     	; 0x3a1c <qtm_ptc_start_measurement_seq+0xb8>
    3a28:	22 e0       	ldi	r18, 0x02	; 2
    3a2a:	b6 95       	lsr	r27
    3a2c:	a7 95       	ror	r26
    3a2e:	97 95       	ror	r25
    3a30:	87 95       	ror	r24
    3a32:	2a 95       	dec	r18
    3a34:	d1 f7       	brne	.-12     	; 0x3a2a <qtm_ptc_start_measurement_seq+0xc6>
    3a36:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <max_conversion_cycles>
    3a3a:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <max_conversion_cycles+0x1>
    3a3e:	a0 93 a6 01 	sts	0x01A6, r26	; 0x8001a6 <max_conversion_cycles+0x2>
    3a42:	b0 93 a7 01 	sts	0x01A7, r27	; 0x8001a7 <max_conversion_cycles+0x3>
    3a46:	19 82       	std	Y+1, r1	; 0x01
    3a48:	1a 82       	std	Y+2, r1	; 0x02
    3a4a:	1b 82       	std	Y+3, r1	; 0x03
    3a4c:	1c 82       	std	Y+4, r1	; 0x04
    3a4e:	21 e0       	ldi	r18, 0x01	; 1
    3a50:	49 81       	ldd	r20, Y+1	; 0x01
    3a52:	5a 81       	ldd	r21, Y+2	; 0x02
    3a54:	6b 81       	ldd	r22, Y+3	; 0x03
    3a56:	7c 81       	ldd	r23, Y+4	; 0x04
    3a58:	48 17       	cp	r20, r24
    3a5a:	59 07       	cpc	r21, r25
    3a5c:	6a 07       	cpc	r22, r26
    3a5e:	7b 07       	cpc	r23, r27
    3a60:	b0 f4       	brcc	.+44     	; 0x3a8e <qtm_ptc_start_measurement_seq+0x12a>
    3a62:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <ptc_eoc_ok_flag>
    3a66:	33 23       	and	r19, r19
    3a68:	29 f0       	breq	.+10     	; 0x3a74 <qtm_ptc_start_measurement_seq+0x110>
    3a6a:	89 83       	std	Y+1, r24	; 0x01
    3a6c:	9a 83       	std	Y+2, r25	; 0x02
    3a6e:	ab 83       	std	Y+3, r26	; 0x03
    3a70:	bc 83       	std	Y+4, r27	; 0x04
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	49 81       	ldd	r20, Y+1	; 0x01
    3a76:	5a 81       	ldd	r21, Y+2	; 0x02
    3a78:	6b 81       	ldd	r22, Y+3	; 0x03
    3a7a:	7c 81       	ldd	r23, Y+4	; 0x04
    3a7c:	4f 5f       	subi	r20, 0xFF	; 255
    3a7e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a80:	6f 4f       	sbci	r22, 0xFF	; 255
    3a82:	7f 4f       	sbci	r23, 0xFF	; 255
    3a84:	49 83       	std	Y+1, r20	; 0x01
    3a86:	5a 83       	std	Y+2, r21	; 0x02
    3a88:	6b 83       	std	Y+3, r22	; 0x03
    3a8a:	7c 83       	std	Y+4, r23	; 0x04
    3a8c:	e1 cf       	rjmp	.-62     	; 0x3a50 <qtm_ptc_start_measurement_seq+0xec>
    3a8e:	22 23       	and	r18, r18
    3a90:	b9 f0       	breq	.+46     	; 0x3ac0 <qtm_ptc_start_measurement_seq+0x15c>
    3a92:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    3a96:	80 ff       	sbrs	r24, 0
    3a98:	13 c0       	rjmp	.+38     	; 0x3ac0 <qtm_ptc_start_measurement_seq+0x15c>
    3a9a:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    3a9e:	00 00       	nop
    3aa0:	82 e1       	ldi	r24, 0x12	; 18
    3aa2:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    3aa6:	00 00       	nop
    3aa8:	81 e0       	ldi	r24, 0x01	; 1
    3aaa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    3aae:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <ptc_lockups>
    3ab2:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <ptc_lockups+0x1>
    3ab6:	01 96       	adiw	r24, 0x01	; 1
    3ab8:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <ptc_lockups+0x1>
    3abc:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <ptc_lockups>
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	42 c0       	rjmp	.+132    	; 0x3b48 <qtm_ptc_start_measurement_seq+0x1e4>
    3ac4:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    3ac8:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    3acc:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <ptc_seq_measure_complete_pointer+0x1>
    3ad0:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <ptc_seq_measure_complete_pointer>
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	ed 91       	ld	r30, X+
    3ad8:	fc 91       	ld	r31, X
    3ada:	82 81       	ldd	r24, Z+2	; 0x02
    3adc:	80 34       	cpi	r24, 0x40	; 64
    3ade:	11 f4       	brne	.+4      	; 0x3ae4 <qtm_ptc_start_measurement_seq+0x180>
    3ae0:	88 e0       	ldi	r24, 0x08	; 8
    3ae2:	03 c0       	rjmp	.+6      	; 0x3aea <qtm_ptc_start_measurement_seq+0x186>
    3ae4:	80 38       	cpi	r24, 0x80	; 128
    3ae6:	79 f5       	brne	.+94     	; 0x3b46 <qtm_ptc_start_measurement_seq+0x1e2>
    3ae8:	8a e0       	ldi	r24, 0x0A	; 10
    3aea:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    3aee:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    3af2:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    3af6:	01 90       	ld	r0, Z+
    3af8:	f0 81       	ld	r31, Z
    3afa:	e0 2d       	mov	r30, r0
    3afc:	84 81       	ldd	r24, Z+4	; 0x04
    3afe:	80 31       	cpi	r24, 0x10	; 16
    3b00:	08 f0       	brcs	.+2      	; 0x3b04 <qtm_ptc_start_measurement_seq+0x1a0>
    3b02:	80 e1       	ldi	r24, 0x10	; 16
    3b04:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	84 bb       	out	0x14, r24	; 20
    3b0c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7f8074>
    3b10:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <current_measure_channel+0x1>
    3b14:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <current_measure_channel>
    3b18:	0e 94 c6 19 	call	0x338c	; 0x338c <select_next_channel_to_measure>
    3b1c:	81 11       	cpse	r24, r1
    3b1e:	0b c0       	rjmp	.+22     	; 0x3b36 <qtm_ptc_start_measurement_seq+0x1d2>
    3b20:	84 e0       	ldi	r24, 0x04	; 4
    3b22:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <touch_seq_lib_state>
    3b26:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <current_measure_channel>
    3b2a:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <current_measure_channel+0x1>
    3b2e:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <qtm_measure_node>
    3b32:	80 e0       	ldi	r24, 0x00	; 0
    3b34:	09 c0       	rjmp	.+18     	; 0x3b48 <qtm_ptc_start_measurement_seq+0x1e4>
    3b36:	82 e0       	ldi	r24, 0x02	; 2
    3b38:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <touch_seq_lib_state>
    3b3c:	05 c0       	rjmp	.+10     	; 0x3b48 <qtm_ptc_start_measurement_seq+0x1e4>
    3b3e:	8b e0       	ldi	r24, 0x0B	; 11
    3b40:	03 c0       	rjmp	.+6      	; 0x3b48 <qtm_ptc_start_measurement_seq+0x1e4>
    3b42:	83 e0       	ldi	r24, 0x03	; 3
    3b44:	01 c0       	rjmp	.+2      	; 0x3b48 <qtm_ptc_start_measurement_seq+0x1e4>
    3b46:	82 e0       	ldi	r24, 0x02	; 2
    3b48:	0f 90       	pop	r0
    3b4a:	0f 90       	pop	r0
    3b4c:	0f 90       	pop	r0
    3b4e:	0f 90       	pop	r0
    3b50:	df 91       	pop	r29
    3b52:	cf 91       	pop	r28
    3b54:	08 95       	ret

00003b56 <qtm_enable_sensor_node>:
    3b56:	00 97       	sbiw	r24, 0x00	; 0
    3b58:	c9 f0       	breq	.+50     	; 0x3b8c <qtm_enable_sensor_node+0x36>
    3b5a:	dc 01       	movw	r26, r24
    3b5c:	ed 91       	ld	r30, X+
    3b5e:	fc 91       	ld	r31, X
    3b60:	11 97       	sbiw	r26, 0x01	; 1
    3b62:	20 81       	ld	r18, Z
    3b64:	31 81       	ldd	r19, Z+1	; 0x01
    3b66:	26 17       	cp	r18, r22
    3b68:	37 07       	cpc	r19, r23
    3b6a:	90 f0       	brcs	.+36     	; 0x3b90 <qtm_enable_sensor_node+0x3a>
    3b6c:	45 e0       	ldi	r20, 0x05	; 5
    3b6e:	46 9f       	mul	r20, r22
    3b70:	90 01       	movw	r18, r0
    3b72:	47 9f       	mul	r20, r23
    3b74:	30 0d       	add	r19, r0
    3b76:	11 24       	eor	r1, r1
    3b78:	14 96       	adiw	r26, 0x04	; 4
    3b7a:	ed 91       	ld	r30, X+
    3b7c:	fc 91       	ld	r31, X
    3b7e:	15 97       	sbiw	r26, 0x05	; 5
    3b80:	e2 0f       	add	r30, r18
    3b82:	f3 1f       	adc	r31, r19
    3b84:	81 e0       	ldi	r24, 0x01	; 1
    3b86:	80 83       	st	Z, r24
    3b88:	80 e0       	ldi	r24, 0x00	; 0
    3b8a:	08 95       	ret
    3b8c:	8b e0       	ldi	r24, 0x0B	; 11
    3b8e:	08 95       	ret
    3b90:	82 e0       	ldi	r24, 0x02	; 2
    3b92:	08 95       	ret

00003b94 <qtm_calibrate_sensor_node>:
    3b94:	00 97       	sbiw	r24, 0x00	; 0
    3b96:	d1 f1       	breq	.+116    	; 0x3c0c <qtm_calibrate_sensor_node+0x78>
    3b98:	dc 01       	movw	r26, r24
    3b9a:	ed 91       	ld	r30, X+
    3b9c:	fc 91       	ld	r31, X
    3b9e:	11 97       	sbiw	r26, 0x01	; 1
    3ba0:	20 81       	ld	r18, Z
    3ba2:	31 81       	ldd	r19, Z+1	; 0x01
    3ba4:	26 17       	cp	r18, r22
    3ba6:	37 07       	cpc	r19, r23
    3ba8:	98 f1       	brcs	.+102    	; 0x3c10 <qtm_calibrate_sensor_node+0x7c>
    3baa:	22 81       	ldd	r18, Z+2	; 0x02
    3bac:	14 96       	adiw	r26, 0x04	; 4
    3bae:	ed 91       	ld	r30, X+
    3bb0:	fc 91       	ld	r31, X
    3bb2:	15 97       	sbiw	r26, 0x05	; 5
    3bb4:	20 34       	cpi	r18, 0x40	; 64
    3bb6:	59 f4       	brne	.+22     	; 0x3bce <qtm_calibrate_sensor_node+0x3a>
    3bb8:	85 e0       	ldi	r24, 0x05	; 5
    3bba:	86 9f       	mul	r24, r22
    3bbc:	d0 01       	movw	r26, r0
    3bbe:	87 9f       	mul	r24, r23
    3bc0:	b0 0d       	add	r27, r0
    3bc2:	11 24       	eor	r1, r1
    3bc4:	ae 0f       	add	r26, r30
    3bc6:	bf 1f       	adc	r27, r31
    3bc8:	84 e3       	ldi	r24, 0x34	; 52
    3bca:	92 e0       	ldi	r25, 0x02	; 2
    3bcc:	0c c0       	rjmp	.+24     	; 0x3be6 <qtm_calibrate_sensor_node+0x52>
    3bce:	20 38       	cpi	r18, 0x80	; 128
    3bd0:	81 f4       	brne	.+32     	; 0x3bf2 <qtm_calibrate_sensor_node+0x5e>
    3bd2:	85 e0       	ldi	r24, 0x05	; 5
    3bd4:	86 9f       	mul	r24, r22
    3bd6:	d0 01       	movw	r26, r0
    3bd8:	87 9f       	mul	r24, r23
    3bda:	b0 0d       	add	r27, r0
    3bdc:	11 24       	eor	r1, r1
    3bde:	ae 0f       	add	r26, r30
    3be0:	bf 1f       	adc	r27, r31
    3be2:	87 e6       	ldi	r24, 0x67	; 103
    3be4:	95 e0       	ldi	r25, 0x05	; 5
    3be6:	14 96       	adiw	r26, 0x04	; 4
    3be8:	9c 93       	st	X, r25
    3bea:	8e 93       	st	-X, r24
    3bec:	13 97       	sbiw	r26, 0x03	; 3
    3bee:	80 e0       	ldi	r24, 0x00	; 0
    3bf0:	01 c0       	rjmp	.+2      	; 0x3bf4 <qtm_calibrate_sensor_node+0x60>
    3bf2:	82 e0       	ldi	r24, 0x02	; 2
    3bf4:	95 e0       	ldi	r25, 0x05	; 5
    3bf6:	96 9f       	mul	r25, r22
    3bf8:	90 01       	movw	r18, r0
    3bfa:	97 9f       	mul	r25, r23
    3bfc:	30 0d       	add	r19, r0
    3bfe:	11 24       	eor	r1, r1
    3c00:	e2 0f       	add	r30, r18
    3c02:	f3 1f       	adc	r31, r19
    3c04:	90 81       	ld	r25, Z
    3c06:	92 60       	ori	r25, 0x02	; 2
    3c08:	90 83       	st	Z, r25
    3c0a:	08 95       	ret
    3c0c:	8b e0       	ldi	r24, 0x0B	; 11
    3c0e:	08 95       	ret
    3c10:	82 e0       	ldi	r24, 0x02	; 2
    3c12:	08 95       	ret

00003c14 <qtm_m328pb_ptc_handler_eoc>:
    3c14:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    3c18:	81 e0       	ldi	r24, 0x01	; 1
    3c1a:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <ptc_eoc_ok_flag>
    3c1e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
    3c22:	60 91 ef 00 	lds	r22, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
    3c26:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <current_measure_channel>
    3c2a:	30 91 a2 01 	lds	r19, 0x01A2	; 0x8001a2 <current_measure_channel+0x1>
    3c2e:	a9 01       	movw	r20, r18
    3c30:	44 0f       	add	r20, r20
    3c32:	55 1f       	adc	r21, r21
    3c34:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <qtm_raw_data_measurements_ptr>
    3c38:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <qtm_raw_data_measurements_ptr+0x1>
    3c3c:	e4 0f       	add	r30, r20
    3c3e:	f5 1f       	adc	r31, r21
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	96 2b       	or	r25, r22
    3c44:	91 83       	std	Z+1, r25	; 0x01
    3c46:	80 83       	st	Z, r24
    3c48:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <good_eocs>
    3c4c:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <good_eocs+0x1>
    3c50:	01 96       	adiw	r24, 0x01	; 1
    3c52:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <good_eocs+0x1>
    3c56:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <good_eocs>
    3c5a:	89 2b       	or	r24, r25
    3c5c:	21 f4       	brne	.+8      	; 0x3c66 <qtm_m328pb_ptc_handler_eoc+0x52>
    3c5e:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <ptc_lockups+0x1>
    3c62:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <ptc_lockups>
    3c66:	2f 5f       	subi	r18, 0xFF	; 255
    3c68:	3f 4f       	sbci	r19, 0xFF	; 255
    3c6a:	30 93 a2 01 	sts	0x01A2, r19	; 0x8001a2 <current_measure_channel+0x1>
    3c6e:	20 93 a1 01 	sts	0x01A1, r18	; 0x8001a1 <current_measure_channel>
    3c72:	0e 94 c6 19 	call	0x338c	; 0x338c <select_next_channel_to_measure>
    3c76:	81 11       	cpse	r24, r1
    3c78:	09 c0       	rjmp	.+18     	; 0x3c8c <qtm_m328pb_ptc_handler_eoc+0x78>
    3c7a:	84 e0       	ldi	r24, 0x04	; 4
    3c7c:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <touch_seq_lib_state>
    3c80:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <current_measure_channel>
    3c84:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <current_measure_channel+0x1>
    3c88:	0c 94 f9 19 	jmp	0x33f2	; 0x33f2 <qtm_measure_node>
    3c8c:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <ptc_seq_measure_complete_pointer>
    3c90:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <ptc_seq_measure_complete_pointer+0x1>
    3c94:	09 94       	ijmp

00003c96 <ceil>:
    3c96:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <__fp_trunc>
    3c9a:	90 f0       	brcs	.+36     	; 0x3cc0 <ceil+0x2a>
    3c9c:	9f 37       	cpi	r25, 0x7F	; 127
    3c9e:	48 f4       	brcc	.+18     	; 0x3cb2 <ceil+0x1c>
    3ca0:	91 11       	cpse	r25, r1
    3ca2:	16 f4       	brtc	.+4      	; 0x3ca8 <ceil+0x12>
    3ca4:	0c 94 32 1f 	jmp	0x3e64	; 0x3e64 <__fp_szero>
    3ca8:	60 e0       	ldi	r22, 0x00	; 0
    3caa:	70 e0       	ldi	r23, 0x00	; 0
    3cac:	80 e8       	ldi	r24, 0x80	; 128
    3cae:	9f e3       	ldi	r25, 0x3F	; 63
    3cb0:	08 95       	ret
    3cb2:	26 f0       	brts	.+8      	; 0x3cbc <ceil+0x26>
    3cb4:	1b 16       	cp	r1, r27
    3cb6:	61 1d       	adc	r22, r1
    3cb8:	71 1d       	adc	r23, r1
    3cba:	81 1d       	adc	r24, r1
    3cbc:	0c 94 ce 1e 	jmp	0x3d9c	; 0x3d9c <__fp_mintl>
    3cc0:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <__fp_mpack>

00003cc4 <__fixunssfsi>:
    3cc4:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <__fp_splitA>
    3cc8:	88 f0       	brcs	.+34     	; 0x3cec <__fixunssfsi+0x28>
    3cca:	9f 57       	subi	r25, 0x7F	; 127
    3ccc:	98 f0       	brcs	.+38     	; 0x3cf4 <__fixunssfsi+0x30>
    3cce:	b9 2f       	mov	r27, r25
    3cd0:	99 27       	eor	r25, r25
    3cd2:	b7 51       	subi	r27, 0x17	; 23
    3cd4:	b0 f0       	brcs	.+44     	; 0x3d02 <__fixunssfsi+0x3e>
    3cd6:	e1 f0       	breq	.+56     	; 0x3d10 <__fixunssfsi+0x4c>
    3cd8:	66 0f       	add	r22, r22
    3cda:	77 1f       	adc	r23, r23
    3cdc:	88 1f       	adc	r24, r24
    3cde:	99 1f       	adc	r25, r25
    3ce0:	1a f0       	brmi	.+6      	; 0x3ce8 <__fixunssfsi+0x24>
    3ce2:	ba 95       	dec	r27
    3ce4:	c9 f7       	brne	.-14     	; 0x3cd8 <__fixunssfsi+0x14>
    3ce6:	14 c0       	rjmp	.+40     	; 0x3d10 <__fixunssfsi+0x4c>
    3ce8:	b1 30       	cpi	r27, 0x01	; 1
    3cea:	91 f0       	breq	.+36     	; 0x3d10 <__fixunssfsi+0x4c>
    3cec:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <__fp_zero>
    3cf0:	b1 e0       	ldi	r27, 0x01	; 1
    3cf2:	08 95       	ret
    3cf4:	0c 94 31 1f 	jmp	0x3e62	; 0x3e62 <__fp_zero>
    3cf8:	67 2f       	mov	r22, r23
    3cfa:	78 2f       	mov	r23, r24
    3cfc:	88 27       	eor	r24, r24
    3cfe:	b8 5f       	subi	r27, 0xF8	; 248
    3d00:	39 f0       	breq	.+14     	; 0x3d10 <__fixunssfsi+0x4c>
    3d02:	b9 3f       	cpi	r27, 0xF9	; 249
    3d04:	cc f3       	brlt	.-14     	; 0x3cf8 <__fixunssfsi+0x34>
    3d06:	86 95       	lsr	r24
    3d08:	77 95       	ror	r23
    3d0a:	67 95       	ror	r22
    3d0c:	b3 95       	inc	r27
    3d0e:	d9 f7       	brne	.-10     	; 0x3d06 <__fixunssfsi+0x42>
    3d10:	3e f4       	brtc	.+14     	; 0x3d20 <__fixunssfsi+0x5c>
    3d12:	90 95       	com	r25
    3d14:	80 95       	com	r24
    3d16:	70 95       	com	r23
    3d18:	61 95       	neg	r22
    3d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d1c:	8f 4f       	sbci	r24, 0xFF	; 255
    3d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d20:	08 95       	ret

00003d22 <__floatunsisf>:
    3d22:	e8 94       	clt
    3d24:	09 c0       	rjmp	.+18     	; 0x3d38 <__floatsisf+0x12>

00003d26 <__floatsisf>:
    3d26:	97 fb       	bst	r25, 7
    3d28:	3e f4       	brtc	.+14     	; 0x3d38 <__floatsisf+0x12>
    3d2a:	90 95       	com	r25
    3d2c:	80 95       	com	r24
    3d2e:	70 95       	com	r23
    3d30:	61 95       	neg	r22
    3d32:	7f 4f       	sbci	r23, 0xFF	; 255
    3d34:	8f 4f       	sbci	r24, 0xFF	; 255
    3d36:	9f 4f       	sbci	r25, 0xFF	; 255
    3d38:	99 23       	and	r25, r25
    3d3a:	a9 f0       	breq	.+42     	; 0x3d66 <__floatsisf+0x40>
    3d3c:	f9 2f       	mov	r31, r25
    3d3e:	96 e9       	ldi	r25, 0x96	; 150
    3d40:	bb 27       	eor	r27, r27
    3d42:	93 95       	inc	r25
    3d44:	f6 95       	lsr	r31
    3d46:	87 95       	ror	r24
    3d48:	77 95       	ror	r23
    3d4a:	67 95       	ror	r22
    3d4c:	b7 95       	ror	r27
    3d4e:	f1 11       	cpse	r31, r1
    3d50:	f8 cf       	rjmp	.-16     	; 0x3d42 <__floatsisf+0x1c>
    3d52:	fa f4       	brpl	.+62     	; 0x3d92 <__floatsisf+0x6c>
    3d54:	bb 0f       	add	r27, r27
    3d56:	11 f4       	brne	.+4      	; 0x3d5c <__floatsisf+0x36>
    3d58:	60 ff       	sbrs	r22, 0
    3d5a:	1b c0       	rjmp	.+54     	; 0x3d92 <__floatsisf+0x6c>
    3d5c:	6f 5f       	subi	r22, 0xFF	; 255
    3d5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d60:	8f 4f       	sbci	r24, 0xFF	; 255
    3d62:	9f 4f       	sbci	r25, 0xFF	; 255
    3d64:	16 c0       	rjmp	.+44     	; 0x3d92 <__floatsisf+0x6c>
    3d66:	88 23       	and	r24, r24
    3d68:	11 f0       	breq	.+4      	; 0x3d6e <__floatsisf+0x48>
    3d6a:	96 e9       	ldi	r25, 0x96	; 150
    3d6c:	11 c0       	rjmp	.+34     	; 0x3d90 <__floatsisf+0x6a>
    3d6e:	77 23       	and	r23, r23
    3d70:	21 f0       	breq	.+8      	; 0x3d7a <__floatsisf+0x54>
    3d72:	9e e8       	ldi	r25, 0x8E	; 142
    3d74:	87 2f       	mov	r24, r23
    3d76:	76 2f       	mov	r23, r22
    3d78:	05 c0       	rjmp	.+10     	; 0x3d84 <__floatsisf+0x5e>
    3d7a:	66 23       	and	r22, r22
    3d7c:	71 f0       	breq	.+28     	; 0x3d9a <__floatsisf+0x74>
    3d7e:	96 e8       	ldi	r25, 0x86	; 134
    3d80:	86 2f       	mov	r24, r22
    3d82:	70 e0       	ldi	r23, 0x00	; 0
    3d84:	60 e0       	ldi	r22, 0x00	; 0
    3d86:	2a f0       	brmi	.+10     	; 0x3d92 <__floatsisf+0x6c>
    3d88:	9a 95       	dec	r25
    3d8a:	66 0f       	add	r22, r22
    3d8c:	77 1f       	adc	r23, r23
    3d8e:	88 1f       	adc	r24, r24
    3d90:	da f7       	brpl	.-10     	; 0x3d88 <__floatsisf+0x62>
    3d92:	88 0f       	add	r24, r24
    3d94:	96 95       	lsr	r25
    3d96:	87 95       	ror	r24
    3d98:	97 f9       	bld	r25, 7
    3d9a:	08 95       	ret

00003d9c <__fp_mintl>:
    3d9c:	88 23       	and	r24, r24
    3d9e:	71 f4       	brne	.+28     	; 0x3dbc <__fp_mintl+0x20>
    3da0:	77 23       	and	r23, r23
    3da2:	21 f0       	breq	.+8      	; 0x3dac <__fp_mintl+0x10>
    3da4:	98 50       	subi	r25, 0x08	; 8
    3da6:	87 2b       	or	r24, r23
    3da8:	76 2f       	mov	r23, r22
    3daa:	07 c0       	rjmp	.+14     	; 0x3dba <__fp_mintl+0x1e>
    3dac:	66 23       	and	r22, r22
    3dae:	11 f4       	brne	.+4      	; 0x3db4 <__fp_mintl+0x18>
    3db0:	99 27       	eor	r25, r25
    3db2:	0d c0       	rjmp	.+26     	; 0x3dce <__fp_mintl+0x32>
    3db4:	90 51       	subi	r25, 0x10	; 16
    3db6:	86 2b       	or	r24, r22
    3db8:	70 e0       	ldi	r23, 0x00	; 0
    3dba:	60 e0       	ldi	r22, 0x00	; 0
    3dbc:	2a f0       	brmi	.+10     	; 0x3dc8 <__fp_mintl+0x2c>
    3dbe:	9a 95       	dec	r25
    3dc0:	66 0f       	add	r22, r22
    3dc2:	77 1f       	adc	r23, r23
    3dc4:	88 1f       	adc	r24, r24
    3dc6:	da f7       	brpl	.-10     	; 0x3dbe <__fp_mintl+0x22>
    3dc8:	88 0f       	add	r24, r24
    3dca:	96 95       	lsr	r25
    3dcc:	87 95       	ror	r24
    3dce:	97 f9       	bld	r25, 7
    3dd0:	08 95       	ret

00003dd2 <__fp_mpack>:
    3dd2:	9f 3f       	cpi	r25, 0xFF	; 255
    3dd4:	31 f0       	breq	.+12     	; 0x3de2 <__fp_mpack_finite+0xc>

00003dd6 <__fp_mpack_finite>:
    3dd6:	91 50       	subi	r25, 0x01	; 1
    3dd8:	20 f4       	brcc	.+8      	; 0x3de2 <__fp_mpack_finite+0xc>
    3dda:	87 95       	ror	r24
    3ddc:	77 95       	ror	r23
    3dde:	67 95       	ror	r22
    3de0:	b7 95       	ror	r27
    3de2:	88 0f       	add	r24, r24
    3de4:	91 1d       	adc	r25, r1
    3de6:	96 95       	lsr	r25
    3de8:	87 95       	ror	r24
    3dea:	97 f9       	bld	r25, 7
    3dec:	08 95       	ret

00003dee <__fp_split3>:
    3dee:	57 fd       	sbrc	r21, 7
    3df0:	90 58       	subi	r25, 0x80	; 128
    3df2:	44 0f       	add	r20, r20
    3df4:	55 1f       	adc	r21, r21
    3df6:	59 f0       	breq	.+22     	; 0x3e0e <__fp_splitA+0x10>
    3df8:	5f 3f       	cpi	r21, 0xFF	; 255
    3dfa:	71 f0       	breq	.+28     	; 0x3e18 <__fp_splitA+0x1a>
    3dfc:	47 95       	ror	r20

00003dfe <__fp_splitA>:
    3dfe:	88 0f       	add	r24, r24
    3e00:	97 fb       	bst	r25, 7
    3e02:	99 1f       	adc	r25, r25
    3e04:	61 f0       	breq	.+24     	; 0x3e1e <__fp_splitA+0x20>
    3e06:	9f 3f       	cpi	r25, 0xFF	; 255
    3e08:	79 f0       	breq	.+30     	; 0x3e28 <__fp_splitA+0x2a>
    3e0a:	87 95       	ror	r24
    3e0c:	08 95       	ret
    3e0e:	12 16       	cp	r1, r18
    3e10:	13 06       	cpc	r1, r19
    3e12:	14 06       	cpc	r1, r20
    3e14:	55 1f       	adc	r21, r21
    3e16:	f2 cf       	rjmp	.-28     	; 0x3dfc <__fp_split3+0xe>
    3e18:	46 95       	lsr	r20
    3e1a:	f1 df       	rcall	.-30     	; 0x3dfe <__fp_splitA>
    3e1c:	08 c0       	rjmp	.+16     	; 0x3e2e <__fp_splitA+0x30>
    3e1e:	16 16       	cp	r1, r22
    3e20:	17 06       	cpc	r1, r23
    3e22:	18 06       	cpc	r1, r24
    3e24:	99 1f       	adc	r25, r25
    3e26:	f1 cf       	rjmp	.-30     	; 0x3e0a <__fp_splitA+0xc>
    3e28:	86 95       	lsr	r24
    3e2a:	71 05       	cpc	r23, r1
    3e2c:	61 05       	cpc	r22, r1
    3e2e:	08 94       	sec
    3e30:	08 95       	ret

00003e32 <__fp_trunc>:
    3e32:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <__fp_splitA>
    3e36:	a0 f0       	brcs	.+40     	; 0x3e60 <__fp_trunc+0x2e>
    3e38:	be e7       	ldi	r27, 0x7E	; 126
    3e3a:	b9 17       	cp	r27, r25
    3e3c:	88 f4       	brcc	.+34     	; 0x3e60 <__fp_trunc+0x2e>
    3e3e:	bb 27       	eor	r27, r27
    3e40:	9f 38       	cpi	r25, 0x8F	; 143
    3e42:	60 f4       	brcc	.+24     	; 0x3e5c <__fp_trunc+0x2a>
    3e44:	16 16       	cp	r1, r22
    3e46:	b1 1d       	adc	r27, r1
    3e48:	67 2f       	mov	r22, r23
    3e4a:	78 2f       	mov	r23, r24
    3e4c:	88 27       	eor	r24, r24
    3e4e:	98 5f       	subi	r25, 0xF8	; 248
    3e50:	f7 cf       	rjmp	.-18     	; 0x3e40 <__fp_trunc+0xe>
    3e52:	86 95       	lsr	r24
    3e54:	77 95       	ror	r23
    3e56:	67 95       	ror	r22
    3e58:	b1 1d       	adc	r27, r1
    3e5a:	93 95       	inc	r25
    3e5c:	96 39       	cpi	r25, 0x96	; 150
    3e5e:	c8 f3       	brcs	.-14     	; 0x3e52 <__fp_trunc+0x20>
    3e60:	08 95       	ret

00003e62 <__fp_zero>:
    3e62:	e8 94       	clt

00003e64 <__fp_szero>:
    3e64:	bb 27       	eor	r27, r27
    3e66:	66 27       	eor	r22, r22
    3e68:	77 27       	eor	r23, r23
    3e6a:	cb 01       	movw	r24, r22
    3e6c:	97 f9       	bld	r25, 7
    3e6e:	08 95       	ret

00003e70 <__mulsf3>:
    3e70:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <__mulsf3x>
    3e74:	0c 94 bc 1f 	jmp	0x3f78	; 0x3f78 <__fp_round>
    3e78:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__fp_pscA>
    3e7c:	38 f0       	brcs	.+14     	; 0x3e8c <__mulsf3+0x1c>
    3e7e:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <__fp_pscB>
    3e82:	20 f0       	brcs	.+8      	; 0x3e8c <__mulsf3+0x1c>
    3e84:	95 23       	and	r25, r21
    3e86:	11 f0       	breq	.+4      	; 0x3e8c <__mulsf3+0x1c>
    3e88:	0c 94 a5 1f 	jmp	0x3f4a	; 0x3f4a <__fp_inf>
    3e8c:	0c 94 ab 1f 	jmp	0x3f56	; 0x3f56 <__fp_nan>
    3e90:	11 24       	eor	r1, r1
    3e92:	0c 94 32 1f 	jmp	0x3e64	; 0x3e64 <__fp_szero>

00003e96 <__mulsf3x>:
    3e96:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__fp_split3>
    3e9a:	70 f3       	brcs	.-36     	; 0x3e78 <__mulsf3+0x8>

00003e9c <__mulsf3_pse>:
    3e9c:	95 9f       	mul	r25, r21
    3e9e:	c1 f3       	breq	.-16     	; 0x3e90 <__mulsf3+0x20>
    3ea0:	95 0f       	add	r25, r21
    3ea2:	50 e0       	ldi	r21, 0x00	; 0
    3ea4:	55 1f       	adc	r21, r21
    3ea6:	62 9f       	mul	r22, r18
    3ea8:	f0 01       	movw	r30, r0
    3eaa:	72 9f       	mul	r23, r18
    3eac:	bb 27       	eor	r27, r27
    3eae:	f0 0d       	add	r31, r0
    3eb0:	b1 1d       	adc	r27, r1
    3eb2:	63 9f       	mul	r22, r19
    3eb4:	aa 27       	eor	r26, r26
    3eb6:	f0 0d       	add	r31, r0
    3eb8:	b1 1d       	adc	r27, r1
    3eba:	aa 1f       	adc	r26, r26
    3ebc:	64 9f       	mul	r22, r20
    3ebe:	66 27       	eor	r22, r22
    3ec0:	b0 0d       	add	r27, r0
    3ec2:	a1 1d       	adc	r26, r1
    3ec4:	66 1f       	adc	r22, r22
    3ec6:	82 9f       	mul	r24, r18
    3ec8:	22 27       	eor	r18, r18
    3eca:	b0 0d       	add	r27, r0
    3ecc:	a1 1d       	adc	r26, r1
    3ece:	62 1f       	adc	r22, r18
    3ed0:	73 9f       	mul	r23, r19
    3ed2:	b0 0d       	add	r27, r0
    3ed4:	a1 1d       	adc	r26, r1
    3ed6:	62 1f       	adc	r22, r18
    3ed8:	83 9f       	mul	r24, r19
    3eda:	a0 0d       	add	r26, r0
    3edc:	61 1d       	adc	r22, r1
    3ede:	22 1f       	adc	r18, r18
    3ee0:	74 9f       	mul	r23, r20
    3ee2:	33 27       	eor	r19, r19
    3ee4:	a0 0d       	add	r26, r0
    3ee6:	61 1d       	adc	r22, r1
    3ee8:	23 1f       	adc	r18, r19
    3eea:	84 9f       	mul	r24, r20
    3eec:	60 0d       	add	r22, r0
    3eee:	21 1d       	adc	r18, r1
    3ef0:	82 2f       	mov	r24, r18
    3ef2:	76 2f       	mov	r23, r22
    3ef4:	6a 2f       	mov	r22, r26
    3ef6:	11 24       	eor	r1, r1
    3ef8:	9f 57       	subi	r25, 0x7F	; 127
    3efa:	50 40       	sbci	r21, 0x00	; 0
    3efc:	9a f0       	brmi	.+38     	; 0x3f24 <__mulsf3_pse+0x88>
    3efe:	f1 f0       	breq	.+60     	; 0x3f3c <__mulsf3_pse+0xa0>
    3f00:	88 23       	and	r24, r24
    3f02:	4a f0       	brmi	.+18     	; 0x3f16 <__mulsf3_pse+0x7a>
    3f04:	ee 0f       	add	r30, r30
    3f06:	ff 1f       	adc	r31, r31
    3f08:	bb 1f       	adc	r27, r27
    3f0a:	66 1f       	adc	r22, r22
    3f0c:	77 1f       	adc	r23, r23
    3f0e:	88 1f       	adc	r24, r24
    3f10:	91 50       	subi	r25, 0x01	; 1
    3f12:	50 40       	sbci	r21, 0x00	; 0
    3f14:	a9 f7       	brne	.-22     	; 0x3f00 <__mulsf3_pse+0x64>
    3f16:	9e 3f       	cpi	r25, 0xFE	; 254
    3f18:	51 05       	cpc	r21, r1
    3f1a:	80 f0       	brcs	.+32     	; 0x3f3c <__mulsf3_pse+0xa0>
    3f1c:	0c 94 a5 1f 	jmp	0x3f4a	; 0x3f4a <__fp_inf>
    3f20:	0c 94 32 1f 	jmp	0x3e64	; 0x3e64 <__fp_szero>
    3f24:	5f 3f       	cpi	r21, 0xFF	; 255
    3f26:	e4 f3       	brlt	.-8      	; 0x3f20 <__mulsf3_pse+0x84>
    3f28:	98 3e       	cpi	r25, 0xE8	; 232
    3f2a:	d4 f3       	brlt	.-12     	; 0x3f20 <__mulsf3_pse+0x84>
    3f2c:	86 95       	lsr	r24
    3f2e:	77 95       	ror	r23
    3f30:	67 95       	ror	r22
    3f32:	b7 95       	ror	r27
    3f34:	f7 95       	ror	r31
    3f36:	e7 95       	ror	r30
    3f38:	9f 5f       	subi	r25, 0xFF	; 255
    3f3a:	c1 f7       	brne	.-16     	; 0x3f2c <__mulsf3_pse+0x90>
    3f3c:	fe 2b       	or	r31, r30
    3f3e:	88 0f       	add	r24, r24
    3f40:	91 1d       	adc	r25, r1
    3f42:	96 95       	lsr	r25
    3f44:	87 95       	ror	r24
    3f46:	97 f9       	bld	r25, 7
    3f48:	08 95       	ret

00003f4a <__fp_inf>:
    3f4a:	97 f9       	bld	r25, 7
    3f4c:	9f 67       	ori	r25, 0x7F	; 127
    3f4e:	80 e8       	ldi	r24, 0x80	; 128
    3f50:	70 e0       	ldi	r23, 0x00	; 0
    3f52:	60 e0       	ldi	r22, 0x00	; 0
    3f54:	08 95       	ret

00003f56 <__fp_nan>:
    3f56:	9f ef       	ldi	r25, 0xFF	; 255
    3f58:	80 ec       	ldi	r24, 0xC0	; 192
    3f5a:	08 95       	ret

00003f5c <__fp_pscA>:
    3f5c:	00 24       	eor	r0, r0
    3f5e:	0a 94       	dec	r0
    3f60:	16 16       	cp	r1, r22
    3f62:	17 06       	cpc	r1, r23
    3f64:	18 06       	cpc	r1, r24
    3f66:	09 06       	cpc	r0, r25
    3f68:	08 95       	ret

00003f6a <__fp_pscB>:
    3f6a:	00 24       	eor	r0, r0
    3f6c:	0a 94       	dec	r0
    3f6e:	12 16       	cp	r1, r18
    3f70:	13 06       	cpc	r1, r19
    3f72:	14 06       	cpc	r1, r20
    3f74:	05 06       	cpc	r0, r21
    3f76:	08 95       	ret

00003f78 <__fp_round>:
    3f78:	09 2e       	mov	r0, r25
    3f7a:	03 94       	inc	r0
    3f7c:	00 0c       	add	r0, r0
    3f7e:	11 f4       	brne	.+4      	; 0x3f84 <__fp_round+0xc>
    3f80:	88 23       	and	r24, r24
    3f82:	52 f0       	brmi	.+20     	; 0x3f98 <__fp_round+0x20>
    3f84:	bb 0f       	add	r27, r27
    3f86:	40 f4       	brcc	.+16     	; 0x3f98 <__fp_round+0x20>
    3f88:	bf 2b       	or	r27, r31
    3f8a:	11 f4       	brne	.+4      	; 0x3f90 <__fp_round+0x18>
    3f8c:	60 ff       	sbrs	r22, 0
    3f8e:	04 c0       	rjmp	.+8      	; 0x3f98 <__fp_round+0x20>
    3f90:	6f 5f       	subi	r22, 0xFF	; 255
    3f92:	7f 4f       	sbci	r23, 0xFF	; 255
    3f94:	8f 4f       	sbci	r24, 0xFF	; 255
    3f96:	9f 4f       	sbci	r25, 0xFF	; 255
    3f98:	08 95       	ret

00003f9a <__divmodhi4>:
    3f9a:	97 fb       	bst	r25, 7
    3f9c:	07 2e       	mov	r0, r23
    3f9e:	16 f4       	brtc	.+4      	; 0x3fa4 <__divmodhi4+0xa>
    3fa0:	00 94       	com	r0
    3fa2:	07 d0       	rcall	.+14     	; 0x3fb2 <__divmodhi4_neg1>
    3fa4:	77 fd       	sbrc	r23, 7
    3fa6:	09 d0       	rcall	.+18     	; 0x3fba <__divmodhi4_neg2>
    3fa8:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__udivmodhi4>
    3fac:	07 fc       	sbrc	r0, 7
    3fae:	05 d0       	rcall	.+10     	; 0x3fba <__divmodhi4_neg2>
    3fb0:	3e f4       	brtc	.+14     	; 0x3fc0 <__divmodhi4_exit>

00003fb2 <__divmodhi4_neg1>:
    3fb2:	90 95       	com	r25
    3fb4:	81 95       	neg	r24
    3fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb8:	08 95       	ret

00003fba <__divmodhi4_neg2>:
    3fba:	70 95       	com	r23
    3fbc:	61 95       	neg	r22
    3fbe:	7f 4f       	sbci	r23, 0xFF	; 255

00003fc0 <__divmodhi4_exit>:
    3fc0:	08 95       	ret

00003fc2 <__tablejump2__>:
    3fc2:	ee 0f       	add	r30, r30
    3fc4:	ff 1f       	adc	r31, r31
    3fc6:	05 90       	lpm	r0, Z+
    3fc8:	f4 91       	lpm	r31, Z
    3fca:	e0 2d       	mov	r30, r0
    3fcc:	09 94       	ijmp

00003fce <__umulhisi3>:
    3fce:	a2 9f       	mul	r26, r18
    3fd0:	b0 01       	movw	r22, r0
    3fd2:	b3 9f       	mul	r27, r19
    3fd4:	c0 01       	movw	r24, r0
    3fd6:	a3 9f       	mul	r26, r19
    3fd8:	70 0d       	add	r23, r0
    3fda:	81 1d       	adc	r24, r1
    3fdc:	11 24       	eor	r1, r1
    3fde:	91 1d       	adc	r25, r1
    3fe0:	b2 9f       	mul	r27, r18
    3fe2:	70 0d       	add	r23, r0
    3fe4:	81 1d       	adc	r24, r1
    3fe6:	11 24       	eor	r1, r1
    3fe8:	91 1d       	adc	r25, r1
    3fea:	08 95       	ret

00003fec <__udivmodhi4>:
    3fec:	aa 1b       	sub	r26, r26
    3fee:	bb 1b       	sub	r27, r27
    3ff0:	51 e1       	ldi	r21, 0x11	; 17
    3ff2:	07 c0       	rjmp	.+14     	; 0x4002 <__udivmodhi4_ep>

00003ff4 <__udivmodhi4_loop>:
    3ff4:	aa 1f       	adc	r26, r26
    3ff6:	bb 1f       	adc	r27, r27
    3ff8:	a6 17       	cp	r26, r22
    3ffa:	b7 07       	cpc	r27, r23
    3ffc:	10 f0       	brcs	.+4      	; 0x4002 <__udivmodhi4_ep>
    3ffe:	a6 1b       	sub	r26, r22
    4000:	b7 0b       	sbc	r27, r23

00004002 <__udivmodhi4_ep>:
    4002:	88 1f       	adc	r24, r24
    4004:	99 1f       	adc	r25, r25
    4006:	5a 95       	dec	r21
    4008:	a9 f7       	brne	.-22     	; 0x3ff4 <__udivmodhi4_loop>
    400a:	80 95       	com	r24
    400c:	90 95       	com	r25
    400e:	bc 01       	movw	r22, r24
    4010:	cd 01       	movw	r24, r26
    4012:	08 95       	ret

00004014 <_exit>:
    4014:	f8 94       	cli

00004016 <__stop_program>:
    4016:	ff cf       	rjmp	.-2      	; 0x4016 <__stop_program>
