
CatchTheLightPrototypeV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  00002d90  00002e24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000060  00800186  00800186  00002eaa  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00002eaa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00002f50  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002817  00000000  00000000  00003188  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001048  00000000  00000000  0000599f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bab  00000000  00000000  000069e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000046c  00000000  00000000  00008594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001987  00000000  00000000  00008a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000162c  00000000  00000000  0000a387  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  0000b9b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__ctors_end>
       4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      10:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      14:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      18:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      1c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      20:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      24:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      28:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      2c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      30:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      34:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_14>
      3c:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__vector_15>
      40:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      44:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      48:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      4c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      50:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      54:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      58:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      5c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      60:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      64:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      68:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      6c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      70:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      74:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      78:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      7c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      80:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      84:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      88:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      8c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      90:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      94:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__vector_37>
      98:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      9c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      a0:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      a4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      a8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      ac:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      b0:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      b4:	66 07       	cpc	r22, r22
      b6:	6a 07       	cpc	r22, r26
      b8:	6e 07       	cpc	r22, r30
      ba:	72 07       	cpc	r23, r18
      bc:	76 07       	cpc	r23, r22
      be:	7a 07       	cpc	r23, r26
      c0:	7e 07       	cpc	r23, r30
      c2:	82 07       	cpc	r24, r18
      c4:	86 07       	cpc	r24, r22
      c6:	ab 07       	cpc	r26, r27
      c8:	af 07       	cpc	r26, r31
      ca:	b3 07       	cpc	r27, r19
      cc:	b7 07       	cpc	r27, r23
      ce:	bb 07       	cpc	r27, r27
      d0:	bf 07       	cpc	r27, r31
      d2:	c3 07       	cpc	r28, r19
      d4:	c7 07       	cpc	r28, r23
      d6:	cb 07       	cpc	r28, r27
      d8:	cf 07       	cpc	r28, r31
      da:	f0 07       	cpc	r31, r16
      dc:	f4 07       	cpc	r31, r20
      de:	f8 07       	cpc	r31, r24
      e0:	fc 07       	cpc	r31, r28
      e2:	00 08       	sbc	r0, r0
      e4:	04 08       	sbc	r0, r4
      e6:	08 08       	sbc	r0, r8
      e8:	0c 08       	sbc	r0, r12
      ea:	10 08       	sbc	r1, r0
      ec:	14 08       	sbc	r1, r4
      ee:	2f 09       	sbc	r18, r15
      f0:	3d 09       	sbc	r19, r13
      f2:	51 09       	sbc	r21, r1
      f4:	54 09       	sbc	r21, r4
      f6:	57 09       	sbc	r21, r7
      f8:	5a 09       	sbc	r21, r10
      fa:	5d 09       	sbc	r21, r13
      fc:	60 09       	sbc	r22, r0
      fe:	63 09       	sbc	r22, r3
     100:	66 09       	sbc	r22, r6
     102:	69 09       	sbc	r22, r9
     104:	6c 09       	sbc	r22, r12
     106:	6f 09       	sbc	r22, r15
     108:	72 09       	sbc	r23, r2
     10a:	80 09       	sbc	r24, r0

0000010c <__ctors_end>:
     10c:	11 24       	eor	r1, r1
     10e:	1f be       	out	0x3f, r1	; 63
     110:	cf ef       	ldi	r28, 0xFF	; 255
     112:	d8 e0       	ldi	r29, 0x08	; 8
     114:	de bf       	out	0x3e, r29	; 62
     116:	cd bf       	out	0x3d, r28	; 61

00000118 <__do_copy_data>:
     118:	11 e0       	ldi	r17, 0x01	; 1
     11a:	a0 e0       	ldi	r26, 0x00	; 0
     11c:	b1 e0       	ldi	r27, 0x01	; 1
     11e:	e0 e9       	ldi	r30, 0x90	; 144
     120:	fd e2       	ldi	r31, 0x2D	; 45
     122:	02 c0       	rjmp	.+4      	; 0x128 <__do_copy_data+0x10>
     124:	05 90       	lpm	r0, Z+
     126:	0d 92       	st	X+, r0
     128:	a6 38       	cpi	r26, 0x86	; 134
     12a:	b1 07       	cpc	r27, r17
     12c:	d9 f7       	brne	.-10     	; 0x124 <__do_copy_data+0xc>

0000012e <__do_clear_bss>:
     12e:	21 e0       	ldi	r18, 0x01	; 1
     130:	a6 e8       	ldi	r26, 0x86	; 134
     132:	b1 e0       	ldi	r27, 0x01	; 1
     134:	01 c0       	rjmp	.+2      	; 0x138 <.do_clear_bss_start>

00000136 <.do_clear_bss_loop>:
     136:	1d 92       	st	X+, r1

00000138 <.do_clear_bss_start>:
     138:	a6 3e       	cpi	r26, 0xE6	; 230
     13a:	b2 07       	cpc	r27, r18
     13c:	e1 f7       	brne	.-8      	; 0x136 <.do_clear_bss_loop>
     13e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <main>
     142:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <_exit>

00000146 <__bad_interrupt>:
     146:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014a <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     14a:	0e 94 90 0a 	call	0x1520	; 0x1520 <system_init>

	touch_init();
     14e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <touch_init>
     152:	08 95       	ret

00000154 <__vector_14>:

#include <driver_init.h>
#include <compiler.h>

ISR(TIMER0_COMPA_vect)
{
     154:	1f 92       	push	r1
     156:	0f 92       	push	r0
     158:	0f b6       	in	r0, 0x3f	; 63
     15a:	0f 92       	push	r0
     15c:	11 24       	eor	r1, r1
     15e:	2f 93       	push	r18
     160:	3f 93       	push	r19
     162:	4f 93       	push	r20
     164:	5f 93       	push	r21
     166:	6f 93       	push	r22
     168:	7f 93       	push	r23
     16a:	8f 93       	push	r24
     16c:	9f 93       	push	r25
     16e:	af 93       	push	r26
     170:	bf 93       	push	r27
     172:	ef 93       	push	r30
     174:	ff 93       	push	r31

	mega_touch_timer();
     176:	0e 94 46 0a 	call	0x148c	; 0x148c <mega_touch_timer>

	/* Clear the timer flag */
	TIFR0 |= OCF0A;
     17a:	a8 9a       	sbi	0x15, 0	; 21
}
     17c:	ff 91       	pop	r31
     17e:	ef 91       	pop	r30
     180:	bf 91       	pop	r27
     182:	af 91       	pop	r26
     184:	9f 91       	pop	r25
     186:	8f 91       	pop	r24
     188:	7f 91       	pop	r23
     18a:	6f 91       	pop	r22
     18c:	5f 91       	pop	r21
     18e:	4f 91       	pop	r20
     190:	3f 91       	pop	r19
     192:	2f 91       	pop	r18
     194:	0f 90       	pop	r0
     196:	0f be       	out	0x3f, r0	; 63
     198:	0f 90       	pop	r0
     19a:	1f 90       	pop	r1
     19c:	18 95       	reti

0000019e <ledIntEnable>:
	TIMSK0 |= (0b1<<OCIE0B);	//Enable Timer 0 INT B
}

void ledIntDisable(void)
{
	TIMSK0 &= ~(0b1<<OCIE0B);	//Disable Timer 0 INT B
     19e:	ee e6       	ldi	r30, 0x6E	; 110
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	80 81       	ld	r24, Z
     1a4:	84 60       	ori	r24, 0x04	; 4
     1a6:	80 83       	st	Z, r24
     1a8:	08 95       	ret

000001aa <init>:
}

void init(void)
{
	DDRD |= DMASK;
     1aa:	8a b1       	in	r24, 0x0a	; 10
     1ac:	8f ef       	ldi	r24, 0xFF	; 255
     1ae:	8a b9       	out	0x0a, r24	; 10
	DDRB |= BMASK;
     1b0:	94 b1       	in	r25, 0x04	; 4
     1b2:	84 b9       	out	0x04, r24	; 4
	DDRC |= CMASK;
     1b4:	97 b1       	in	r25, 0x07	; 7
     1b6:	9f 63       	ori	r25, 0x3F	; 63
     1b8:	97 b9       	out	0x07, r25	; 7
	DDRE |= EMASK;
     1ba:	9d b1       	in	r25, 0x0d	; 13
     1bc:	97 60       	ori	r25, 0x07	; 7
     1be:	9d b9       	out	0x0d, r25	; 13
	
	PORTD |= DMASK;
     1c0:	9b b1       	in	r25, 0x0b	; 11
     1c2:	8b b9       	out	0x0b, r24	; 11
	PORTB |= BMASK;
     1c4:	95 b1       	in	r25, 0x05	; 5
     1c6:	85 b9       	out	0x05, r24	; 5
	PORTC |= CMASK;
     1c8:	88 b1       	in	r24, 0x08	; 8
     1ca:	8f 63       	ori	r24, 0x3F	; 63
     1cc:	88 b9       	out	0x08, r24	; 8
	PORTE |= EMASK;
     1ce:	8e b1       	in	r24, 0x0e	; 14
     1d0:	87 60       	ori	r24, 0x07	; 7
     1d2:	8e b9       	out	0x0e, r24	; 14
	
	curLed = 0;
     1d4:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <curLed>
	score = 0;
     1d8:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <score>
	ledMode = NORMALMODE;
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
     1e2:	08 95       	ret

000001e4 <ClearLed>:
}

void ClearLed(void)
{
		PORTD |= DMASK;
     1e4:	8b b1       	in	r24, 0x0b	; 11
     1e6:	8f ef       	ldi	r24, 0xFF	; 255
     1e8:	8b b9       	out	0x0b, r24	; 11
		PORTB |= BMASK;
     1ea:	95 b1       	in	r25, 0x05	; 5
     1ec:	85 b9       	out	0x05, r24	; 5
		PORTC |= CMASK;
     1ee:	88 b1       	in	r24, 0x08	; 8
     1f0:	8f 63       	ori	r24, 0x3F	; 63
     1f2:	88 b9       	out	0x08, r24	; 8
		PORTE |= EMASK;
     1f4:	8e b1       	in	r24, 0x0e	; 14
     1f6:	87 60       	ori	r24, 0x07	; 7
     1f8:	8e b9       	out	0x0e, r24	; 14
     1fa:	08 95       	ret

000001fc <NextLed>:
}

void NextLed(void)
{	
	if(6 > curLed)
     1fc:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     200:	86 30       	cpi	r24, 0x06	; 6
     202:	68 f4       	brcc	.+26     	; 0x21e <NextLed+0x22>
	{
		PORTB = BMASK;
     204:	9f ef       	ldi	r25, 0xFF	; 255
     206:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     208:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	e1 59       	subi	r30, 0x91	; 145
     210:	fe 4f       	sbci	r31, 0xFE	; 254
     212:	80 81       	ld	r24, Z
     214:	8f 73       	andi	r24, 0x3F	; 63
     216:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     218:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     21a:	87 e0       	ldi	r24, 0x07	; 7
     21c:	8e b9       	out	0x0e, r24	; 14
	}
	if( (9 > curLed) && (6 <= curLed))	// 8 + 6
     21e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     222:	86 50       	subi	r24, 0x06	; 6
     224:	83 30       	cpi	r24, 0x03	; 3
     226:	68 f4       	brcc	.+26     	; 0x242 <NextLed+0x46>
	{
		PORTB = BMASK;
     228:	8f ef       	ldi	r24, 0xFF	; 255
     22a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     22c:	9f e3       	ldi	r25, 0x3F	; 63
     22e:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     230:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     232:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	e7 5a       	subi	r30, 0xA7	; 167
     23a:	fe 4f       	sbci	r31, 0xFE	; 254
     23c:	80 81       	ld	r24, Z
     23e:	87 70       	andi	r24, 0x07	; 7
     240:	8e b9       	out	0x0e, r24	; 14
	}
	if( (17 > curLed) && (9 <= curLed))
     242:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     246:	89 50       	subi	r24, 0x09	; 9
     248:	88 30       	cpi	r24, 0x08	; 8
     24a:	68 f4       	brcc	.+26     	; 0x266 <NextLed+0x6a>
	{
		PORTB = BMASK;
     24c:	8f ef       	ldi	r24, 0xFF	; 255
     24e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     250:	8f e3       	ldi	r24, 0x3F	; 63
     252:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     254:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	e2 5a       	subi	r30, 0xA2	; 162
     25c:	fe 4f       	sbci	r31, 0xFE	; 254
     25e:	80 81       	ld	r24, Z
     260:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     262:	87 e0       	ldi	r24, 0x07	; 7
     264:	8e b9       	out	0x0e, r24	; 14
	}
	if( (25 > curLed) && (17 <= curLed))
     266:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     26a:	8f ee       	ldi	r24, 0xEF	; 239
     26c:	8e 0f       	add	r24, r30
     26e:	88 30       	cpi	r24, 0x08	; 8
     270:	58 f4       	brcc	.+22     	; 0x288 <NextLed+0x8c>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	ea 59       	subi	r30, 0x9A	; 154
     276:	fe 4f       	sbci	r31, 0xFE	; 254
     278:	80 81       	ld	r24, Z
     27a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     27c:	8f e3       	ldi	r24, 0x3F	; 63
     27e:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     280:	8f ef       	ldi	r24, 0xFF	; 255
     282:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;		
     284:	87 e0       	ldi	r24, 0x07	; 7
     286:	8e b9       	out	0x0e, r24	; 14
	}
	curLed = ((curLed + 1)%22);
     288:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	01 96       	adiw	r24, 0x01	; 1
     290:	e6 e1       	ldi	r30, 0x16	; 22
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	bf 01       	movw	r22, r30
     296:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__divmodhi4>
     29a:	9c 01       	movw	r18, r24
     29c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <curLed>
	if(curLed == ((curLedWhenPressed+2)%22))
     2a0:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <curLedWhenPressed>
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	02 96       	adiw	r24, 0x02	; 2
     2a8:	bf 01       	movw	r22, r30
     2aa:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__divmodhi4>
     2ae:	33 27       	eor	r19, r19
     2b0:	82 17       	cp	r24, r18
     2b2:	93 07       	cpc	r25, r19
     2b4:	11 f4       	brne	.+4      	; 0x2ba <NextLed+0xbe>
	{
		loopFlag = 0;
     2b6:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <loopFlag>
     2ba:	08 95       	ret

000002bc <Next0>:
//	E: D15-D18
//	F: D19-D22
//	G: D23-D25
void Next0(void)	//A B C D E F
{
	if(3 > curLed)		//A
     2bc:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     2c0:	83 30       	cpi	r24, 0x03	; 3
     2c2:	68 f4       	brcc	.+26     	; 0x2de <Next0+0x22>
	{
		PORTB = BMASK;
     2c4:	9f ef       	ldi	r25, 0xFF	; 255
     2c6:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     2c8:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	e1 59       	subi	r30, 0x91	; 145
     2d0:	fe 4f       	sbci	r31, 0xFE	; 254
     2d2:	80 81       	ld	r24, Z
     2d4:	8f 73       	andi	r24, 0x3F	; 63
     2d6:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     2d8:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     2da:	87 e0       	ldi	r24, 0x07	; 7
     2dc:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
     2de:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     2e2:	83 50       	subi	r24, 0x03	; 3
     2e4:	83 30       	cpi	r24, 0x03	; 3
     2e6:	68 f4       	brcc	.+26     	; 0x302 <Next0+0x46>
	{
		PORTB = BMASK;
     2e8:	9f ef       	ldi	r25, 0xFF	; 255
     2ea:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     2ec:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	e1 59       	subi	r30, 0x91	; 145
     2f4:	fe 4f       	sbci	r31, 0xFE	; 254
     2f6:	80 81       	ld	r24, Z
     2f8:	8f 73       	andi	r24, 0x3F	; 63
     2fa:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     2fc:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     2fe:	87 e0       	ldi	r24, 0x07	; 7
     300:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     302:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     306:	86 30       	cpi	r24, 0x06	; 6
     308:	69 f4       	brne	.+26     	; 0x324 <Next0+0x68>
	{
		PORTB = BMASK;
     30a:	8f ef       	ldi	r24, 0xFF	; 255
     30c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     30e:	9f e3       	ldi	r25, 0x3F	; 63
     310:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     312:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     314:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	e7 5a       	subi	r30, 0xA7	; 167
     31c:	fe 4f       	sbci	r31, 0xFE	; 254
     31e:	80 81       	ld	r24, Z
     320:	87 70       	andi	r24, 0x07	; 7
     322:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     324:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     328:	87 50       	subi	r24, 0x07	; 7
     32a:	82 30       	cpi	r24, 0x02	; 2
     32c:	68 f4       	brcc	.+26     	; 0x348 <Next0+0x8c>
	{
		PORTB = BMASK;
     32e:	8f ef       	ldi	r24, 0xFF	; 255
     330:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     332:	9f e3       	ldi	r25, 0x3F	; 63
     334:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     336:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     338:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	e7 5a       	subi	r30, 0xA7	; 167
     340:	fe 4f       	sbci	r31, 0xFE	; 254
     342:	80 81       	ld	r24, Z
     344:	87 70       	andi	r24, 0x07	; 7
     346:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     348:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     34c:	89 50       	subi	r24, 0x09	; 9
     34e:	82 30       	cpi	r24, 0x02	; 2
     350:	68 f4       	brcc	.+26     	; 0x36c <Next0+0xb0>
	{
		PORTB = BMASK;
     352:	8f ef       	ldi	r24, 0xFF	; 255
     354:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     356:	8f e3       	ldi	r24, 0x3F	; 63
     358:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     35a:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	e2 5a       	subi	r30, 0xA2	; 162
     362:	fe 4f       	sbci	r31, 0xFE	; 254
     364:	80 81       	ld	r24, Z
     366:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     368:	87 e0       	ldi	r24, 0x07	; 7
     36a:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
     36c:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     370:	8b 50       	subi	r24, 0x0B	; 11
     372:	83 30       	cpi	r24, 0x03	; 3
     374:	68 f4       	brcc	.+26     	; 0x390 <Next0+0xd4>
	{
		PORTB = BMASK;
     376:	8f ef       	ldi	r24, 0xFF	; 255
     378:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     37a:	8f e3       	ldi	r24, 0x3F	; 63
     37c:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     37e:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	e2 5a       	subi	r30, 0xA2	; 162
     386:	fe 4f       	sbci	r31, 0xFE	; 254
     388:	80 81       	ld	r24, Z
     38a:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     38c:	87 e0       	ldi	r24, 0x07	; 7
     38e:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (17 > curLed) && (14 <= curLed))	//E
     390:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     394:	8e 50       	subi	r24, 0x0E	; 14
     396:	83 30       	cpi	r24, 0x03	; 3
     398:	68 f4       	brcc	.+26     	; 0x3b4 <Next0+0xf8>
	{
		PORTB = BMASK;
     39a:	8f ef       	ldi	r24, 0xFF	; 255
     39c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     39e:	8f e3       	ldi	r24, 0x3F	; 63
     3a0:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     3a2:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	e2 5a       	subi	r30, 0xA2	; 162
     3aa:	fe 4f       	sbci	r31, 0xFE	; 254
     3ac:	80 81       	ld	r24, Z
     3ae:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     3b0:	87 e0       	ldi	r24, 0x07	; 7
     3b2:	8e b9       	out	0x0e, r24	; 14
	}
	if( (18 > curLed) && (17 <= curLed))	//E
     3b4:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     3b8:	81 31       	cpi	r24, 0x11	; 17
     3ba:	41 f4       	brne	.+16     	; 0x3cc <Next0+0x110>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     3bc:	8e ef       	ldi	r24, 0xFE	; 254
     3be:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     3c0:	8f e3       	ldi	r24, 0x3F	; 63
     3c2:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     3c4:	8f ef       	ldi	r24, 0xFF	; 255
     3c6:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     3c8:	87 e0       	ldi	r24, 0x07	; 7
     3ca:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
     3cc:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     3d0:	8e ee       	ldi	r24, 0xEE	; 238
     3d2:	8e 0f       	add	r24, r30
     3d4:	84 30       	cpi	r24, 0x04	; 4
     3d6:	58 f4       	brcc	.+22     	; 0x3ee <Next0+0x132>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	ea 59       	subi	r30, 0x9A	; 154
     3dc:	fe 4f       	sbci	r31, 0xFE	; 254
     3de:	80 81       	ld	r24, Z
     3e0:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     3e2:	8f e3       	ldi	r24, 0x3F	; 63
     3e4:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     3e6:	8f ef       	ldi	r24, 0xFF	; 255
     3e8:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     3ea:	87 e0       	ldi	r24, 0x07	; 7
     3ec:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     3ee:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	69 e1       	ldi	r22, 0x19	; 25
     3f8:	70 e0       	ldi	r23, 0x00	; 0
     3fa:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__divmodhi4>
     3fe:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <curLed>
     402:	08 95       	ret

00000404 <Next1>:
}

void Next1(void)	//B C
{
	
	if((6 > curLed)&&(3 <= curLed))	//B
     404:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     408:	83 50       	subi	r24, 0x03	; 3
     40a:	83 30       	cpi	r24, 0x03	; 3
     40c:	68 f4       	brcc	.+26     	; 0x428 <Next1+0x24>
	{
		PORTB = BMASK;
     40e:	9f ef       	ldi	r25, 0xFF	; 255
     410:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     412:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	e1 59       	subi	r30, 0x91	; 145
     41a:	fe 4f       	sbci	r31, 0xFE	; 254
     41c:	80 81       	ld	r24, Z
     41e:	8f 73       	andi	r24, 0x3F	; 63
     420:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     422:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     424:	87 e0       	ldi	r24, 0x07	; 7
     426:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     428:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     42c:	86 30       	cpi	r24, 0x06	; 6
     42e:	69 f4       	brne	.+26     	; 0x44a <Next1+0x46>
	{
		PORTB = BMASK;
     430:	8f ef       	ldi	r24, 0xFF	; 255
     432:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     434:	9f e3       	ldi	r25, 0x3F	; 63
     436:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     438:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     43a:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	e7 5a       	subi	r30, 0xA7	; 167
     442:	fe 4f       	sbci	r31, 0xFE	; 254
     444:	80 81       	ld	r24, Z
     446:	87 70       	andi	r24, 0x07	; 7
     448:	8e b9       	out	0x0e, r24	; 14
	}
	if((9> curLed)&&(7 <= curLed)) //C
     44a:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     44e:	87 50       	subi	r24, 0x07	; 7
     450:	82 30       	cpi	r24, 0x02	; 2
     452:	68 f4       	brcc	.+26     	; 0x46e <Next1+0x6a>
	{
		PORTB = BMASK;
     454:	8f ef       	ldi	r24, 0xFF	; 255
     456:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     458:	9f e3       	ldi	r25, 0x3F	; 63
     45a:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     45c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     45e:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	e7 5a       	subi	r30, 0xA7	; 167
     466:	fe 4f       	sbci	r31, 0xFE	; 254
     468:	80 81       	ld	r24, Z
     46a:	87 70       	andi	r24, 0x07	; 7
     46c:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     46e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     472:	89 50       	subi	r24, 0x09	; 9
     474:	82 30       	cpi	r24, 0x02	; 2
     476:	68 f4       	brcc	.+26     	; 0x492 <Next1+0x8e>
	{
		PORTB = BMASK;
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     47c:	8f e3       	ldi	r24, 0x3F	; 63
     47e:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     480:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	e2 5a       	subi	r30, 0xA2	; 162
     488:	fe 4f       	sbci	r31, 0xFE	; 254
     48a:	80 81       	ld	r24, Z
     48c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     48e:	87 e0       	ldi	r24, 0x07	; 7
     490:	8e b9       	out	0x0e, r24	; 14
	}
	
	
	
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     492:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	69 e1       	ldi	r22, 0x19	; 25
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__divmodhi4>
     4a2:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <curLed>
     4a6:	08 95       	ret

000004a8 <Next2>:
}

void Next2(void)	//A B D E G
{
	if(3 > curLed)		//A
     4a8:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     4ac:	83 30       	cpi	r24, 0x03	; 3
     4ae:	68 f4       	brcc	.+26     	; 0x4ca <Next2+0x22>
	{
		PORTB = BMASK;
     4b0:	9f ef       	ldi	r25, 0xFF	; 255
     4b2:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     4b4:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	e1 59       	subi	r30, 0x91	; 145
     4bc:	fe 4f       	sbci	r31, 0xFE	; 254
     4be:	80 81       	ld	r24, Z
     4c0:	8f 73       	andi	r24, 0x3F	; 63
     4c2:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     4c4:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     4c6:	87 e0       	ldi	r24, 0x07	; 7
     4c8:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
     4ca:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     4ce:	83 50       	subi	r24, 0x03	; 3
     4d0:	83 30       	cpi	r24, 0x03	; 3
     4d2:	68 f4       	brcc	.+26     	; 0x4ee <Next2+0x46>
	{
		PORTB = BMASK;
     4d4:	9f ef       	ldi	r25, 0xFF	; 255
     4d6:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     4d8:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	e1 59       	subi	r30, 0x91	; 145
     4e0:	fe 4f       	sbci	r31, 0xFE	; 254
     4e2:	80 81       	ld	r24, Z
     4e4:	8f 73       	andi	r24, 0x3F	; 63
     4e6:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     4e8:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     4ea:	87 e0       	ldi	r24, 0x07	; 7
     4ec:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     4ee:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     4f2:	86 30       	cpi	r24, 0x06	; 6
     4f4:	69 f4       	brne	.+26     	; 0x510 <Next2+0x68>
	{
		PORTB = BMASK;
     4f6:	8f ef       	ldi	r24, 0xFF	; 255
     4f8:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     4fa:	9f e3       	ldi	r25, 0x3F	; 63
     4fc:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     4fe:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     500:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	e7 5a       	subi	r30, 0xA7	; 167
     508:	fe 4f       	sbci	r31, 0xFE	; 254
     50a:	80 81       	ld	r24, Z
     50c:	87 70       	andi	r24, 0x07	; 7
     50e:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
     510:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     514:	8b 50       	subi	r24, 0x0B	; 11
     516:	83 30       	cpi	r24, 0x03	; 3
     518:	68 f4       	brcc	.+26     	; 0x534 <Next2+0x8c>
	{
		PORTB = BMASK;
     51a:	8f ef       	ldi	r24, 0xFF	; 255
     51c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     51e:	8f e3       	ldi	r24, 0x3F	; 63
     520:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     522:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	e2 5a       	subi	r30, 0xA2	; 162
     52a:	fe 4f       	sbci	r31, 0xFE	; 254
     52c:	80 81       	ld	r24, Z
     52e:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     530:	87 e0       	ldi	r24, 0x07	; 7
     532:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (17 > curLed) && (14 <= curLed))	//E
     534:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     538:	8e 50       	subi	r24, 0x0E	; 14
     53a:	83 30       	cpi	r24, 0x03	; 3
     53c:	68 f4       	brcc	.+26     	; 0x558 <Next2+0xb0>
	{
		PORTB = BMASK;
     53e:	8f ef       	ldi	r24, 0xFF	; 255
     540:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     542:	8f e3       	ldi	r24, 0x3F	; 63
     544:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     546:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	e2 5a       	subi	r30, 0xA2	; 162
     54e:	fe 4f       	sbci	r31, 0xFE	; 254
     550:	80 81       	ld	r24, Z
     552:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     554:	87 e0       	ldi	r24, 0x07	; 7
     556:	8e b9       	out	0x0e, r24	; 14
	}
	if( (18 > curLed) && (17 <= curLed))	//E
     558:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     55c:	81 31       	cpi	r24, 0x11	; 17
     55e:	41 f4       	brne	.+16     	; 0x570 <Next2+0xc8>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     560:	8e ef       	ldi	r24, 0xFE	; 254
     562:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     564:	8f e3       	ldi	r24, 0x3F	; 63
     566:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     568:	8f ef       	ldi	r24, 0xFF	; 255
     56a:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     56c:	87 e0       	ldi	r24, 0x07	; 7
     56e:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
     570:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     574:	8a ee       	ldi	r24, 0xEA	; 234
     576:	8e 0f       	add	r24, r30
     578:	83 30       	cpi	r24, 0x03	; 3
     57a:	58 f4       	brcc	.+22     	; 0x592 <Next2+0xea>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	ea 59       	subi	r30, 0x9A	; 154
     580:	fe 4f       	sbci	r31, 0xFE	; 254
     582:	80 81       	ld	r24, Z
     584:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     586:	8f e3       	ldi	r24, 0x3F	; 63
     588:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     58a:	8f ef       	ldi	r24, 0xFF	; 255
     58c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     58e:	87 e0       	ldi	r24, 0x07	; 7
     590:	8e b9       	out	0x0e, r24	; 14
	}
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     592:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	01 96       	adiw	r24, 0x01	; 1
     59a:	69 e1       	ldi	r22, 0x19	; 25
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__divmodhi4>
     5a2:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <curLed>
     5a6:	08 95       	ret

000005a8 <Next3>:
}

void Next3(void)	//A B C D G
{
	if(3 > curLed)		//A
     5a8:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     5ac:	83 30       	cpi	r24, 0x03	; 3
     5ae:	68 f4       	brcc	.+26     	; 0x5ca <Next3+0x22>
	{
		PORTB = BMASK;
     5b0:	9f ef       	ldi	r25, 0xFF	; 255
     5b2:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     5b4:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	e1 59       	subi	r30, 0x91	; 145
     5bc:	fe 4f       	sbci	r31, 0xFE	; 254
     5be:	80 81       	ld	r24, Z
     5c0:	8f 73       	andi	r24, 0x3F	; 63
     5c2:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     5c4:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     5c6:	87 e0       	ldi	r24, 0x07	; 7
     5c8:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
     5ca:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     5ce:	83 50       	subi	r24, 0x03	; 3
     5d0:	83 30       	cpi	r24, 0x03	; 3
     5d2:	68 f4       	brcc	.+26     	; 0x5ee <Next3+0x46>
	{
		PORTB = BMASK;
     5d4:	9f ef       	ldi	r25, 0xFF	; 255
     5d6:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     5d8:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	e1 59       	subi	r30, 0x91	; 145
     5e0:	fe 4f       	sbci	r31, 0xFE	; 254
     5e2:	80 81       	ld	r24, Z
     5e4:	8f 73       	andi	r24, 0x3F	; 63
     5e6:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     5e8:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     5ea:	87 e0       	ldi	r24, 0x07	; 7
     5ec:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     5ee:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     5f2:	86 30       	cpi	r24, 0x06	; 6
     5f4:	69 f4       	brne	.+26     	; 0x610 <Next3+0x68>
	{
		PORTB = BMASK;
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     5fa:	9f e3       	ldi	r25, 0x3F	; 63
     5fc:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     5fe:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     600:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	e7 5a       	subi	r30, 0xA7	; 167
     608:	fe 4f       	sbci	r31, 0xFE	; 254
     60a:	80 81       	ld	r24, Z
     60c:	87 70       	andi	r24, 0x07	; 7
     60e:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     610:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     614:	87 50       	subi	r24, 0x07	; 7
     616:	82 30       	cpi	r24, 0x02	; 2
     618:	68 f4       	brcc	.+26     	; 0x634 <Next3+0x8c>
	{
		PORTB = BMASK;
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     61e:	9f e3       	ldi	r25, 0x3F	; 63
     620:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     622:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     624:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	e7 5a       	subi	r30, 0xA7	; 167
     62c:	fe 4f       	sbci	r31, 0xFE	; 254
     62e:	80 81       	ld	r24, Z
     630:	87 70       	andi	r24, 0x07	; 7
     632:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     634:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     638:	89 50       	subi	r24, 0x09	; 9
     63a:	82 30       	cpi	r24, 0x02	; 2
     63c:	68 f4       	brcc	.+26     	; 0x658 <Next3+0xb0>
	{
		PORTB = BMASK;
     63e:	8f ef       	ldi	r24, 0xFF	; 255
     640:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     642:	8f e3       	ldi	r24, 0x3F	; 63
     644:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     646:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	e2 5a       	subi	r30, 0xA2	; 162
     64e:	fe 4f       	sbci	r31, 0xFE	; 254
     650:	80 81       	ld	r24, Z
     652:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     654:	87 e0       	ldi	r24, 0x07	; 7
     656:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
     658:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     65c:	8b 50       	subi	r24, 0x0B	; 11
     65e:	83 30       	cpi	r24, 0x03	; 3
     660:	68 f4       	brcc	.+26     	; 0x67c <Next3+0xd4>
	{
		PORTB = BMASK;
     662:	8f ef       	ldi	r24, 0xFF	; 255
     664:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     666:	8f e3       	ldi	r24, 0x3F	; 63
     668:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     66a:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	e2 5a       	subi	r30, 0xA2	; 162
     672:	fe 4f       	sbci	r31, 0xFE	; 254
     674:	80 81       	ld	r24, Z
     676:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     678:	87 e0       	ldi	r24, 0x07	; 7
     67a:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
     67c:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     680:	8a ee       	ldi	r24, 0xEA	; 234
     682:	8e 0f       	add	r24, r30
     684:	83 30       	cpi	r24, 0x03	; 3
     686:	58 f4       	brcc	.+22     	; 0x69e <Next3+0xf6>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	ea 59       	subi	r30, 0x9A	; 154
     68c:	fe 4f       	sbci	r31, 0xFE	; 254
     68e:	80 81       	ld	r24, Z
     690:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     692:	8f e3       	ldi	r24, 0x3F	; 63
     694:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     696:	8f ef       	ldi	r24, 0xFF	; 255
     698:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     69a:	87 e0       	ldi	r24, 0x07	; 7
     69c:	8e b9       	out	0x0e, r24	; 14
	}
	
	
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     69e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	69 e1       	ldi	r22, 0x19	; 25
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__divmodhi4>
     6ae:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <curLed>
     6b2:	08 95       	ret

000006b4 <Next4>:
}

void Next4(void)	//B C F G
{
	if((6 > curLed)&&(3 <= curLed))	//B
     6b4:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     6b8:	83 50       	subi	r24, 0x03	; 3
     6ba:	83 30       	cpi	r24, 0x03	; 3
     6bc:	68 f4       	brcc	.+26     	; 0x6d8 <Next4+0x24>
	{
		PORTB = BMASK;
     6be:	9f ef       	ldi	r25, 0xFF	; 255
     6c0:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     6c2:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	e1 59       	subi	r30, 0x91	; 145
     6ca:	fe 4f       	sbci	r31, 0xFE	; 254
     6cc:	80 81       	ld	r24, Z
     6ce:	8f 73       	andi	r24, 0x3F	; 63
     6d0:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     6d2:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     6d4:	87 e0       	ldi	r24, 0x07	; 7
     6d6:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     6d8:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     6dc:	86 30       	cpi	r24, 0x06	; 6
     6de:	69 f4       	brne	.+26     	; 0x6fa <Next4+0x46>
	{
		PORTB = BMASK;
     6e0:	8f ef       	ldi	r24, 0xFF	; 255
     6e2:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     6e4:	9f e3       	ldi	r25, 0x3F	; 63
     6e6:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     6e8:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     6ea:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	e7 5a       	subi	r30, 0xA7	; 167
     6f2:	fe 4f       	sbci	r31, 0xFE	; 254
     6f4:	80 81       	ld	r24, Z
     6f6:	87 70       	andi	r24, 0x07	; 7
     6f8:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     6fa:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     6fe:	87 50       	subi	r24, 0x07	; 7
     700:	82 30       	cpi	r24, 0x02	; 2
     702:	68 f4       	brcc	.+26     	; 0x71e <Next4+0x6a>
	{
		PORTB = BMASK;
     704:	8f ef       	ldi	r24, 0xFF	; 255
     706:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     708:	9f e3       	ldi	r25, 0x3F	; 63
     70a:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     70c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     70e:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	e7 5a       	subi	r30, 0xA7	; 167
     716:	fe 4f       	sbci	r31, 0xFE	; 254
     718:	80 81       	ld	r24, Z
     71a:	87 70       	andi	r24, 0x07	; 7
     71c:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     71e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     722:	89 50       	subi	r24, 0x09	; 9
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	68 f4       	brcc	.+26     	; 0x742 <Next4+0x8e>
	{
		PORTB = BMASK;
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     72c:	8f e3       	ldi	r24, 0x3F	; 63
     72e:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     730:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	e2 5a       	subi	r30, 0xA2	; 162
     738:	fe 4f       	sbci	r31, 0xFE	; 254
     73a:	80 81       	ld	r24, Z
     73c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     73e:	87 e0       	ldi	r24, 0x07	; 7
     740:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
     742:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     746:	8e ee       	ldi	r24, 0xEE	; 238
     748:	8e 0f       	add	r24, r30
     74a:	84 30       	cpi	r24, 0x04	; 4
     74c:	58 f4       	brcc	.+22     	; 0x764 <Next4+0xb0>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	ea 59       	subi	r30, 0x9A	; 154
     752:	fe 4f       	sbci	r31, 0xFE	; 254
     754:	80 81       	ld	r24, Z
     756:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     758:	8f e3       	ldi	r24, 0x3F	; 63
     75a:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     75c:	8f ef       	ldi	r24, 0xFF	; 255
     75e:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     760:	87 e0       	ldi	r24, 0x07	; 7
     762:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
     764:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     768:	8a ee       	ldi	r24, 0xEA	; 234
     76a:	8e 0f       	add	r24, r30
     76c:	83 30       	cpi	r24, 0x03	; 3
     76e:	58 f4       	brcc	.+22     	; 0x786 <Next4+0xd2>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	ea 59       	subi	r30, 0x9A	; 154
     774:	fe 4f       	sbci	r31, 0xFE	; 254
     776:	80 81       	ld	r24, Z
     778:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     77a:	8f e3       	ldi	r24, 0x3F	; 63
     77c:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     77e:	8f ef       	ldi	r24, 0xFF	; 255
     780:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     782:	87 e0       	ldi	r24, 0x07	; 7
     784:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     786:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	69 e1       	ldi	r22, 0x19	; 25
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__divmodhi4>
     796:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <curLed>
     79a:	08 95       	ret

0000079c <Next5>:
}

void Next5(void)	//A C D F G
{
	if(3 > curLed)		//A
     79c:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     7a0:	83 30       	cpi	r24, 0x03	; 3
     7a2:	68 f4       	brcc	.+26     	; 0x7be <Next5+0x22>
	{
		PORTB = BMASK;
     7a4:	9f ef       	ldi	r25, 0xFF	; 255
     7a6:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     7a8:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	e1 59       	subi	r30, 0x91	; 145
     7b0:	fe 4f       	sbci	r31, 0xFE	; 254
     7b2:	80 81       	ld	r24, Z
     7b4:	8f 73       	andi	r24, 0x3F	; 63
     7b6:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     7b8:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     7ba:	87 e0       	ldi	r24, 0x07	; 7
     7bc:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     7be:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     7c2:	87 50       	subi	r24, 0x07	; 7
     7c4:	82 30       	cpi	r24, 0x02	; 2
     7c6:	68 f4       	brcc	.+26     	; 0x7e2 <Next5+0x46>
	{
		PORTB = BMASK;
     7c8:	8f ef       	ldi	r24, 0xFF	; 255
     7ca:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     7cc:	9f e3       	ldi	r25, 0x3F	; 63
     7ce:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     7d0:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     7d2:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	e7 5a       	subi	r30, 0xA7	; 167
     7da:	fe 4f       	sbci	r31, 0xFE	; 254
     7dc:	80 81       	ld	r24, Z
     7de:	87 70       	andi	r24, 0x07	; 7
     7e0:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     7e2:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     7e6:	89 50       	subi	r24, 0x09	; 9
     7e8:	82 30       	cpi	r24, 0x02	; 2
     7ea:	68 f4       	brcc	.+26     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
	{
		PORTB = BMASK;
     7ec:	8f ef       	ldi	r24, 0xFF	; 255
     7ee:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     7f0:	8f e3       	ldi	r24, 0x3F	; 63
     7f2:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     7f4:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	e2 5a       	subi	r30, 0xA2	; 162
     7fc:	fe 4f       	sbci	r31, 0xFE	; 254
     7fe:	80 81       	ld	r24, Z
     800:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     802:	87 e0       	ldi	r24, 0x07	; 7
     804:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
     806:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     80a:	8b 50       	subi	r24, 0x0B	; 11
     80c:	83 30       	cpi	r24, 0x03	; 3
     80e:	68 f4       	brcc	.+26     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
	{
		PORTB = BMASK;
     810:	8f ef       	ldi	r24, 0xFF	; 255
     812:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     814:	8f e3       	ldi	r24, 0x3F	; 63
     816:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     818:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	e2 5a       	subi	r30, 0xA2	; 162
     820:	fe 4f       	sbci	r31, 0xFE	; 254
     822:	80 81       	ld	r24, Z
     824:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     826:	87 e0       	ldi	r24, 0x07	; 7
     828:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
     82a:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     82e:	8e ee       	ldi	r24, 0xEE	; 238
     830:	8e 0f       	add	r24, r30
     832:	84 30       	cpi	r24, 0x04	; 4
     834:	58 f4       	brcc	.+22     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	ea 59       	subi	r30, 0x9A	; 154
     83a:	fe 4f       	sbci	r31, 0xFE	; 254
     83c:	80 81       	ld	r24, Z
     83e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     840:	8f e3       	ldi	r24, 0x3F	; 63
     842:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     844:	8f ef       	ldi	r24, 0xFF	; 255
     846:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     848:	87 e0       	ldi	r24, 0x07	; 7
     84a:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
     84c:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     850:	8a ee       	ldi	r24, 0xEA	; 234
     852:	8e 0f       	add	r24, r30
     854:	83 30       	cpi	r24, 0x03	; 3
     856:	58 f4       	brcc	.+22     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	ea 59       	subi	r30, 0x9A	; 154
     85c:	fe 4f       	sbci	r31, 0xFE	; 254
     85e:	80 81       	ld	r24, Z
     860:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     862:	8f e3       	ldi	r24, 0x3F	; 63
     864:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     866:	8f ef       	ldi	r24, 0xFF	; 255
     868:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     86a:	87 e0       	ldi	r24, 0x07	; 7
     86c:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     86e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	01 96       	adiw	r24, 0x01	; 1
     876:	69 e1       	ldi	r22, 0x19	; 25
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__divmodhi4>
     87e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <curLed>
     882:	08 95       	ret

00000884 <Next6>:
}

void Next6(void)	//A C D E F G
{
	
	if(3 > curLed)		//A
     884:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     888:	83 30       	cpi	r24, 0x03	; 3
     88a:	68 f4       	brcc	.+26     	; 0x8a6 <Next6+0x22>
	{
		PORTB = BMASK;
     88c:	9f ef       	ldi	r25, 0xFF	; 255
     88e:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     890:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	e1 59       	subi	r30, 0x91	; 145
     898:	fe 4f       	sbci	r31, 0xFE	; 254
     89a:	80 81       	ld	r24, Z
     89c:	8f 73       	andi	r24, 0x3F	; 63
     89e:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     8a0:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     8a2:	87 e0       	ldi	r24, 0x07	; 7
     8a4:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     8a6:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     8aa:	87 50       	subi	r24, 0x07	; 7
     8ac:	82 30       	cpi	r24, 0x02	; 2
     8ae:	68 f4       	brcc	.+26     	; 0x8ca <Next6+0x46>
	{
		PORTB = BMASK;
     8b0:	8f ef       	ldi	r24, 0xFF	; 255
     8b2:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     8b4:	9f e3       	ldi	r25, 0x3F	; 63
     8b6:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     8b8:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     8ba:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	e7 5a       	subi	r30, 0xA7	; 167
     8c2:	fe 4f       	sbci	r31, 0xFE	; 254
     8c4:	80 81       	ld	r24, Z
     8c6:	87 70       	andi	r24, 0x07	; 7
     8c8:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     8ca:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     8ce:	89 50       	subi	r24, 0x09	; 9
     8d0:	82 30       	cpi	r24, 0x02	; 2
     8d2:	68 f4       	brcc	.+26     	; 0x8ee <Next6+0x6a>
	{
		PORTB = BMASK;
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     8d8:	8f e3       	ldi	r24, 0x3F	; 63
     8da:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     8dc:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	e2 5a       	subi	r30, 0xA2	; 162
     8e4:	fe 4f       	sbci	r31, 0xFE	; 254
     8e6:	80 81       	ld	r24, Z
     8e8:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     8ea:	87 e0       	ldi	r24, 0x07	; 7
     8ec:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
     8ee:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     8f2:	8b 50       	subi	r24, 0x0B	; 11
     8f4:	83 30       	cpi	r24, 0x03	; 3
     8f6:	68 f4       	brcc	.+26     	; 0x912 <__stack+0x13>
	{
		PORTB = BMASK;
     8f8:	8f ef       	ldi	r24, 0xFF	; 255
     8fa:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     8fc:	8f e3       	ldi	r24, 0x3F	; 63
     8fe:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     900:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	e2 5a       	subi	r30, 0xA2	; 162
     908:	fe 4f       	sbci	r31, 0xFE	; 254
     90a:	80 81       	ld	r24, Z
     90c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     90e:	87 e0       	ldi	r24, 0x07	; 7
     910:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (17 > curLed) && (14 <= curLed))	//E
     912:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     916:	8e 50       	subi	r24, 0x0E	; 14
     918:	83 30       	cpi	r24, 0x03	; 3
     91a:	68 f4       	brcc	.+26     	; 0x936 <__stack+0x37>
	{
		PORTB = BMASK;
     91c:	8f ef       	ldi	r24, 0xFF	; 255
     91e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     920:	8f e3       	ldi	r24, 0x3F	; 63
     922:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     924:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	e2 5a       	subi	r30, 0xA2	; 162
     92c:	fe 4f       	sbci	r31, 0xFE	; 254
     92e:	80 81       	ld	r24, Z
     930:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     932:	87 e0       	ldi	r24, 0x07	; 7
     934:	8e b9       	out	0x0e, r24	; 14
	}
	if( (18 > curLed) && (17 <= curLed))	//E
     936:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     93a:	81 31       	cpi	r24, 0x11	; 17
     93c:	41 f4       	brne	.+16     	; 0x94e <__stack+0x4f>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     93e:	8e ef       	ldi	r24, 0xFE	; 254
     940:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     942:	8f e3       	ldi	r24, 0x3F	; 63
     944:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     946:	8f ef       	ldi	r24, 0xFF	; 255
     948:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     94a:	87 e0       	ldi	r24, 0x07	; 7
     94c:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
     94e:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     952:	8e ee       	ldi	r24, 0xEE	; 238
     954:	8e 0f       	add	r24, r30
     956:	84 30       	cpi	r24, 0x04	; 4
     958:	58 f4       	brcc	.+22     	; 0x970 <__stack+0x71>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	ea 59       	subi	r30, 0x9A	; 154
     95e:	fe 4f       	sbci	r31, 0xFE	; 254
     960:	80 81       	ld	r24, Z
     962:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     964:	8f e3       	ldi	r24, 0x3F	; 63
     966:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     968:	8f ef       	ldi	r24, 0xFF	; 255
     96a:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     96c:	87 e0       	ldi	r24, 0x07	; 7
     96e:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
     970:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     974:	8a ee       	ldi	r24, 0xEA	; 234
     976:	8e 0f       	add	r24, r30
     978:	83 30       	cpi	r24, 0x03	; 3
     97a:	58 f4       	brcc	.+22     	; 0x992 <__stack+0x93>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	ea 59       	subi	r30, 0x9A	; 154
     980:	fe 4f       	sbci	r31, 0xFE	; 254
     982:	80 81       	ld	r24, Z
     984:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     986:	8f e3       	ldi	r24, 0x3F	; 63
     988:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     98a:	8f ef       	ldi	r24, 0xFF	; 255
     98c:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     98e:	87 e0       	ldi	r24, 0x07	; 7
     990:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     992:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	69 e1       	ldi	r22, 0x19	; 25
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__divmodhi4>
     9a2:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <curLed>
     9a6:	08 95       	ret

000009a8 <Next7>:
}

void Next7(void)	//A B C
{
	
	if(3 > curLed)		//A
     9a8:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     9ac:	83 30       	cpi	r24, 0x03	; 3
     9ae:	68 f4       	brcc	.+26     	; 0x9ca <Next7+0x22>
	{
		PORTB = BMASK;
     9b0:	9f ef       	ldi	r25, 0xFF	; 255
     9b2:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     9b4:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	e1 59       	subi	r30, 0x91	; 145
     9bc:	fe 4f       	sbci	r31, 0xFE	; 254
     9be:	80 81       	ld	r24, Z
     9c0:	8f 73       	andi	r24, 0x3F	; 63
     9c2:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     9c4:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     9c6:	87 e0       	ldi	r24, 0x07	; 7
     9c8:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
     9ca:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     9ce:	83 50       	subi	r24, 0x03	; 3
     9d0:	83 30       	cpi	r24, 0x03	; 3
     9d2:	68 f4       	brcc	.+26     	; 0x9ee <Next7+0x46>
	{
		PORTB = BMASK;
     9d4:	9f ef       	ldi	r25, 0xFF	; 255
     9d6:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     9d8:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	e1 59       	subi	r30, 0x91	; 145
     9e0:	fe 4f       	sbci	r31, 0xFE	; 254
     9e2:	80 81       	ld	r24, Z
     9e4:	8f 73       	andi	r24, 0x3F	; 63
     9e6:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     9e8:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     9ea:	87 e0       	ldi	r24, 0x07	; 7
     9ec:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     9ee:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     9f2:	86 30       	cpi	r24, 0x06	; 6
     9f4:	69 f4       	brne	.+26     	; 0xa10 <Next7+0x68>
	{
		PORTB = BMASK;
     9f6:	8f ef       	ldi	r24, 0xFF	; 255
     9f8:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     9fa:	9f e3       	ldi	r25, 0x3F	; 63
     9fc:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     9fe:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     a00:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	e7 5a       	subi	r30, 0xA7	; 167
     a08:	fe 4f       	sbci	r31, 0xFE	; 254
     a0a:	80 81       	ld	r24, Z
     a0c:	87 70       	andi	r24, 0x07	; 7
     a0e:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     a10:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     a14:	87 50       	subi	r24, 0x07	; 7
     a16:	82 30       	cpi	r24, 0x02	; 2
     a18:	68 f4       	brcc	.+26     	; 0xa34 <Next7+0x8c>
	{
		PORTB = BMASK;
     a1a:	8f ef       	ldi	r24, 0xFF	; 255
     a1c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     a1e:	9f e3       	ldi	r25, 0x3F	; 63
     a20:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     a22:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     a24:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	e7 5a       	subi	r30, 0xA7	; 167
     a2c:	fe 4f       	sbci	r31, 0xFE	; 254
     a2e:	80 81       	ld	r24, Z
     a30:	87 70       	andi	r24, 0x07	; 7
     a32:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     a34:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     a38:	89 50       	subi	r24, 0x09	; 9
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	68 f4       	brcc	.+26     	; 0xa58 <Next7+0xb0>
	{
		PORTB = BMASK;
     a3e:	8f ef       	ldi	r24, 0xFF	; 255
     a40:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     a42:	8f e3       	ldi	r24, 0x3F	; 63
     a44:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     a46:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	e2 5a       	subi	r30, 0xA2	; 162
     a4e:	fe 4f       	sbci	r31, 0xFE	; 254
     a50:	80 81       	ld	r24, Z
     a52:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     a54:	87 e0       	ldi	r24, 0x07	; 7
     a56:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     a58:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	01 96       	adiw	r24, 0x01	; 1
     a60:	69 e1       	ldi	r22, 0x19	; 25
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__divmodhi4>
     a68:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <curLed>
     a6c:	08 95       	ret

00000a6e <Next8>:
}

void Next8(void)	//A B C D E F G
{
		if(3 > curLed)		//A
     a6e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     a72:	83 30       	cpi	r24, 0x03	; 3
     a74:	68 f4       	brcc	.+26     	; 0xa90 <Next8+0x22>
		{
			PORTB = BMASK;
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	95 b9       	out	0x05, r25	; 5
			PORTC = CMASK&LED_BANKC_TAB[curLed];
     a7a:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	e1 59       	subi	r30, 0x91	; 145
     a82:	fe 4f       	sbci	r31, 0xFE	; 254
     a84:	80 81       	ld	r24, Z
     a86:	8f 73       	andi	r24, 0x3F	; 63
     a88:	88 b9       	out	0x08, r24	; 8
			PORTD = DMASK;
     a8a:	9b b9       	out	0x0b, r25	; 11
			PORTE = EMASK;
     a8c:	87 e0       	ldi	r24, 0x07	; 7
     a8e:	8e b9       	out	0x0e, r24	; 14
		}
		
		if((6 > curLed)&&(3 <= curLed))	//B
     a90:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     a94:	83 50       	subi	r24, 0x03	; 3
     a96:	83 30       	cpi	r24, 0x03	; 3
     a98:	68 f4       	brcc	.+26     	; 0xab4 <Next8+0x46>
		{
			PORTB = BMASK;
     a9a:	9f ef       	ldi	r25, 0xFF	; 255
     a9c:	95 b9       	out	0x05, r25	; 5
			PORTC = CMASK&LED_BANKC_TAB[curLed];
     a9e:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	e1 59       	subi	r30, 0x91	; 145
     aa6:	fe 4f       	sbci	r31, 0xFE	; 254
     aa8:	80 81       	ld	r24, Z
     aaa:	8f 73       	andi	r24, 0x3F	; 63
     aac:	88 b9       	out	0x08, r24	; 8
			PORTD = DMASK;
     aae:	9b b9       	out	0x0b, r25	; 11
			PORTE = EMASK;
     ab0:	87 e0       	ldi	r24, 0x07	; 7
     ab2:	8e b9       	out	0x0e, r24	; 14
		}
		if((7 > curLed)&&(6 <= curLed))	//B
     ab4:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     ab8:	86 30       	cpi	r24, 0x06	; 6
     aba:	69 f4       	brne	.+26     	; 0xad6 <Next8+0x68>
		{
			PORTB = BMASK;
     abc:	8f ef       	ldi	r24, 0xFF	; 255
     abe:	85 b9       	out	0x05, r24	; 5
			PORTC = CMASK;
     ac0:	9f e3       	ldi	r25, 0x3F	; 63
     ac2:	98 b9       	out	0x08, r25	; 8
			PORTD = DMASK;
     ac4:	8b b9       	out	0x0b, r24	; 11
			PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     ac6:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	e7 5a       	subi	r30, 0xA7	; 167
     ace:	fe 4f       	sbci	r31, 0xFE	; 254
     ad0:	80 81       	ld	r24, Z
     ad2:	87 70       	andi	r24, 0x07	; 7
     ad4:	8e b9       	out	0x0e, r24	; 14
		}
		
		if((9> curLed)&&(7 <= curLed)) //C
     ad6:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     ada:	87 50       	subi	r24, 0x07	; 7
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	68 f4       	brcc	.+26     	; 0xafa <Next8+0x8c>
		{
			PORTB = BMASK;
     ae0:	8f ef       	ldi	r24, 0xFF	; 255
     ae2:	85 b9       	out	0x05, r24	; 5
			PORTC = CMASK;
     ae4:	9f e3       	ldi	r25, 0x3F	; 63
     ae6:	98 b9       	out	0x08, r25	; 8
			PORTD = DMASK;
     ae8:	8b b9       	out	0x0b, r24	; 11
			PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     aea:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	e7 5a       	subi	r30, 0xA7	; 167
     af2:	fe 4f       	sbci	r31, 0xFE	; 254
     af4:	80 81       	ld	r24, Z
     af6:	87 70       	andi	r24, 0x07	; 7
     af8:	8e b9       	out	0x0e, r24	; 14
		}
		if( (11 > curLed) && (9 <= curLed))	//C
     afa:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     afe:	89 50       	subi	r24, 0x09	; 9
     b00:	82 30       	cpi	r24, 0x02	; 2
     b02:	68 f4       	brcc	.+26     	; 0xb1e <Next8+0xb0>
		{
			PORTB = BMASK;
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	85 b9       	out	0x05, r24	; 5
			PORTC = CMASK;
     b08:	8f e3       	ldi	r24, 0x3F	; 63
     b0a:	88 b9       	out	0x08, r24	; 8
			PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     b0c:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	e2 5a       	subi	r30, 0xA2	; 162
     b14:	fe 4f       	sbci	r31, 0xFE	; 254
     b16:	80 81       	ld	r24, Z
     b18:	8b b9       	out	0x0b, r24	; 11
			PORTE = EMASK;
     b1a:	87 e0       	ldi	r24, 0x07	; 7
     b1c:	8e b9       	out	0x0e, r24	; 14
		}
		
		if( (14 > curLed) && (11 <= curLed))	//D
     b1e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     b22:	8b 50       	subi	r24, 0x0B	; 11
     b24:	83 30       	cpi	r24, 0x03	; 3
     b26:	68 f4       	brcc	.+26     	; 0xb42 <Next8+0xd4>
		{
			PORTB = BMASK;
     b28:	8f ef       	ldi	r24, 0xFF	; 255
     b2a:	85 b9       	out	0x05, r24	; 5
			PORTC = CMASK;
     b2c:	8f e3       	ldi	r24, 0x3F	; 63
     b2e:	88 b9       	out	0x08, r24	; 8
			PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     b30:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	e2 5a       	subi	r30, 0xA2	; 162
     b38:	fe 4f       	sbci	r31, 0xFE	; 254
     b3a:	80 81       	ld	r24, Z
     b3c:	8b b9       	out	0x0b, r24	; 11
			PORTE = EMASK;
     b3e:	87 e0       	ldi	r24, 0x07	; 7
     b40:	8e b9       	out	0x0e, r24	; 14
		}
		
		if( (17 > curLed) && (14 <= curLed))	//E
     b42:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     b46:	8e 50       	subi	r24, 0x0E	; 14
     b48:	83 30       	cpi	r24, 0x03	; 3
     b4a:	68 f4       	brcc	.+26     	; 0xb66 <Next8+0xf8>
		{
			PORTB = BMASK;
     b4c:	8f ef       	ldi	r24, 0xFF	; 255
     b4e:	85 b9       	out	0x05, r24	; 5
			PORTC = CMASK;
     b50:	8f e3       	ldi	r24, 0x3F	; 63
     b52:	88 b9       	out	0x08, r24	; 8
			PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     b54:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	e2 5a       	subi	r30, 0xA2	; 162
     b5c:	fe 4f       	sbci	r31, 0xFE	; 254
     b5e:	80 81       	ld	r24, Z
     b60:	8b b9       	out	0x0b, r24	; 11
			PORTE = EMASK;
     b62:	87 e0       	ldi	r24, 0x07	; 7
     b64:	8e b9       	out	0x0e, r24	; 14
		}
		if( (18 > curLed) && (17 <= curLed))	//E
     b66:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     b6a:	81 31       	cpi	r24, 0x11	; 17
     b6c:	41 f4       	brne	.+16     	; 0xb7e <Next8+0x110>
		{
			PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     b6e:	8e ef       	ldi	r24, 0xFE	; 254
     b70:	85 b9       	out	0x05, r24	; 5
			PORTC = CMASK;
     b72:	8f e3       	ldi	r24, 0x3F	; 63
     b74:	88 b9       	out	0x08, r24	; 8
			PORTD = DMASK;
     b76:	8f ef       	ldi	r24, 0xFF	; 255
     b78:	8b b9       	out	0x0b, r24	; 11
			PORTE = EMASK;
     b7a:	87 e0       	ldi	r24, 0x07	; 7
     b7c:	8e b9       	out	0x0e, r24	; 14
		}
		
		if( (22 > curLed) && (18 <= curLed))	//F
     b7e:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     b82:	8e ee       	ldi	r24, 0xEE	; 238
     b84:	8e 0f       	add	r24, r30
     b86:	84 30       	cpi	r24, 0x04	; 4
     b88:	58 f4       	brcc	.+22     	; 0xba0 <Next8+0x132>
		{
			PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	ea 59       	subi	r30, 0x9A	; 154
     b8e:	fe 4f       	sbci	r31, 0xFE	; 254
     b90:	80 81       	ld	r24, Z
     b92:	85 b9       	out	0x05, r24	; 5
			PORTC = CMASK;
     b94:	8f e3       	ldi	r24, 0x3F	; 63
     b96:	88 b9       	out	0x08, r24	; 8
			PORTD = DMASK;
     b98:	8f ef       	ldi	r24, 0xFF	; 255
     b9a:	8b b9       	out	0x0b, r24	; 11
			PORTE = EMASK;
     b9c:	87 e0       	ldi	r24, 0x07	; 7
     b9e:	8e b9       	out	0x0e, r24	; 14
		}
		
		if( (25 > curLed) && (22 <= curLed))	//G
     ba0:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     ba4:	8a ee       	ldi	r24, 0xEA	; 234
     ba6:	8e 0f       	add	r24, r30
     ba8:	83 30       	cpi	r24, 0x03	; 3
     baa:	58 f4       	brcc	.+22     	; 0xbc2 <Next8+0x154>
		{
			PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	ea 59       	subi	r30, 0x9A	; 154
     bb0:	fe 4f       	sbci	r31, 0xFE	; 254
     bb2:	80 81       	ld	r24, Z
     bb4:	85 b9       	out	0x05, r24	; 5
			PORTC = CMASK;
     bb6:	8f e3       	ldi	r24, 0x3F	; 63
     bb8:	88 b9       	out	0x08, r24	; 8
			PORTD = DMASK;
     bba:	8f ef       	ldi	r24, 0xFF	; 255
     bbc:	8b b9       	out	0x0b, r24	; 11
			PORTE = EMASK;
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	8e b9       	out	0x0e, r24	; 14
		}
		
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     bc2:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	69 e1       	ldi	r22, 0x19	; 25
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__divmodhi4>
     bd2:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <curLed>
     bd6:	08 95       	ret

00000bd8 <Next9>:
}

void Next9(void)	//A B C D F G
{
	
	if(3 > curLed)		//A
     bd8:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     bdc:	83 30       	cpi	r24, 0x03	; 3
     bde:	68 f4       	brcc	.+26     	; 0xbfa <Next9+0x22>
	{
		PORTB = BMASK;
     be0:	9f ef       	ldi	r25, 0xFF	; 255
     be2:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     be4:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	e1 59       	subi	r30, 0x91	; 145
     bec:	fe 4f       	sbci	r31, 0xFE	; 254
     bee:	80 81       	ld	r24, Z
     bf0:	8f 73       	andi	r24, 0x3F	; 63
     bf2:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     bf4:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(3 <= curLed))	//B
     bfa:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     bfe:	83 50       	subi	r24, 0x03	; 3
     c00:	83 30       	cpi	r24, 0x03	; 3
     c02:	68 f4       	brcc	.+26     	; 0xc1e <Next9+0x46>
	{
		PORTB = BMASK;
     c04:	9f ef       	ldi	r25, 0xFF	; 255
     c06:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     c08:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	e1 59       	subi	r30, 0x91	; 145
     c10:	fe 4f       	sbci	r31, 0xFE	; 254
     c12:	80 81       	ld	r24, Z
     c14:	8f 73       	andi	r24, 0x3F	; 63
     c16:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     c18:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     c1a:	87 e0       	ldi	r24, 0x07	; 7
     c1c:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     c1e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     c22:	86 30       	cpi	r24, 0x06	; 6
     c24:	69 f4       	brne	.+26     	; 0xc40 <Next9+0x68>
	{
		PORTB = BMASK;
     c26:	8f ef       	ldi	r24, 0xFF	; 255
     c28:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     c2a:	9f e3       	ldi	r25, 0x3F	; 63
     c2c:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     c2e:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     c30:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	e7 5a       	subi	r30, 0xA7	; 167
     c38:	fe 4f       	sbci	r31, 0xFE	; 254
     c3a:	80 81       	ld	r24, Z
     c3c:	87 70       	andi	r24, 0x07	; 7
     c3e:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     c40:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     c44:	87 50       	subi	r24, 0x07	; 7
     c46:	82 30       	cpi	r24, 0x02	; 2
     c48:	68 f4       	brcc	.+26     	; 0xc64 <Next9+0x8c>
	{
		PORTB = BMASK;
     c4a:	8f ef       	ldi	r24, 0xFF	; 255
     c4c:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     c4e:	9f e3       	ldi	r25, 0x3F	; 63
     c50:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     c52:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     c54:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	e7 5a       	subi	r30, 0xA7	; 167
     c5c:	fe 4f       	sbci	r31, 0xFE	; 254
     c5e:	80 81       	ld	r24, Z
     c60:	87 70       	andi	r24, 0x07	; 7
     c62:	8e b9       	out	0x0e, r24	; 14
	}
	if( (11 > curLed) && (9 <= curLed))	//C
     c64:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     c68:	89 50       	subi	r24, 0x09	; 9
     c6a:	82 30       	cpi	r24, 0x02	; 2
     c6c:	68 f4       	brcc	.+26     	; 0xc88 <Next9+0xb0>
	{
		PORTB = BMASK;
     c6e:	8f ef       	ldi	r24, 0xFF	; 255
     c70:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     c72:	8f e3       	ldi	r24, 0x3F	; 63
     c74:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     c76:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	e2 5a       	subi	r30, 0xA2	; 162
     c7e:	fe 4f       	sbci	r31, 0xFE	; 254
     c80:	80 81       	ld	r24, Z
     c82:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     c84:	87 e0       	ldi	r24, 0x07	; 7
     c86:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (14 > curLed) && (11 <= curLed))	//D
     c88:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     c8c:	8b 50       	subi	r24, 0x0B	; 11
     c8e:	83 30       	cpi	r24, 0x03	; 3
     c90:	68 f4       	brcc	.+26     	; 0xcac <Next9+0xd4>
	{
		PORTB = BMASK;
     c92:	8f ef       	ldi	r24, 0xFF	; 255
     c94:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     c96:	8f e3       	ldi	r24, 0x3F	; 63
     c98:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     c9a:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	e2 5a       	subi	r30, 0xA2	; 162
     ca2:	fe 4f       	sbci	r31, 0xFE	; 254
     ca4:	80 81       	ld	r24, Z
     ca6:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     ca8:	87 e0       	ldi	r24, 0x07	; 7
     caa:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (22 > curLed) && (18 <= curLed))	//F
     cac:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     cb0:	8e ee       	ldi	r24, 0xEE	; 238
     cb2:	8e 0f       	add	r24, r30
     cb4:	84 30       	cpi	r24, 0x04	; 4
     cb6:	58 f4       	brcc	.+22     	; 0xcce <Next9+0xf6>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	ea 59       	subi	r30, 0x9A	; 154
     cbc:	fe 4f       	sbci	r31, 0xFE	; 254
     cbe:	80 81       	ld	r24, Z
     cc0:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     cc2:	8f e3       	ldi	r24, 0x3F	; 63
     cc4:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     cc6:	8f ef       	ldi	r24, 0xFF	; 255
     cc8:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     cca:	87 e0       	ldi	r24, 0x07	; 7
     ccc:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (25 > curLed) && (22 <= curLed))	//G
     cce:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     cd2:	8a ee       	ldi	r24, 0xEA	; 234
     cd4:	8e 0f       	add	r24, r30
     cd6:	83 30       	cpi	r24, 0x03	; 3
     cd8:	58 f4       	brcc	.+22     	; 0xcf0 <Next9+0x118>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	ea 59       	subi	r30, 0x9A	; 154
     cde:	fe 4f       	sbci	r31, 0xFE	; 254
     ce0:	80 81       	ld	r24, Z
     ce2:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     ce4:	8f e3       	ldi	r24, 0x3F	; 63
     ce6:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     ce8:	8f ef       	ldi	r24, 0xFF	; 255
     cea:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     cec:	87 e0       	ldi	r24, 0x07	; 7
     cee:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED);// + ((curLed + 1)/NUMLED);
     cf0:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	69 e1       	ldi	r22, 0x19	; 25
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__divmodhi4>
     d00:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <curLed>
     d04:	08 95       	ret

00000d06 <NextX>:
}

void NextX(void)
{
	if(4 > curLed)		//A
     d06:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     d0a:	84 30       	cpi	r24, 0x04	; 4
     d0c:	38 f4       	brcc	.+14     	; 0xd1c <NextX+0x16>
	{
		PORTB = BMASK;
     d0e:	8f ef       	ldi	r24, 0xFF	; 255
     d10:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;	//&LED_BANKC_TAB[curLed];
     d12:	9f e3       	ldi	r25, 0x3F	; 63
     d14:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     d16:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     d18:	87 e0       	ldi	r24, 0x07	; 7
     d1a:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((6 > curLed)&&(4 <= curLed))	//B
     d1c:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     d20:	84 50       	subi	r24, 0x04	; 4
     d22:	82 30       	cpi	r24, 0x02	; 2
     d24:	68 f4       	brcc	.+26     	; 0xd40 <NextX+0x3a>
	{
		PORTB = BMASK;
     d26:	9f ef       	ldi	r25, 0xFF	; 255
     d28:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
     d2a:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	e1 59       	subi	r30, 0x91	; 145
     d32:	fe 4f       	sbci	r31, 0xFE	; 254
     d34:	80 81       	ld	r24, Z
     d36:	8f 73       	andi	r24, 0x3F	; 63
     d38:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     d3a:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
     d3c:	87 e0       	ldi	r24, 0x07	; 7
     d3e:	8e b9       	out	0x0e, r24	; 14
	}
	if((7 > curLed)&&(6 <= curLed))	//B
     d40:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     d44:	86 30       	cpi	r24, 0x06	; 6
     d46:	69 f4       	brne	.+26     	; 0xd62 <NextX+0x5c>
	{
		PORTB = BMASK;
     d48:	8f ef       	ldi	r24, 0xFF	; 255
     d4a:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     d4c:	9f e3       	ldi	r25, 0x3F	; 63
     d4e:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     d50:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     d52:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	e7 5a       	subi	r30, 0xA7	; 167
     d5a:	fe 4f       	sbci	r31, 0xFE	; 254
     d5c:	80 81       	ld	r24, Z
     d5e:	87 70       	andi	r24, 0x07	; 7
     d60:	8e b9       	out	0x0e, r24	; 14
	}
	
	if((9> curLed)&&(7 <= curLed)) //C
     d62:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     d66:	87 50       	subi	r24, 0x07	; 7
     d68:	82 30       	cpi	r24, 0x02	; 2
     d6a:	68 f4       	brcc	.+26     	; 0xd86 <NextX+0x80>
	{
		PORTB = BMASK;
     d6c:	8f ef       	ldi	r24, 0xFF	; 255
     d6e:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     d70:	9f e3       	ldi	r25, 0x3F	; 63
     d72:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     d74:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
     d76:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	e7 5a       	subi	r30, 0xA7	; 167
     d7e:	fe 4f       	sbci	r31, 0xFE	; 254
     d80:	80 81       	ld	r24, Z
     d82:	87 70       	andi	r24, 0x07	; 7
     d84:	8e b9       	out	0x0e, r24	; 14
	}
	if( (10 > curLed) && (9 <= curLed))	//C
     d86:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     d8a:	89 30       	cpi	r24, 0x09	; 9
     d8c:	69 f4       	brne	.+26     	; 0xda8 <NextX+0xa2>
	{
		PORTB = BMASK;
     d8e:	8f ef       	ldi	r24, 0xFF	; 255
     d90:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     d92:	8f e3       	ldi	r24, 0x3F	; 63
     d94:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     d96:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	e2 5a       	subi	r30, 0xA2	; 162
     d9e:	fe 4f       	sbci	r31, 0xFE	; 254
     da0:	80 81       	ld	r24, Z
     da2:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     da4:	87 e0       	ldi	r24, 0x07	; 7
     da6:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (15 > curLed) && (10 <= curLed))	//D
     da8:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     dac:	8a 50       	subi	r24, 0x0A	; 10
     dae:	85 30       	cpi	r24, 0x05	; 5
     db0:	38 f4       	brcc	.+14     	; 0xdc0 <NextX+0xba>
	{
		PORTB = BMASK;
     db2:	8f ef       	ldi	r24, 0xFF	; 255
     db4:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     db6:	9f e3       	ldi	r25, 0x3F	; 63
     db8:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;	//&LED_BANKD_TAB[curLed - 9];
     dba:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     dbc:	87 e0       	ldi	r24, 0x07	; 7
     dbe:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (17 > curLed) && (15 <= curLed))	//E
     dc0:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     dc4:	8f 50       	subi	r24, 0x0F	; 15
     dc6:	82 30       	cpi	r24, 0x02	; 2
     dc8:	68 f4       	brcc	.+26     	; 0xde4 <NextX+0xde>
	{
		PORTB = BMASK;
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     dce:	8f e3       	ldi	r24, 0x3F	; 63
     dd0:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
     dd2:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	e2 5a       	subi	r30, 0xA2	; 162
     dda:	fe 4f       	sbci	r31, 0xFE	; 254
     ddc:	80 81       	ld	r24, Z
     dde:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     de0:	87 e0       	ldi	r24, 0x07	; 7
     de2:	8e b9       	out	0x0e, r24	; 14
	}
	if( (18 > curLed) && (17 <= curLed))	//E
     de4:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     de8:	81 31       	cpi	r24, 0x11	; 17
     dea:	41 f4       	brne	.+16     	; 0xdfc <NextX+0xf6>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     dec:	8e ef       	ldi	r24, 0xFE	; 254
     dee:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     df0:	8f e3       	ldi	r24, 0x3F	; 63
     df2:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     df4:	8f ef       	ldi	r24, 0xFF	; 255
     df6:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     df8:	87 e0       	ldi	r24, 0x07	; 7
     dfa:	8e b9       	out	0x0e, r24	; 14
	}
	
	if( (21 > curLed) && (18 <= curLed))	//F
     dfc:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     e00:	8e ee       	ldi	r24, 0xEE	; 238
     e02:	8e 0f       	add	r24, r30
     e04:	83 30       	cpi	r24, 0x03	; 3
     e06:	58 f4       	brcc	.+22     	; 0xe1e <NextX+0x118>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	ea 59       	subi	r30, 0x9A	; 154
     e0c:	fe 4f       	sbci	r31, 0xFE	; 254
     e0e:	80 81       	ld	r24, Z
     e10:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     e12:	8f e3       	ldi	r24, 0x3F	; 63
     e14:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     e16:	8f ef       	ldi	r24, 0xFF	; 255
     e18:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	8e b9       	out	0x0e, r24	; 14
	}
	if(curLed == 21)
     e1e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     e22:	85 31       	cpi	r24, 0x15	; 21
     e24:	39 f4       	brne	.+14     	; 0xe34 <NextX+0x12e>
	{
		PORTB = BMASK;
     e26:	8f ef       	ldi	r24, 0xFF	; 255
     e28:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;	//&LED_BANKC_TAB[curLed];
     e2a:	9f e3       	ldi	r25, 0x3F	; 63
     e2c:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
     e2e:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     e30:	87 e0       	ldi	r24, 0x07	; 7
     e32:	8e b9       	out	0x0e, r24	; 14
	}
	
	
	if( (25 > curLed) && (22 <= curLed))	//G
     e34:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
     e38:	8a ee       	ldi	r24, 0xEA	; 234
     e3a:	8e 0f       	add	r24, r30
     e3c:	83 30       	cpi	r24, 0x03	; 3
     e3e:	58 f4       	brcc	.+22     	; 0xe56 <NextX+0x150>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	ea 59       	subi	r30, 0x9A	; 154
     e44:	fe 4f       	sbci	r31, 0xFE	; 254
     e46:	80 81       	ld	r24, Z
     e48:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
     e4a:	8f e3       	ldi	r24, 0x3F	; 63
     e4c:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
     e4e:	8f ef       	ldi	r24, 0xFF	; 255
     e50:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
     e52:	87 e0       	ldi	r24, 0x07	; 7
     e54:	8e b9       	out	0x0e, r24	; 14
	}
	
	curLed = ((curLed + 1)%NUMLED);
     e56:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	69 e1       	ldi	r22, 0x19	; 25
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__divmodhi4>
     e66:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <curLed>
     e6a:	08 95       	ret

00000e6c <NoLeds>:



void NoLeds(void)
{
	PORTB = BMASK;
     e6c:	8f ef       	ldi	r24, 0xFF	; 255
     e6e:	85 b9       	out	0x05, r24	; 5
	PORTC = CMASK;
     e70:	9f e3       	ldi	r25, 0x3F	; 63
     e72:	98 b9       	out	0x08, r25	; 8
	PORTD = DMASK;
     e74:	8b b9       	out	0x0b, r24	; 11
	PORTE = EMASK;
     e76:	87 e0       	ldi	r24, 0x07	; 7
     e78:	8e b9       	out	0x0e, r24	; 14
     e7a:	08 95       	ret

00000e7c <ReportScore>:



void ReportScore(uint8_t S)
{
	uint8_t hundreds = S/100;
     e7c:	49 e2       	ldi	r20, 0x29	; 41
     e7e:	84 9f       	mul	r24, r20
     e80:	41 2d       	mov	r20, r1
     e82:	11 24       	eor	r1, r1
     e84:	e4 2f       	mov	r30, r20
     e86:	e2 95       	swap	r30
     e88:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t remainder = S%100;
     e8a:	24 e6       	ldi	r18, 0x64	; 100
     e8c:	e2 9f       	mul	r30, r18
     e8e:	80 19       	sub	r24, r0
     e90:	11 24       	eor	r1, r1
	uint8_t tens = remainder/10;
     e92:	4d ec       	ldi	r20, 0xCD	; 205
     e94:	84 9f       	mul	r24, r20
     e96:	41 2d       	mov	r20, r1
     e98:	11 24       	eor	r1, r1
     e9a:	94 2f       	mov	r25, r20
     e9c:	96 95       	lsr	r25
     e9e:	96 95       	lsr	r25
     ea0:	96 95       	lsr	r25
	remainder = remainder%10;
     ea2:	39 2f       	mov	r19, r25
     ea4:	33 0f       	add	r19, r19
     ea6:	23 2f       	mov	r18, r19
     ea8:	22 0f       	add	r18, r18
     eaa:	22 0f       	add	r18, r18
     eac:	23 0f       	add	r18, r19
     eae:	82 1b       	sub	r24, r18
	uint8_t ones = remainder;
	if(0 != hundreds)
     eb0:	ee 23       	and	r30, r30
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <ReportScore+0x3a>
     eb4:	cb c0       	rjmp	.+406    	; 0x104c <ReportScore+0x1d0>
	{
		//ledMode = hundreds + 3;			//Definitions of ledModes for displaying digits is the digit value + 3...
		switch(hundreds)
     eb6:	4e 2f       	mov	r20, r30
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	fa 01       	movw	r30, r20
     ebc:	31 97       	sbiw	r30, 0x01	; 1
     ebe:	e9 30       	cpi	r30, 0x09	; 9
     ec0:	f1 05       	cpc	r31, r1
     ec2:	40 f5       	brcc	.+80     	; 0xf14 <ReportScore+0x98>
     ec4:	e6 5a       	subi	r30, 0xA6	; 166
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__tablejump2__>
		{
			case 1:
				ledMode = DISPLAY1;
     ecc:	24 e0       	ldi	r18, 0x04	; 4
     ece:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
				break;
     ed2:	bf c0       	rjmp	.+382    	; 0x1052 <ReportScore+0x1d6>
			case 2:
				ledMode = DISPLAY2;
     ed4:	25 e0       	ldi	r18, 0x05	; 5
     ed6:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
				break;
     eda:	bb c0       	rjmp	.+374    	; 0x1052 <ReportScore+0x1d6>
			case 3:
				ledMode = DISPLAY3;
     edc:	26 e0       	ldi	r18, 0x06	; 6
     ede:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
				break;
     ee2:	b7 c0       	rjmp	.+366    	; 0x1052 <ReportScore+0x1d6>
			case 4:
				ledMode = DISPLAY4;
     ee4:	27 e0       	ldi	r18, 0x07	; 7
     ee6:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
				break;
     eea:	b3 c0       	rjmp	.+358    	; 0x1052 <ReportScore+0x1d6>
			case 5:
				ledMode	= DISPLAY5;
     eec:	28 e0       	ldi	r18, 0x08	; 8
     eee:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
				break;
     ef2:	af c0       	rjmp	.+350    	; 0x1052 <ReportScore+0x1d6>
			case 6:
				ledMode = DISPLAY6;
     ef4:	29 e0       	ldi	r18, 0x09	; 9
     ef6:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
				break;
     efa:	ab c0       	rjmp	.+342    	; 0x1052 <ReportScore+0x1d6>
			case 7:
				ledMode = DISPLAY7;
     efc:	2a e0       	ldi	r18, 0x0A	; 10
     efe:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
				break;
     f02:	a7 c0       	rjmp	.+334    	; 0x1052 <ReportScore+0x1d6>
			case 8:
				ledMode = DISPLAY8;
     f04:	2b e0       	ldi	r18, 0x0B	; 11
     f06:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
				break;
     f0a:	a3 c0       	rjmp	.+326    	; 0x1052 <ReportScore+0x1d6>
			case 9:
				ledMode = DISPLAY9;
     f0c:	2c e0       	ldi	r18, 0x0C	; 12
     f0e:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
				break;
     f12:	9f c0       	rjmp	.+318    	; 0x1052 <ReportScore+0x1d6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f14:	3f ef       	ldi	r19, 0xFF	; 255
     f16:	4e e9       	ldi	r20, 0x9E	; 158
     f18:	24 e2       	ldi	r18, 0x24	; 36
     f1a:	31 50       	subi	r19, 0x01	; 1
     f1c:	40 40       	sbci	r20, 0x00	; 0
     f1e:	20 40       	sbci	r18, 0x00	; 0
     f20:	e1 f7       	brne	.-8      	; 0xf1a <ReportScore+0x9e>
     f22:	00 c0       	rjmp	.+0      	; 0xf24 <ReportScore+0xa8>
     f24:	00 00       	nop
			default:
				//uh oh! Your score is probably really high dude!
				break;
		}
		_delay_ms(1500);
		ledMode = LEDSOFF; 
     f26:	2d e0       	ldi	r18, 0x0D	; 13
     f28:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
     f2c:	3f ef       	ldi	r19, 0xFF	; 255
     f2e:	44 e3       	ldi	r20, 0x34	; 52
     f30:	2c e0       	ldi	r18, 0x0C	; 12
     f32:	31 50       	subi	r19, 0x01	; 1
     f34:	40 40       	sbci	r20, 0x00	; 0
     f36:	20 40       	sbci	r18, 0x00	; 0
     f38:	e1 f7       	brne	.-8      	; 0xf32 <ReportScore+0xb6>
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <ReportScore+0xc0>
     f3c:	00 00       	nop
		_delay_ms(500);
	}
	if(tens || hundreds)
     f3e:	99 23       	and	r25, r25
     f40:	51 f0       	breq	.+20     	; 0xf56 <ReportScore+0xda>
	{
		switch(tens)
     f42:	49 2f       	mov	r20, r25
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	4a 30       	cpi	r20, 0x0A	; 10
     f48:	51 05       	cpc	r21, r1
     f4a:	60 f5       	brcc	.+88     	; 0xfa4 <ReportScore+0x128>
     f4c:	fa 01       	movw	r30, r20
     f4e:	ed 59       	subi	r30, 0x9D	; 157
     f50:	ff 4f       	sbci	r31, 0xFF	; 255
     f52:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__tablejump2__>
		{
			case 0:
				ledMode = DISPLAY0;
     f56:	93 e0       	ldi	r25, 0x03	; 3
     f58:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
				break;
     f5c:	23 c0       	rjmp	.+70     	; 0xfa4 <ReportScore+0x128>
			case 1:
				ledMode = DISPLAY1;
     f5e:	94 e0       	ldi	r25, 0x04	; 4
     f60:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
				break;
     f64:	1f c0       	rjmp	.+62     	; 0xfa4 <ReportScore+0x128>
			case 2:
				ledMode = DISPLAY2;
     f66:	95 e0       	ldi	r25, 0x05	; 5
     f68:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
				break;
     f6c:	1b c0       	rjmp	.+54     	; 0xfa4 <ReportScore+0x128>
			case 3:
				ledMode = DISPLAY3;
     f6e:	96 e0       	ldi	r25, 0x06	; 6
     f70:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
				break;
     f74:	17 c0       	rjmp	.+46     	; 0xfa4 <ReportScore+0x128>
			case 4:
				ledMode = DISPLAY4;
     f76:	97 e0       	ldi	r25, 0x07	; 7
     f78:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
				break;
     f7c:	13 c0       	rjmp	.+38     	; 0xfa4 <ReportScore+0x128>
			case 5:
				ledMode	= DISPLAY5;
     f7e:	98 e0       	ldi	r25, 0x08	; 8
     f80:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
				break;
     f84:	0f c0       	rjmp	.+30     	; 0xfa4 <ReportScore+0x128>
			case 6:
				ledMode = DISPLAY6;
     f86:	99 e0       	ldi	r25, 0x09	; 9
     f88:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
				break;
     f8c:	0b c0       	rjmp	.+22     	; 0xfa4 <ReportScore+0x128>
			case 7:
				ledMode = DISPLAY7;
     f8e:	9a e0       	ldi	r25, 0x0A	; 10
     f90:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
				break;
     f94:	07 c0       	rjmp	.+14     	; 0xfa4 <ReportScore+0x128>
			case 8:
				ledMode = DISPLAY8;
     f96:	9b e0       	ldi	r25, 0x0B	; 11
     f98:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
				break;
     f9c:	03 c0       	rjmp	.+6      	; 0xfa4 <ReportScore+0x128>
			case 9:
				ledMode = DISPLAY9;
     f9e:	9c e0       	ldi	r25, 0x0C	; 12
     fa0:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
     fa4:	3f ef       	ldi	r19, 0xFF	; 255
     fa6:	4e e9       	ldi	r20, 0x9E	; 158
     fa8:	94 e2       	ldi	r25, 0x24	; 36
     faa:	31 50       	subi	r19, 0x01	; 1
     fac:	40 40       	sbci	r20, 0x00	; 0
     fae:	90 40       	sbci	r25, 0x00	; 0
     fb0:	e1 f7       	brne	.-8      	; 0xfaa <ReportScore+0x12e>
     fb2:	00 c0       	rjmp	.+0      	; 0xfb4 <ReportScore+0x138>
     fb4:	00 00       	nop
			default:
			//uh oh! Your score is probably really high dude!
			break;
		}
		_delay_ms(1500);
		ledMode = LEDSOFF;
     fb6:	9d e0       	ldi	r25, 0x0D	; 13
     fb8:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <ledMode>
     fbc:	2f ef       	ldi	r18, 0xFF	; 255
     fbe:	34 e3       	ldi	r19, 0x34	; 52
     fc0:	4c e0       	ldi	r20, 0x0C	; 12
     fc2:	21 50       	subi	r18, 0x01	; 1
     fc4:	30 40       	sbci	r19, 0x00	; 0
     fc6:	40 40       	sbci	r20, 0x00	; 0
     fc8:	e1 f7       	brne	.-8      	; 0xfc2 <ReportScore+0x146>
     fca:	00 c0       	rjmp	.+0      	; 0xfcc <ReportScore+0x150>
     fcc:	00 00       	nop
		_delay_ms(500);
	}
	
	
	
	switch(ones)
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	8a 30       	cpi	r24, 0x0A	; 10
     fd2:	91 05       	cpc	r25, r1
     fd4:	60 f5       	brcc	.+88     	; 0x102e <ReportScore+0x1b2>
     fd6:	fc 01       	movw	r30, r24
     fd8:	e3 59       	subi	r30, 0x93	; 147
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__tablejump2__>
	{
		case 0:
		ledMode = DISPLAY0;
     fe0:	83 e0       	ldi	r24, 0x03	; 3
     fe2:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
		break;
     fe6:	23 c0       	rjmp	.+70     	; 0x102e <ReportScore+0x1b2>
		case 1:
		ledMode = DISPLAY1;
     fe8:	84 e0       	ldi	r24, 0x04	; 4
     fea:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
		break;
     fee:	1f c0       	rjmp	.+62     	; 0x102e <ReportScore+0x1b2>
		case 2:
		ledMode = DISPLAY2;
     ff0:	85 e0       	ldi	r24, 0x05	; 5
     ff2:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
		break;
     ff6:	1b c0       	rjmp	.+54     	; 0x102e <ReportScore+0x1b2>
		case 3:
		ledMode = DISPLAY3;
     ff8:	86 e0       	ldi	r24, 0x06	; 6
     ffa:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
		break;
     ffe:	17 c0       	rjmp	.+46     	; 0x102e <ReportScore+0x1b2>
		case 4:
		ledMode = DISPLAY4;
    1000:	87 e0       	ldi	r24, 0x07	; 7
    1002:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
		break;
    1006:	13 c0       	rjmp	.+38     	; 0x102e <ReportScore+0x1b2>
		case 5:
		ledMode	= DISPLAY5;
    1008:	88 e0       	ldi	r24, 0x08	; 8
    100a:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
		break;
    100e:	0f c0       	rjmp	.+30     	; 0x102e <ReportScore+0x1b2>
		case 6:
		ledMode = DISPLAY6;
    1010:	89 e0       	ldi	r24, 0x09	; 9
    1012:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
		break;
    1016:	0b c0       	rjmp	.+22     	; 0x102e <ReportScore+0x1b2>
		case 7:
		ledMode = DISPLAY7;
    1018:	8a e0       	ldi	r24, 0x0A	; 10
    101a:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
		break;
    101e:	07 c0       	rjmp	.+14     	; 0x102e <ReportScore+0x1b2>
		case 8:
		ledMode = DISPLAY8;
    1020:	8b e0       	ldi	r24, 0x0B	; 11
    1022:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
		break;
    1026:	03 c0       	rjmp	.+6      	; 0x102e <ReportScore+0x1b2>
		case 9:
		ledMode = DISPLAY9;
    1028:	8c e0       	ldi	r24, 0x0C	; 12
    102a:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
    102e:	8f ef       	ldi	r24, 0xFF	; 255
    1030:	9e e9       	ldi	r25, 0x9E	; 158
    1032:	24 e2       	ldi	r18, 0x24	; 36
    1034:	81 50       	subi	r24, 0x01	; 1
    1036:	90 40       	sbci	r25, 0x00	; 0
    1038:	20 40       	sbci	r18, 0x00	; 0
    103a:	e1 f7       	brne	.-8      	; 0x1034 <ReportScore+0x1b8>
    103c:	00 c0       	rjmp	.+0      	; 0x103e <ReportScore+0x1c2>
    103e:	00 00       	nop
		default:
		//uh oh! Your score is probably really high dude!
		break;
	}
	_delay_ms(1500);
	curLed = 0;
    1040:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <curLed>
	ledMode = NEWGAMEANIMATE;
    1044:	8e e0       	ldi	r24, 0x0E	; 14
    1046:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
	//ledMode = NORMALMODE;
}
    104a:	08 95       	ret
		}
		_delay_ms(1500);
		ledMode = LEDSOFF; 
		_delay_ms(500);
	}
	if(tens || hundreds)
    104c:	91 11       	cpse	r25, r1
    104e:	79 cf       	rjmp	.-270    	; 0xf42 <ReportScore+0xc6>
    1050:	be cf       	rjmp	.-132    	; 0xfce <ReportScore+0x152>
    1052:	3f ef       	ldi	r19, 0xFF	; 255
    1054:	4e e9       	ldi	r20, 0x9E	; 158
    1056:	24 e2       	ldi	r18, 0x24	; 36
    1058:	31 50       	subi	r19, 0x01	; 1
    105a:	40 40       	sbci	r20, 0x00	; 0
    105c:	20 40       	sbci	r18, 0x00	; 0
    105e:	e1 f7       	brne	.-8      	; 0x1058 <ReportScore+0x1dc>
    1060:	00 c0       	rjmp	.+0      	; 0x1062 <ReportScore+0x1e6>
    1062:	00 00       	nop
			default:
				//uh oh! Your score is probably really high dude!
				break;
		}
		_delay_ms(1500);
		ledMode = LEDSOFF; 
    1064:	2d e0       	ldi	r18, 0x0D	; 13
    1066:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <ledMode>
    106a:	3f ef       	ldi	r19, 0xFF	; 255
    106c:	44 e3       	ldi	r20, 0x34	; 52
    106e:	2c e0       	ldi	r18, 0x0C	; 12
    1070:	31 50       	subi	r19, 0x01	; 1
    1072:	40 40       	sbci	r20, 0x00	; 0
    1074:	20 40       	sbci	r18, 0x00	; 0
    1076:	e1 f7       	brne	.-8      	; 0x1070 <ReportScore+0x1f4>
    1078:	00 c0       	rjmp	.+0      	; 0x107a <ReportScore+0x1fe>
    107a:	00 00       	nop
		_delay_ms(500);
	}
	if(tens || hundreds)
    107c:	91 11       	cpse	r25, r1
    107e:	61 cf       	rjmp	.-318    	; 0xf42 <ReportScore+0xc6>
    1080:	6a cf       	rjmp	.-300    	; 0xf56 <ReportScore+0xda>

00001082 <NewGameAnimationNextLed>:
	NewGameAnimation();
	
}
void NewGameAnimationNextLed(void)
{
	if(6 > curLed)
    1082:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
    1086:	86 30       	cpi	r24, 0x06	; 6
    1088:	68 f4       	brcc	.+26     	; 0x10a4 <NewGameAnimationNextLed+0x22>
	{
		PORTB = BMASK;
    108a:	9f ef       	ldi	r25, 0xFF	; 255
    108c:	95 b9       	out	0x05, r25	; 5
		PORTC = CMASK&LED_BANKC_TAB[curLed];
    108e:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	e1 59       	subi	r30, 0x91	; 145
    1096:	fe 4f       	sbci	r31, 0xFE	; 254
    1098:	80 81       	ld	r24, Z
    109a:	8f 73       	andi	r24, 0x3F	; 63
    109c:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    109e:	9b b9       	out	0x0b, r25	; 11
		PORTE = EMASK;
    10a0:	87 e0       	ldi	r24, 0x07	; 7
    10a2:	8e b9       	out	0x0e, r24	; 14
	}
	if( (9 > curLed) && (6 <= curLed))	// 8 + 6
    10a4:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
    10a8:	86 50       	subi	r24, 0x06	; 6
    10aa:	83 30       	cpi	r24, 0x03	; 3
    10ac:	68 f4       	brcc	.+26     	; 0x10c8 <NewGameAnimationNextLed+0x46>
	{
		PORTB = BMASK;
    10ae:	8f ef       	ldi	r24, 0xFF	; 255
    10b0:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    10b2:	9f e3       	ldi	r25, 0x3F	; 63
    10b4:	98 b9       	out	0x08, r25	; 8
		PORTD = DMASK;
    10b6:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK&LED_BANKE_TAB[curLed - 6];
    10b8:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	e7 5a       	subi	r30, 0xA7	; 167
    10c0:	fe 4f       	sbci	r31, 0xFE	; 254
    10c2:	80 81       	ld	r24, Z
    10c4:	87 70       	andi	r24, 0x07	; 7
    10c6:	8e b9       	out	0x0e, r24	; 14
	}
	if( (17 > curLed) && (9 <= curLed))
    10c8:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
    10cc:	89 50       	subi	r24, 0x09	; 9
    10ce:	88 30       	cpi	r24, 0x08	; 8
    10d0:	68 f4       	brcc	.+26     	; 0x10ec <NewGameAnimationNextLed+0x6a>
	{
		PORTB = BMASK;
    10d2:	8f ef       	ldi	r24, 0xFF	; 255
    10d4:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    10d6:	8f e3       	ldi	r24, 0x3F	; 63
    10d8:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK&LED_BANKD_TAB[curLed - 9];
    10da:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	e2 5a       	subi	r30, 0xA2	; 162
    10e2:	fe 4f       	sbci	r31, 0xFE	; 254
    10e4:	80 81       	ld	r24, Z
    10e6:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    10e8:	87 e0       	ldi	r24, 0x07	; 7
    10ea:	8e b9       	out	0x0e, r24	; 14
	}
	if( (25 > curLed) && (17 <= curLed))
    10ec:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <curLed>
    10f0:	8f ee       	ldi	r24, 0xEF	; 239
    10f2:	8e 0f       	add	r24, r30
    10f4:	88 30       	cpi	r24, 0x08	; 8
    10f6:	58 f4       	brcc	.+22     	; 0x110e <NewGameAnimationNextLed+0x8c>
	{
		PORTB = BMASK&LED_BANKB_TAB[curLed - 17];
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	ea 59       	subi	r30, 0x9A	; 154
    10fc:	fe 4f       	sbci	r31, 0xFE	; 254
    10fe:	80 81       	ld	r24, Z
    1100:	85 b9       	out	0x05, r24	; 5
		PORTC = CMASK;
    1102:	8f e3       	ldi	r24, 0x3F	; 63
    1104:	88 b9       	out	0x08, r24	; 8
		PORTD = DMASK;
    1106:	8f ef       	ldi	r24, 0xFF	; 255
    1108:	8b b9       	out	0x0b, r24	; 11
		PORTE = EMASK;
    110a:	87 e0       	ldi	r24, 0x07	; 7
    110c:	8e b9       	out	0x0e, r24	; 14
	}
	curLed -= 1;
    110e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
    1112:	81 50       	subi	r24, 0x01	; 1
    1114:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <curLed>
	if(curLed > 22)
    1118:	87 31       	cpi	r24, 0x17	; 23
    111a:	48 f0       	brcs	.+18     	; 0x112e <NewGameAnimationNextLed+0xac>
	{
		curLed = 22;
    111c:	86 e1       	ldi	r24, 0x16	; 22
    111e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <curLed>
		wrappedAround++;
    1122:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end>
    1126:	8f 5f       	subi	r24, 0xFF	; 255
    1128:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__data_end>
    112c:	08 95       	ret
		
	}
	if((curLed == 0) && wrappedAround)
    112e:	81 11       	cpse	r24, r1
    1130:	0b c0       	rjmp	.+22     	; 0x1148 <NewGameAnimationNextLed+0xc6>
    1132:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end>
    1136:	88 23       	and	r24, r24
    1138:	39 f0       	breq	.+14     	; 0x1148 <NewGameAnimationNextLed+0xc6>
	{
		ledMode = NORMALMODE;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
		curLedWhenPressed = 0;
    1140:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <curLedWhenPressed>
		loopFlag = 1;
    1144:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <loopFlag>
    1148:	08 95       	ret

0000114a <NewGameAnimation>:


void NewGameAnimation(void)			// basically backwards NextLed() function!
{
	//curLed = 0;
	ClearLed();
    114a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ClearLed>
	ledMode = NEWGAMEANIMATE;
    114e:	8e e0       	ldi	r24, 0x0E	; 14
    1150:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
    1154:	08 95       	ret

00001156 <NewGame>:
void NewGame(void)					// Restore the game to starting conditions!
{	
	//loopFlag = 1;
	//curLed = 0;
	//curLedWhenPressed = 0;
	cScaler = 0;
    1156:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <cScaler>
	delayScaler = 0;
    115a:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <delayScaler+0x1>
    115e:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <delayScaler>
	ClearLed();
    1162:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ClearLed>
	cScaler = 0;
	delayScaler = 0;
	score = 0;
    1166:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <score>
	NewGameAnimation();
    116a:	0e 94 a5 08 	call	0x114a	; 0x114a <NewGameAnimation>
    116e:	08 95       	ret

00001170 <FlashX>:
	ledMode = NEWGAMEANIMATE;
}

void FlashX(void)
{
	ledMode = DISPLAYX;
    1170:	8f e0       	ldi	r24, 0x0F	; 15
    1172:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
    1176:	2f e7       	ldi	r18, 0x7F	; 127
    1178:	8f e4       	ldi	r24, 0x4F	; 79
    117a:	92 e1       	ldi	r25, 0x12	; 18
    117c:	21 50       	subi	r18, 0x01	; 1
    117e:	80 40       	sbci	r24, 0x00	; 0
    1180:	90 40       	sbci	r25, 0x00	; 0
    1182:	e1 f7       	brne	.-8      	; 0x117c <FlashX+0xc>
    1184:	00 c0       	rjmp	.+0      	; 0x1186 <FlashX+0x16>
    1186:	00 00       	nop
	_delay_ms(750);
	ledMode = LEDSOFF;
    1188:	8d e0       	ldi	r24, 0x0D	; 13
    118a:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
    118e:	2f e7       	ldi	r18, 0x7F	; 127
    1190:	8f e4       	ldi	r24, 0x4F	; 79
    1192:	92 e1       	ldi	r25, 0x12	; 18
    1194:	21 50       	subi	r18, 0x01	; 1
    1196:	80 40       	sbci	r24, 0x00	; 0
    1198:	90 40       	sbci	r25, 0x00	; 0
    119a:	e1 f7       	brne	.-8      	; 0x1194 <FlashX+0x24>
    119c:	00 c0       	rjmp	.+0      	; 0x119e <FlashX+0x2e>
    119e:	00 00       	nop
    11a0:	08 95       	ret

000011a2 <main>:
{
	uint8_t key_status0 = 0;
	//uint8_t key_status1 = 0;

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    11a2:	0e 94 a5 00 	call	0x14a	; 0x14a <atmel_start_init>
	init();
    11a6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <init>
	ledIntEnable();
    11aa:	0e 94 cf 00 	call	0x19e	; 0x19e <ledIntEnable>
const uint8_t	LED_BANKE_TAB[] = {	(EMASK&~(0b1<<0)),	(EMASK&~(0b1<<1)),	(EMASK&~(0b1<<2)),	(EMASK&~(0b1<<3)),	(EMASK&~(0b1<<4)),	(EMASK&~(0b1<<5)),	(EMASK&~(0b1<<6)),	(EMASK&~(0b1<<7))};


void ledIntSetup(void)
{
	OCR2B = 0xFF;				//Set Timer 0 INT B Compare Register value.
    11ae:	8f ef       	ldi	r24, 0xFF	; 255
    11b0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	atmel_start_init();
	init();
	ledIntEnable();
	ledIntSetup();
	/* Enable interrupts */
	cpu_irq_enable();
    11b4:	78 94       	sei
	
	NewGameAnimation();
    11b6:	0e 94 a5 08 	call	0x114a	; 0x114a <NewGameAnimation>
						//_delay_ms(750);
						//ledMode = LEDSOFF;
						//_delay_ms(750);
						FlashX();
						
						loopFlag = 1;
    11ba:	d1 e0       	ldi	r29, 0x01	; 1
					//ledMode = PAUSEDMODE;
					else if(TARGETLED == curLed)		// Target Hit!
					{
						score++;						// increment the player's score
						loopFlag = 1;					// set the loopFlag so that repeat touches are not processed
						curLedWhenPressed = curLed;		// store current led value for comparison later (to clear loopFlag lock)...
    11bc:	c2 e0       	ldi	r28, 0x02	; 2
	/** If any of the two self-capacitance buttons is touched, the LED is turned ON
	 * When touch is released, the LED is turned OFF
	 */
	while (1) {
		/* Does acquisition and post-processing */
		touch_process();
    11be:	0e 94 15 0a 	call	0x142a	; 0x142a <touch_process>
		if (measurement_done_touch == 1) {
    11c2:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <measurement_done_touch>
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	d1 f7       	brne	.-12     	; 0x11be <main+0x1c>
			measurement_done_touch = 0;
    11ca:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <measurement_done_touch>

			key_status0 = get_sensor_state(0) & 0x80;
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <get_sensor_state>
			}
			#endif
			
			#if(NumberTest == 0)
			{
				if ((0u != key_status0))
    11d6:	88 23       	and	r24, r24
    11d8:	94 f7       	brge	.-28     	; 0x11be <main+0x1c>
				{
					if(0 < loopFlag)
    11da:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <loopFlag>
    11de:	81 11       	cpse	r24, r1
    11e0:	ee cf       	rjmp	.-36     	; 0x11be <main+0x1c>
					{
						// Don't process touch!
					}
					
					//ledMode = PAUSEDMODE;
					else if(TARGETLED == curLed)		// Target Hit!
    11e2:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
    11e6:	82 30       	cpi	r24, 0x02	; 2
    11e8:	61 f4       	brne	.+24     	; 0x1202 <main+0x60>
					{
						score++;						// increment the player's score
    11ea:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <score>
    11ee:	8f 5f       	subi	r24, 0xFF	; 255
    11f0:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <score>
						loopFlag = 1;					// set the loopFlag so that repeat touches are not processed
    11f4:	d0 93 88 01 	sts	0x0188, r29	; 0x800188 <loopFlag>
						curLedWhenPressed = curLed;		// store current led value for comparison later (to clear loopFlag lock)...
    11f8:	c0 93 87 01 	sts	0x0187, r28	; 0x800187 <curLedWhenPressed>
						ledMode = 2;//PAUSEDMODE;		// Put game into paused mode, LED holds on Target LED.
    11fc:	c0 93 8b 01 	sts	0x018B, r28	; 0x80018b <ledMode>
    1200:	de cf       	rjmp	.-68     	; 0x11be <main+0x1c>
					{	
						//ledMode = DISPLAYX;
						//_delay_ms(750);
						//ledMode = LEDSOFF;
						//_delay_ms(750);
						FlashX();
    1202:	0e 94 b8 08 	call	0x1170	; 0x1170 <FlashX>
						
						loopFlag = 1;
    1206:	d0 93 88 01 	sts	0x0188, r29	; 0x800188 <loopFlag>
						curLedWhenPressed = curLed;
    120a:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <curLed>
    120e:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <curLedWhenPressed>
						ReportScore(score);				// Run the Score Report routine
    1212:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <score>
    1216:	0e 94 3e 07 	call	0xe7c	; 0xe7c <ReportScore>
						NewGame();
    121a:	0e 94 ab 08 	call	0x1156	; 0x1156 <NewGame>
    121e:	cf cf       	rjmp	.-98     	; 0x11be <main+0x1c>

00001220 <__vector_15>:
		}
	}
}

ISR (TIMER0_COMPB_vect)
{
    1220:	1f 92       	push	r1
    1222:	0f 92       	push	r0
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	0f 92       	push	r0
    1228:	11 24       	eor	r1, r1
    122a:	2f 93       	push	r18
    122c:	3f 93       	push	r19
    122e:	4f 93       	push	r20
    1230:	5f 93       	push	r21
    1232:	6f 93       	push	r22
    1234:	7f 93       	push	r23
    1236:	8f 93       	push	r24
    1238:	9f 93       	push	r25
    123a:	af 93       	push	r26
    123c:	bf 93       	push	r27
    123e:	ef 93       	push	r30
    1240:	ff 93       	push	r31
	switch(ledMode)
    1242:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <ledMode>
    1246:	8e 2f       	mov	r24, r30
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	fc 01       	movw	r30, r24
    124c:	31 97       	sbiw	r30, 0x01	; 1
    124e:	ef 30       	cpi	r30, 0x0F	; 15
    1250:	f1 05       	cpc	r31, r1
    1252:	08 f0       	brcs	.+2      	; 0x1256 <__vector_15+0x36>
    1254:	57 c0       	rjmp	.+174    	; 0x1304 <__vector_15+0xe4>
    1256:	e9 58       	subi	r30, 0x89	; 137
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__tablejump2__>
	{
		case 1://NORMALMODE
			if(GAME_SPEED == cScaler)	//150 for visual test
    125e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <cScaler>
    1262:	8a 35       	cpi	r24, 0x5A	; 90
    1264:	21 f4       	brne	.+8      	; 0x126e <__vector_15+0x4e>
			{
				NextLed();
    1266:	0e 94 fe 00 	call	0x1fc	; 0x1fc <NextLed>
				cScaler = 0;
    126a:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <cScaler>
			}
			cScaler++;
    126e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <cScaler>
    1272:	8f 5f       	subi	r24, 0xFF	; 255
    1274:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <cScaler>
			break;
    1278:	45 c0       	rjmp	.+138    	; 0x1304 <__vector_15+0xe4>
		
		case 2://PAUSEDMODE:
			delayScaler++;
    127a:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <delayScaler>
    127e:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <delayScaler+0x1>
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <delayScaler+0x1>
    1288:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <delayScaler>
			if(DELAY_SPEED == delayScaler)
    128c:	88 3e       	cpi	r24, 0xE8	; 232
    128e:	93 40       	sbci	r25, 0x03	; 3
    1290:	c9 f5       	brne	.+114    	; 0x1304 <__vector_15+0xe4>
			{
				ledMode = 1;//NORMALMODE;
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ledMode>
				delayScaler = 0;
    1298:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <delayScaler+0x1>
    129c:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <delayScaler>
    12a0:	31 c0       	rjmp	.+98     	; 0x1304 <__vector_15+0xe4>
			}
			break;
		
		case DISPLAY0:
			Next0();
    12a2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <Next0>
				ledMode = NORMALMODE;
				score = 0;
				delayScaler = 0;	
			}
			*/
			break;
    12a6:	2e c0       	rjmp	.+92     	; 0x1304 <__vector_15+0xe4>
		
		case DISPLAY1:
			Next1();
    12a8:	0e 94 02 02 	call	0x404	; 0x404 <Next1>
				ledMode = NORMALMODE;
				score = 0;
				delayScaler = 0;
			}
			*/
			break;
    12ac:	2b c0       	rjmp	.+86     	; 0x1304 <__vector_15+0xe4>
		
		case DISPLAY2:
			Next2();
    12ae:	0e 94 54 02 	call	0x4a8	; 0x4a8 <Next2>
				ledMode = NORMALMODE;
				score = 0;
				delayScaler = 0;
			}
			*/
			break;
    12b2:	28 c0       	rjmp	.+80     	; 0x1304 <__vector_15+0xe4>
		
		case DISPLAY3:
			Next3();
    12b4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <Next3>
			
			break;
    12b8:	25 c0       	rjmp	.+74     	; 0x1304 <__vector_15+0xe4>
		
		case DISPLAY4:
			Next4();
    12ba:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Next4>
				ledMode = NORMALMODE;
				score = 0;
				delayScaler = 0;
			}
			*/
			break;
    12be:	22 c0       	rjmp	.+68     	; 0x1304 <__vector_15+0xe4>
		
		case DISPLAY5:
			Next5();
    12c0:	0e 94 ce 03 	call	0x79c	; 0x79c <Next5>
				ledMode = NORMALMODE;
				score = 0;
				delayScaler = 0;
			}
			*/
			break;
    12c4:	1f c0       	rjmp	.+62     	; 0x1304 <__vector_15+0xe4>
		
		case DISPLAY6:
			Next6();
    12c6:	0e 94 42 04 	call	0x884	; 0x884 <Next6>
				ledMode = NORMALMODE;
				score = 0;
				delayScaler = 0;
			}
			*/
			break;
    12ca:	1c c0       	rjmp	.+56     	; 0x1304 <__vector_15+0xe4>
			
		case DISPLAY7:
			Next7();
    12cc:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Next7>
				ledMode = NORMALMODE;
				score = 0;
				delayScaler = 0;
			}
			*/
			break;
    12d0:	19 c0       	rjmp	.+50     	; 0x1304 <__vector_15+0xe4>
			
		case DISPLAY8:
			Next8();
    12d2:	0e 94 37 05 	call	0xa6e	; 0xa6e <Next8>
				ledMode = NORMALMODE;
				score = 0;
				delayScaler = 0;
			}
			*/
			break;
    12d6:	16 c0       	rjmp	.+44     	; 0x1304 <__vector_15+0xe4>
			
		case DISPLAY9:
			Next9();
    12d8:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <Next9>
				ledMode = NORMALMODE;
				score = 0;
				delayScaler = 0;
			}
			*/
			break;
    12dc:	13 c0       	rjmp	.+38     	; 0x1304 <__vector_15+0xe4>
		
		case LEDSOFF:
			NoLeds();
    12de:	0e 94 36 07 	call	0xe6c	; 0xe6c <NoLeds>
			//{
			//	ledMode = NORMALMODE;
			//	score = 0;
			//	delayScaler = 0;
			//}
			break;
    12e2:	10 c0       	rjmp	.+32     	; 0x1304 <__vector_15+0xe4>
			
		case NEWGAMEANIMATE:
			//NewGameAnimationNextLed();
			if(ANIMATION_SPEED == cScaler)	//150 for visual test
    12e4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <cScaler>
    12e8:	8e 31       	cpi	r24, 0x1E	; 30
    12ea:	21 f4       	brne	.+8      	; 0x12f4 <__vector_15+0xd4>
			{
				NewGameAnimationNextLed();
    12ec:	0e 94 41 08 	call	0x1082	; 0x1082 <NewGameAnimationNextLed>
				cScaler = 0;
    12f0:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <cScaler>
			}
			cScaler++;
    12f4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <cScaler>
    12f8:	8f 5f       	subi	r24, 0xFF	; 255
    12fa:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <cScaler>
			
			break;
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <__vector_15+0xe4>
			
		case DISPLAYX:
			//delayScaler++;
			NextX();
    1300:	0e 94 83 06 	call	0xd06	; 0xd06 <NextX>
		default:
			//uhoh brother you don't belong in this town
		
		break;
	}
    1304:	ff 91       	pop	r31
    1306:	ef 91       	pop	r30
    1308:	bf 91       	pop	r27
    130a:	af 91       	pop	r26
    130c:	9f 91       	pop	r25
    130e:	8f 91       	pop	r24
    1310:	7f 91       	pop	r23
    1312:	6f 91       	pop	r22
    1314:	5f 91       	pop	r21
    1316:	4f 91       	pop	r20
    1318:	3f 91       	pop	r19
    131a:	2f 91       	pop	r18
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	0f 90       	pop	r0
    1322:	1f 90       	pop	r1
    1324:	18 95       	reti

00001326 <qtm_measure_complete_callback>:
{
	/* Calibrate Node */
	qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
	/* Initialize key */
	qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
}
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <touch_postprocess_request>
    132c:	08 95       	ret

0000132e <qtm_post_process_complete>:
    132e:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <qtlib_key_set1>
    1332:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <qtlib_key_set1+0x1>
    1336:	80 81       	ld	r24, Z
    1338:	88 23       	and	r24, r24
    133a:	44 f4       	brge	.+16     	; 0x134c <qtm_post_process_complete+0x1e>
    133c:	e0 91 bf 01 	lds	r30, 0x01BF	; 0x8001bf <p_qtm_control>
    1340:	f0 91 c0 01 	lds	r31, 0x01C0	; 0x8001c0 <p_qtm_control+0x1>
    1344:	80 81       	ld	r24, Z
    1346:	84 60       	ori	r24, 0x04	; 4
    1348:	80 83       	st	Z, r24
    134a:	08 95       	ret
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <measurement_done_touch>
    1352:	08 95       	ret

00001354 <qtm_error_callback>:
    1354:	88 23       	and	r24, r24
    1356:	24 f4       	brge	.+8      	; 0x1360 <qtm_error_callback+0xc>
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <module_error_code>
    135e:	08 95       	ret
    1360:	86 fd       	sbrc	r24, 6
    1362:	03 c0       	rjmp	.+6      	; 0x136a <qtm_error_callback+0x16>
    1364:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <module_error_code>
    1368:	08 95       	ret
    136a:	8f 70       	andi	r24, 0x0F	; 15
    136c:	8e 5f       	subi	r24, 0xFE	; 254
    136e:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <module_error_code>
    1372:	08 95       	ret

00001374 <init_complete_callback>:
    1374:	8d eb       	ldi	r24, 0xBD	; 189
    1376:	91 e0       	ldi	r25, 0x01	; 1
    1378:	0e 94 e6 14 	call	0x29cc	; 0x29cc <qtm_ptc_qtlib_assign_signal_memory>
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	8a e4       	ldi	r24, 0x4A	; 74
    1382:	91 e0       	ldi	r25, 0x01	; 1
    1384:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <qtm_enable_sensor_node>
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	8a e4       	ldi	r24, 0x4A	; 74
    138e:	91 e0       	ldi	r25, 0x01	; 1
    1390:	0e 94 08 16 	call	0x2c10	; 0x2c10 <qtm_calibrate_sensor_node>
    1394:	48 eb       	ldi	r20, 0xB8	; 184
    1396:	51 e0       	ldi	r21, 0x01	; 1
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	8c e1       	ldi	r24, 0x1C	; 28
    139c:	91 e0       	ldi	r25, 0x01	; 1
    139e:	0e 94 3f 0b 	call	0x167e	; 0x167e <qtm_init_sensor_key>
    13a2:	08 95       	ret

000013a4 <touch_init>:
    13a4:	88 e0       	ldi	r24, 0x08	; 8
    13a6:	87 bd       	out	0x27, r24	; 39
    13a8:	e5 e6       	ldi	r30, 0x65	; 101
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	8f 7e       	andi	r24, 0xEF	; 239
    13b0:	80 83       	st	Z, r24
    13b2:	73 98       	cbi	0x0e, 3	; 14
    13b4:	e1 ec       	ldi	r30, 0xC1	; 193
    13b6:	f1 e0       	ldi	r31, 0x01	; 1
    13b8:	10 82       	st	Z, r1
    13ba:	88 e1       	ldi	r24, 0x18	; 24
    13bc:	91 e0       	ldi	r25, 0x01	; 1
    13be:	92 83       	std	Z+2, r25	; 0x02
    13c0:	81 83       	std	Z+1, r24	; 0x01
    13c2:	82 e1       	ldi	r24, 0x12	; 18
    13c4:	91 e0       	ldi	r25, 0x01	; 1
    13c6:	94 83       	std	Z+4, r25	; 0x04
    13c8:	83 83       	std	Z+3, r24	; 0x03
    13ca:	8a e0       	ldi	r24, 0x0A	; 10
    13cc:	91 e0       	ldi	r25, 0x01	; 1
    13ce:	96 83       	std	Z+6, r25	; 0x06
    13d0:	85 83       	std	Z+5, r24	; 0x05
    13d2:	8e e0       	ldi	r24, 0x0E	; 14
    13d4:	91 e0       	ldi	r25, 0x01	; 1
    13d6:	90 87       	std	Z+8, r25	; 0x08
    13d8:	87 83       	std	Z+7, r24	; 0x07
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	91 e0       	ldi	r25, 0x01	; 1
    13de:	92 87       	std	Z+10, r25	; 0x0a
    13e0:	81 87       	std	Z+9, r24	; 0x09
    13e2:	86 e0       	ldi	r24, 0x06	; 6
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	94 87       	std	Z+12, r25	; 0x0c
    13e8:	83 87       	std	Z+11, r24	; 0x0b
    13ea:	88 ef       	ldi	r24, 0xF8	; 248
    13ec:	92 e1       	ldi	r25, 0x12	; 18
    13ee:	96 87       	std	Z+14, r25	; 0x0e
    13f0:	85 87       	std	Z+13, r24	; 0x0d
    13f2:	8a eb       	ldi	r24, 0xBA	; 186
    13f4:	99 e0       	ldi	r25, 0x09	; 9
    13f6:	90 8b       	std	Z+16, r25	; 0x10
    13f8:	87 87       	std	Z+15, r24	; 0x0f
    13fa:	8a ea       	ldi	r24, 0xAA	; 170
    13fc:	99 e0       	ldi	r25, 0x09	; 9
    13fe:	92 8b       	std	Z+18, r25	; 0x12
    1400:	81 8b       	std	Z+17, r24	; 0x11
    1402:	83 e9       	ldi	r24, 0x93	; 147
    1404:	99 e0       	ldi	r25, 0x09	; 9
    1406:	94 8b       	std	Z+20, r25	; 0x14
    1408:	83 8b       	std	Z+19, r24	; 0x13
    140a:	16 8a       	std	Z+22, r1	; 0x16
    140c:	15 8a       	std	Z+21, r1	; 0x15
    140e:	87 e9       	ldi	r24, 0x97	; 151
    1410:	99 e0       	ldi	r25, 0x09	; 9
    1412:	90 8f       	std	Z+24, r25	; 0x18
    1414:	87 8b       	std	Z+23, r24	; 0x17
    1416:	cf 01       	movw	r24, r30
    1418:	0e 94 bf 10 	call	0x217e	; 0x217e <qtm_binding_layer_init>
    141c:	0e 94 ba 10 	call	0x2174	; 0x2174 <qmt_get_binding_layer_ptr>
    1420:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <p_qtm_control+0x1>
    1424:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <p_qtm_control>
    1428:	08 95       	ret

0000142a <touch_process>:
    142a:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <time_to_measure_touch_flag>
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	39 f4       	brne	.+14     	; 0x1440 <touch_process+0x16>
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	0e 94 1e 11 	call	0x223c	; 0x223c <qtm_lib_start_acquisition>
    1438:	81 11       	cpse	r24, r1
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <touch_process+0x16>
    143c:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <time_to_measure_touch_flag>
    1440:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <touch_postprocess_request>
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	c9 f4       	brne	.+50     	; 0x147a <touch_process+0x50>
    1448:	0e 94 6e 11 	call	0x22dc	; 0x22dc <qtm_lib_acq_process>
    144c:	81 11       	cpse	r24, r1
    144e:	03 c0       	rjmp	.+6      	; 0x1456 <touch_process+0x2c>
    1450:	0e 94 76 11 	call	0x22ec	; 0x22ec <qtm_lib_post_process>
    1454:	03 c0       	rjmp	.+6      	; 0x145c <touch_process+0x32>
    1456:	80 e8       	ldi	r24, 0x80	; 128
    1458:	0e 94 aa 09 	call	0x1354	; 0x1354 <qtm_error_callback>
    145c:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <touch_postprocess_request>
    1460:	e0 91 bf 01 	lds	r30, 0x01BF	; 0x8001bf <p_qtm_control>
    1464:	f0 91 c0 01 	lds	r31, 0x01C0	; 0x8001c0 <p_qtm_control+0x1>
    1468:	80 81       	ld	r24, Z
    146a:	82 ff       	sbrs	r24, 2
    146c:	06 c0       	rjmp	.+12     	; 0x147a <touch_process+0x50>
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <time_to_measure_touch_flag>
    1474:	80 81       	ld	r24, Z
    1476:	8b 7f       	andi	r24, 0xFB	; 251
    1478:	80 83       	st	Z, r24
    147a:	08 95       	ret

0000147c <touch_timer_handler>:
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <time_to_measure_touch_flag>
    1482:	84 e1       	ldi	r24, 0x14	; 20
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	0e 94 34 0b 	call	0x1668	; 0x1668 <qtm_update_qtlib_timer>
    148a:	08 95       	ret

0000148c <mega_touch_timer>:
    148c:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <touch_time_counter.2416>
    1490:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <touch_time_counter.2416+0x1>
    1494:	44 97       	sbiw	r24, 0x14	; 20
    1496:	39 f4       	brne	.+14     	; 0x14a6 <mega_touch_timer+0x1a>
    1498:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <touch_time_counter.2416+0x1>
    149c:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <touch_time_counter.2416>
    14a0:	0e 94 3e 0a 	call	0x147c	; 0x147c <touch_timer_handler>
    14a4:	08 95       	ret
    14a6:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <touch_time_counter.2416>
    14aa:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <touch_time_counter.2416+0x1>
    14ae:	01 96       	adiw	r24, 0x01	; 1
    14b0:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <touch_time_counter.2416+0x1>
    14b4:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <touch_time_counter.2416>
    14b8:	08 95       	ret

000014ba <get_sensor_state>:
    14ba:	9c 01       	movw	r18, r24
    14bc:	22 0f       	add	r18, r18
    14be:	33 1f       	adc	r19, r19
    14c0:	82 0f       	add	r24, r18
    14c2:	93 1f       	adc	r25, r19
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <qtlib_key_set1+0x4>
    14cc:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <qtlib_key_set1+0x5>
    14d0:	e8 0f       	add	r30, r24
    14d2:	f9 1f       	adc	r31, r25
    14d4:	80 81       	ld	r24, Z
    14d6:	08 95       	ret

000014d8 <__vector_37>:
Input  : none
Output : none
Notes  : none
============================================================================*/
ISR(PTC_EOC_vect)
{
    14d8:	1f 92       	push	r1
    14da:	0f 92       	push	r0
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	0f 92       	push	r0
    14e0:	11 24       	eor	r1, r1
    14e2:	2f 93       	push	r18
    14e4:	3f 93       	push	r19
    14e6:	4f 93       	push	r20
    14e8:	5f 93       	push	r21
    14ea:	6f 93       	push	r22
    14ec:	7f 93       	push	r23
    14ee:	8f 93       	push	r24
    14f0:	9f 93       	push	r25
    14f2:	af 93       	push	r26
    14f4:	bf 93       	push	r27
    14f6:	ef 93       	push	r30
    14f8:	ff 93       	push	r31
	qtm_m328pb_ptc_handler_eoc();
    14fa:	0e 94 48 16 	call	0x2c90	; 0x2c90 <qtm_m328pb_ptc_handler_eoc>
}
    14fe:	ff 91       	pop	r31
    1500:	ef 91       	pop	r30
    1502:	bf 91       	pop	r27
    1504:	af 91       	pop	r26
    1506:	9f 91       	pop	r25
    1508:	8f 91       	pop	r24
    150a:	7f 91       	pop	r23
    150c:	6f 91       	pop	r22
    150e:	5f 91       	pop	r21
    1510:	4f 91       	pop	r20
    1512:	3f 91       	pop	r19
    1514:	2f 91       	pop	r18
    1516:	0f 90       	pop	r0
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	0f 90       	pop	r0
    151c:	1f 90       	pop	r1
    151e:	18 95       	reti

00001520 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
    1520:	8d e3       	ldi	r24, 0x3D	; 61
    1522:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f8065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
    1526:	8f ef       	ldi	r24, 0xFF	; 255
    1528:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
    152c:	94 b1       	in	r25, 0x04	; 4
    152e:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
    1530:	95 b1       	in	r25, 0x05	; 5
    1532:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
    1534:	97 b1       	in	r25, 0x07	; 7
    1536:	90 78       	andi	r25, 0x80	; 128
    1538:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
    153a:	98 b1       	in	r25, 0x08	; 8
    153c:	9f 67       	ori	r25, 0x7F	; 127
    153e:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
    1540:	9a b1       	in	r25, 0x0a	; 10
    1542:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
    1544:	9b b1       	in	r25, 0x0b	; 11
    1546:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
    1548:	8d b1       	in	r24, 0x0d	; 13
    154a:	80 7f       	andi	r24, 0xF0	; 240
    154c:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
    154e:	8e b1       	in	r24, 0x0e	; 14
    1550:	8f 60       	ori	r24, 0x0F	; 15
    1552:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
    1554:	40 e0       	ldi	r20, 0x00	; 0
    1556:	60 e8       	ldi	r22, 0x80	; 128
    1558:	81 e6       	ldi	r24, 0x61	; 97
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 b7 0a 	call	0x156e	; 0x156e <protected_write_io>

	SMCR = (0 << SM2) | (1 << SM1) | (1 << SM0) | // Power Save
    1560:	86 e0       	ldi	r24, 0x06	; 6
    1562:	83 bf       	out	0x33, r24	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
    1564:	15 be       	out	0x35, r1	; 53

	ENABLE_INTERRUPTS();
    1566:	78 94       	sei
#include <system.h>

void Timer_initialization(void)
{

	Timer_init();
    1568:	0e 94 be 0a 	call	0x157c	; 0x157c <Timer_init>
    156c:	08 95       	ret

0000156e <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
    156e:	2f b7       	in	r18, 0x3f	; 63
	cli
    1570:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
    1572:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
    1574:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
    1576:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
    1578:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
    157a:	08 95       	ret

0000157c <Timer_init>:
 */
int8_t Timer_init()
{

	/* Enable TC0 */
	PRR0 &= ~(1 << PRTIM0);
    157c:	e4 e6       	ldi	r30, 0x64	; 100
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	8f 7d       	andi	r24, 0xDF	; 223
    1584:	80 83       	st	Z, r24

	TCCR0A = (0 << COM0A1) | (0 << COM0A0)   /* Normal port operation, OCA disconnected */
    1586:	82 e0       	ldi	r24, 0x02	; 2
    1588:	84 bd       	out	0x24, r24	; 36
	         | (0 << COM0B1) | (0 << COM0B0) /* Normal port operation, OCB disconnected */
	         | (1 << WGM01) | (0 << WGM00);  /* TC8 Mode 2 CTC */

	TCCR0B = 0                                          /* TC8 Mode 2 CTC */
    158a:	95 e0       	ldi	r25, 0x05	; 5
    158c:	95 bd       	out	0x25, r25	; 37
			 | (1 << CS02) | (0 << CS01) | (1 << CS00); /* IO clock divided by 1024 */
			
	TIMSK0 = 0 << OCIE0B   /* Output Compare B Match Interrupt Enable: disabled */
    158e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	// GTCCR = 0 << TSM /* Timer/Counter Synchronization Mode: disabled */
	//		 | 0 << PSRASY /* Prescaler Reset Timer/Counter2: disabled */
	//		 | 0 << PSRSYNC; /* Prescaler Reset: disabled */

	return 0;
}
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	08 95       	ret

00001596 <check_for_aks_block>:
    1596:	cf 92       	push	r12
    1598:	df 92       	push	r13
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	ec 01       	movw	r28, r24
    15a6:	ae 81       	ldd	r26, Y+6	; 0x06
    15a8:	bf 81       	ldd	r27, Y+7	; 0x07
    15aa:	eb 01       	movw	r28, r22
    15ac:	cc 0f       	add	r28, r28
    15ae:	dd 1f       	adc	r29, r29
    15b0:	c6 0f       	add	r28, r22
    15b2:	d7 1f       	adc	r29, r23
    15b4:	ca 0f       	add	r28, r26
    15b6:	db 1f       	adc	r29, r27
    15b8:	fa 80       	ldd	r15, Y+2	; 0x02
    15ba:	fc 01       	movw	r30, r24
    15bc:	44 81       	ldd	r20, Z+4	; 0x04
    15be:	55 81       	ldd	r21, Z+5	; 0x05
    15c0:	e6 e0       	ldi	r30, 0x06	; 6
    15c2:	e6 9f       	mul	r30, r22
    15c4:	90 01       	movw	r18, r0
    15c6:	e7 9f       	mul	r30, r23
    15c8:	30 0d       	add	r19, r0
    15ca:	11 24       	eor	r1, r1
    15cc:	8a 01       	movw	r16, r20
    15ce:	02 0f       	add	r16, r18
    15d0:	13 1f       	adc	r17, r19
    15d2:	f8 01       	movw	r30, r16
    15d4:	22 81       	ldd	r18, Z+2	; 0x02
    15d6:	33 81       	ldd	r19, Z+3	; 0x03
    15d8:	f9 01       	movw	r30, r18
    15da:	21 81       	ldd	r18, Z+1	; 0x01
    15dc:	32 81       	ldd	r19, Z+2	; 0x02
    15de:	f8 01       	movw	r30, r16
    15e0:	04 81       	ldd	r16, Z+4	; 0x04
    15e2:	15 81       	ldd	r17, Z+5	; 0x05
    15e4:	20 1b       	sub	r18, r16
    15e6:	31 0b       	sbc	r19, r17
    15e8:	e8 81       	ld	r30, Y
    15ea:	2e 1b       	sub	r18, r30
    15ec:	31 09       	sbc	r19, r1
    15ee:	ec 01       	movw	r28, r24
    15f0:	ea 81       	ldd	r30, Y+2	; 0x02
    15f2:	fb 81       	ldd	r31, Y+3	; 0x03
    15f4:	00 81       	ld	r16, Z
    15f6:	11 81       	ldd	r17, Z+1	; 0x01
    15f8:	fa 01       	movw	r30, r20
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	50 e0       	ldi	r21, 0x00	; 0
    15fe:	40 17       	cp	r20, r16
    1600:	51 07       	cpc	r21, r17
    1602:	39 f1       	breq	.+78     	; 0x1652 <check_for_aks_block+0xbc>
    1604:	46 17       	cp	r20, r22
    1606:	57 07       	cpc	r21, r23
    1608:	f9 f0       	breq	.+62     	; 0x1648 <check_for_aks_block+0xb2>
    160a:	12 96       	adiw	r26, 0x02	; 2
    160c:	8c 91       	ld	r24, X
    160e:	12 97       	sbiw	r26, 0x02	; 2
    1610:	f8 12       	cpse	r15, r24
    1612:	1a c0       	rjmp	.+52     	; 0x1648 <check_for_aks_block+0xb2>
    1614:	80 81       	ld	r24, Z
    1616:	85 58       	subi	r24, 0x85	; 133
    1618:	82 30       	cpi	r24, 0x02	; 2
    161a:	e8 f0       	brcs	.+58     	; 0x1656 <check_for_aks_block+0xc0>
    161c:	c4 80       	ldd	r12, Z+4	; 0x04
    161e:	d5 80       	ldd	r13, Z+5	; 0x05
    1620:	82 81       	ldd	r24, Z+2	; 0x02
    1622:	93 81       	ldd	r25, Z+3	; 0x03
    1624:	ec 01       	movw	r28, r24
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	9a 81       	ldd	r25, Y+2	; 0x02
    162a:	c8 16       	cp	r12, r24
    162c:	d9 06       	cpc	r13, r25
    162e:	60 f4       	brcc	.+24     	; 0x1648 <check_for_aks_block+0xb2>
    1630:	8c 19       	sub	r24, r12
    1632:	9d 09       	sbc	r25, r13
    1634:	cc 91       	ld	r28, X
    1636:	d0 e0       	ldi	r29, 0x00	; 0
    1638:	c8 17       	cp	r28, r24
    163a:	d9 07       	cpc	r29, r25
    163c:	28 f4       	brcc	.+10     	; 0x1648 <check_for_aks_block+0xb2>
    163e:	8c 1b       	sub	r24, r28
    1640:	9d 0b       	sbc	r25, r29
    1642:	28 17       	cp	r18, r24
    1644:	39 07       	cpc	r19, r25
    1646:	38 f0       	brcs	.+14     	; 0x1656 <check_for_aks_block+0xc0>
    1648:	4f 5f       	subi	r20, 0xFF	; 255
    164a:	5f 4f       	sbci	r21, 0xFF	; 255
    164c:	13 96       	adiw	r26, 0x03	; 3
    164e:	36 96       	adiw	r30, 0x06	; 6
    1650:	d6 cf       	rjmp	.-84     	; 0x15fe <check_for_aks_block+0x68>
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	01 c0       	rjmp	.+2      	; 0x1658 <check_for_aks_block+0xc2>
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	ff 90       	pop	r15
    1662:	df 90       	pop	r13
    1664:	cf 90       	pop	r12
    1666:	08 95       	ret

00001668 <qtm_update_qtlib_timer>:
    1668:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <qtm_local_ms_timecount>
    166c:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <qtm_local_ms_timecount+0x1>
    1670:	82 0f       	add	r24, r18
    1672:	93 1f       	adc	r25, r19
    1674:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <qtm_local_ms_timecount+0x1>
    1678:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <qtm_local_ms_timecount>
    167c:	08 95       	ret

0000167e <qtm_init_sensor_key>:
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	d9 f0       	breq	.+54     	; 0x16b8 <qtm_init_sensor_key+0x3a>
    1682:	41 15       	cp	r20, r1
    1684:	51 05       	cpc	r21, r1
    1686:	c1 f0       	breq	.+48     	; 0x16b8 <qtm_init_sensor_key+0x3a>
    1688:	26 e0       	ldi	r18, 0x06	; 6
    168a:	62 9f       	mul	r22, r18
    168c:	b0 01       	movw	r22, r0
    168e:	11 24       	eor	r1, r1
    1690:	dc 01       	movw	r26, r24
    1692:	14 96       	adiw	r26, 0x04	; 4
    1694:	ed 91       	ld	r30, X+
    1696:	fc 91       	ld	r31, X
    1698:	15 97       	sbiw	r26, 0x05	; 5
    169a:	e6 0f       	add	r30, r22
    169c:	f7 1f       	adc	r31, r23
    169e:	21 e0       	ldi	r18, 0x01	; 1
    16a0:	20 83       	st	Z, r18
    16a2:	14 96       	adiw	r26, 0x04	; 4
    16a4:	8d 91       	ld	r24, X+
    16a6:	9c 91       	ld	r25, X
    16a8:	15 97       	sbiw	r26, 0x05	; 5
    16aa:	fc 01       	movw	r30, r24
    16ac:	e6 0f       	add	r30, r22
    16ae:	f7 1f       	adc	r31, r23
    16b0:	53 83       	std	Z+3, r21	; 0x03
    16b2:	42 83       	std	Z+2, r20	; 0x02
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	08 95       	ret
    16b8:	8b e0       	ldi	r24, 0x0B	; 11
    16ba:	08 95       	ret

000016bc <qtm_key_sensors_process>:
    16bc:	2f 92       	push	r2
    16be:	3f 92       	push	r3
    16c0:	4f 92       	push	r4
    16c2:	5f 92       	push	r5
    16c4:	6f 92       	push	r6
    16c6:	7f 92       	push	r7
    16c8:	8f 92       	push	r8
    16ca:	9f 92       	push	r9
    16cc:	af 92       	push	r10
    16ce:	bf 92       	push	r11
    16d0:	cf 92       	push	r12
    16d2:	df 92       	push	r13
    16d4:	ef 92       	push	r14
    16d6:	ff 92       	push	r15
    16d8:	0f 93       	push	r16
    16da:	1f 93       	push	r17
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <qtm_key_sensors_process+0x2a>
    16e4:	7d c3       	rjmp	.+1786   	; 0x1de0 <qtm_key_sensors_process+0x724>
    16e6:	ec 01       	movw	r28, r24
    16e8:	a1 2c       	mov	r10, r1
    16ea:	b1 2c       	mov	r11, r1
    16ec:	81 2c       	mov	r8, r1
    16ee:	91 2c       	mov	r9, r1
    16f0:	21 2c       	mov	r2, r1
    16f2:	d1 2c       	mov	r13, r1
    16f4:	33 e0       	ldi	r19, 0x03	; 3
    16f6:	c3 2e       	mov	r12, r19
    16f8:	45 e8       	ldi	r20, 0x85	; 133
    16fa:	64 2e       	mov	r6, r20
    16fc:	56 e8       	ldi	r21, 0x86	; 134
    16fe:	75 2e       	mov	r7, r21
    1700:	67 e0       	ldi	r22, 0x07	; 7
    1702:	36 2e       	mov	r3, r22
    1704:	72 e0       	ldi	r23, 0x02	; 2
    1706:	47 2e       	mov	r4, r23
    1708:	e8 e0       	ldi	r30, 0x08	; 8
    170a:	5e 2e       	mov	r5, r30
    170c:	ea 81       	ldd	r30, Y+2	; 0x02
    170e:	fb 81       	ldd	r31, Y+3	; 0x03
    1710:	80 81       	ld	r24, Z
    1712:	91 81       	ldd	r25, Z+1	; 0x01
    1714:	88 16       	cp	r8, r24
    1716:	99 06       	cpc	r9, r25
    1718:	08 f0       	brcs	.+2      	; 0x171c <qtm_key_sensors_process+0x60>
    171a:	a5 c1       	rjmp	.+842    	; 0x1a66 <qtm_key_sensors_process+0x3aa>
    171c:	75 01       	movw	r14, r10
    171e:	ee 0c       	add	r14, r14
    1720:	ff 1c       	adc	r15, r15
    1722:	0c 81       	ldd	r16, Y+4	; 0x04
    1724:	1d 81       	ldd	r17, Y+5	; 0x05
    1726:	0e 0d       	add	r16, r14
    1728:	1f 1d       	adc	r17, r15
    172a:	d8 01       	movw	r26, r16
    172c:	8c 91       	ld	r24, X
    172e:	84 30       	cpi	r24, 0x04	; 4
    1730:	09 f4       	brne	.+2      	; 0x1734 <qtm_key_sensors_process+0x78>
    1732:	a2 c0       	rjmp	.+324    	; 0x1878 <qtm_key_sensors_process+0x1bc>
    1734:	38 f4       	brcc	.+14     	; 0x1744 <qtm_key_sensors_process+0x88>
    1736:	82 30       	cpi	r24, 0x02	; 2
    1738:	01 f1       	breq	.+64     	; 0x177a <qtm_key_sensors_process+0xbe>
    173a:	08 f0       	brcs	.+2      	; 0x173e <qtm_key_sensors_process+0x82>
    173c:	49 c0       	rjmp	.+146    	; 0x17d0 <qtm_key_sensors_process+0x114>
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	59 f0       	breq	.+22     	; 0x1758 <qtm_key_sensors_process+0x9c>
    1742:	8a c1       	rjmp	.+788    	; 0x1a58 <qtm_key_sensors_process+0x39c>
    1744:	85 38       	cpi	r24, 0x85	; 133
    1746:	09 f4       	brne	.+2      	; 0x174a <qtm_key_sensors_process+0x8e>
    1748:	c4 c0       	rjmp	.+392    	; 0x18d2 <qtm_key_sensors_process+0x216>
    174a:	86 38       	cpi	r24, 0x86	; 134
    174c:	09 f4       	brne	.+2      	; 0x1750 <qtm_key_sensors_process+0x94>
    174e:	f8 c0       	rjmp	.+496    	; 0x1940 <qtm_key_sensors_process+0x284>
    1750:	87 30       	cpi	r24, 0x07	; 7
    1752:	09 f0       	breq	.+2      	; 0x1756 <qtm_key_sensors_process+0x9a>
    1754:	81 c1       	rjmp	.+770    	; 0x1a58 <qtm_key_sensors_process+0x39c>
    1756:	39 c1       	rjmp	.+626    	; 0x19ca <qtm_key_sensors_process+0x30e>
    1758:	d8 01       	movw	r26, r16
    175a:	12 96       	adiw	r26, 0x02	; 2
    175c:	ed 91       	ld	r30, X+
    175e:	fc 91       	ld	r31, X
    1760:	13 97       	sbiw	r26, 0x03	; 3
    1762:	80 81       	ld	r24, Z
    1764:	8e 71       	andi	r24, 0x1E	; 30
    1766:	09 f0       	breq	.+2      	; 0x176a <qtm_key_sensors_process+0xae>
    1768:	69 c1       	rjmp	.+722    	; 0x1a3c <qtm_key_sensors_process+0x380>
    176a:	4c 92       	st	X, r4
    176c:	8c 81       	ldd	r24, Y+4	; 0x04
    176e:	9d 81       	ldd	r25, Y+5	; 0x05
    1770:	fc 01       	movw	r30, r24
    1772:	ee 0d       	add	r30, r14
    1774:	ff 1d       	adc	r31, r15
    1776:	51 82       	std	Z+1, r5	; 0x01
    1778:	61 c1       	rjmp	.+706    	; 0x1a3c <qtm_key_sensors_process+0x380>
    177a:	f8 01       	movw	r30, r16
    177c:	21 81       	ldd	r18, Z+1	; 0x01
    177e:	22 23       	and	r18, r18
    1780:	29 f1       	breq	.+74     	; 0x17cc <qtm_key_sensors_process+0x110>
    1782:	02 80       	ldd	r0, Z+2	; 0x02
    1784:	f3 81       	ldd	r31, Z+3	; 0x03
    1786:	e0 2d       	mov	r30, r0
    1788:	25 30       	cpi	r18, 0x05	; 5
    178a:	20 f0       	brcs	.+8      	; 0x1794 <qtm_key_sensors_process+0xd8>
    178c:	81 81       	ldd	r24, Z+1	; 0x01
    178e:	92 81       	ldd	r25, Z+2	; 0x02
    1790:	d8 01       	movw	r26, r16
    1792:	0e c0       	rjmp	.+28     	; 0x17b0 <qtm_key_sensors_process+0xf4>
    1794:	d8 01       	movw	r26, r16
    1796:	14 96       	adiw	r26, 0x04	; 4
    1798:	8d 91       	ld	r24, X+
    179a:	9c 91       	ld	r25, X
    179c:	15 97       	sbiw	r26, 0x05	; 5
    179e:	41 81       	ldd	r20, Z+1	; 0x01
    17a0:	52 81       	ldd	r21, Z+2	; 0x02
    17a2:	84 17       	cp	r24, r20
    17a4:	95 07       	cpc	r25, r21
    17a6:	69 f0       	breq	.+26     	; 0x17c2 <qtm_key_sensors_process+0x106>
    17a8:	48 17       	cp	r20, r24
    17aa:	59 07       	cpc	r21, r25
    17ac:	30 f4       	brcc	.+12     	; 0x17ba <qtm_key_sensors_process+0xfe>
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	15 96       	adiw	r26, 0x05	; 5
    17b2:	9c 93       	st	X, r25
    17b4:	8e 93       	st	-X, r24
    17b6:	14 97       	sbiw	r26, 0x04	; 4
    17b8:	04 c0       	rjmp	.+8      	; 0x17c2 <qtm_key_sensors_process+0x106>
    17ba:	01 96       	adiw	r24, 0x01	; 1
    17bc:	f8 01       	movw	r30, r16
    17be:	95 83       	std	Z+5, r25	; 0x05
    17c0:	84 83       	std	Z+4, r24	; 0x04
    17c2:	21 50       	subi	r18, 0x01	; 1
    17c4:	d8 01       	movw	r26, r16
    17c6:	11 96       	adiw	r26, 0x01	; 1
    17c8:	2c 93       	st	X, r18
    17ca:	38 c1       	rjmp	.+624    	; 0x1a3c <qtm_key_sensors_process+0x380>
    17cc:	f8 01       	movw	r30, r16
    17ce:	30 c1       	rjmp	.+608    	; 0x1a30 <qtm_key_sensors_process+0x374>
    17d0:	d8 01       	movw	r26, r16
    17d2:	14 96       	adiw	r26, 0x04	; 4
    17d4:	2d 91       	ld	r18, X+
    17d6:	3c 91       	ld	r19, X
    17d8:	15 97       	sbiw	r26, 0x05	; 5
    17da:	12 96       	adiw	r26, 0x02	; 2
    17dc:	8d 91       	ld	r24, X+
    17de:	9c 91       	ld	r25, X
    17e0:	13 97       	sbiw	r26, 0x03	; 3
    17e2:	dc 01       	movw	r26, r24
    17e4:	11 96       	adiw	r26, 0x01	; 1
    17e6:	4d 91       	ld	r20, X+
    17e8:	5c 91       	ld	r21, X
    17ea:	12 97       	sbiw	r26, 0x02	; 2
    17ec:	24 17       	cp	r18, r20
    17ee:	35 07       	cpc	r19, r21
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <qtm_key_sensors_process+0x138>
    17f2:	32 c1       	rjmp	.+612    	; 0x1a58 <qtm_key_sensors_process+0x39c>
    17f4:	8e 81       	ldd	r24, Y+6	; 0x06
    17f6:	9f 81       	ldd	r25, Y+7	; 0x07
    17f8:	42 17       	cp	r20, r18
    17fa:	53 07       	cpc	r21, r19
    17fc:	e0 f4       	brcc	.+56     	; 0x1836 <qtm_key_sensors_process+0x17a>
    17fe:	24 1b       	sub	r18, r20
    1800:	35 0b       	sbc	r19, r21
    1802:	dc 01       	movw	r26, r24
    1804:	aa 0d       	add	r26, r10
    1806:	bb 1d       	adc	r27, r11
    1808:	8c 91       	ld	r24, X
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	05 80       	ldd	r0, Z+5	; 0x05
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <qtm_key_sensors_process+0x158>
    1810:	95 95       	asr	r25
    1812:	87 95       	ror	r24
    1814:	0a 94       	dec	r0
    1816:	e2 f7       	brpl	.-8      	; 0x1810 <qtm_key_sensors_process+0x154>
    1818:	99 27       	eor	r25, r25
    181a:	28 17       	cp	r18, r24
    181c:	39 07       	cpc	r19, r25
    181e:	08 f4       	brcc	.+2      	; 0x1822 <qtm_key_sensors_process+0x166>
    1820:	1b c1       	rjmp	.+566    	; 0x1a58 <qtm_key_sensors_process+0x39c>
    1822:	84 81       	ldd	r24, Z+4	; 0x04
    1824:	88 23       	and	r24, r24
    1826:	09 f4       	brne	.+2      	; 0x182a <qtm_key_sensors_process+0x16e>
    1828:	17 c1       	rjmp	.+558    	; 0x1a58 <qtm_key_sensors_process+0x39c>
    182a:	f8 01       	movw	r30, r16
    182c:	30 82       	st	Z, r3
    182e:	ea 81       	ldd	r30, Y+2	; 0x02
    1830:	fb 81       	ldd	r31, Y+3	; 0x03
    1832:	24 81       	ldd	r18, Z+4	; 0x04
    1834:	1a c0       	rjmp	.+52     	; 0x186a <qtm_key_sensors_process+0x1ae>
    1836:	fc 01       	movw	r30, r24
    1838:	ea 0d       	add	r30, r10
    183a:	fb 1d       	adc	r31, r11
    183c:	42 1b       	sub	r20, r18
    183e:	53 0b       	sbc	r21, r19
    1840:	80 81       	ld	r24, Z
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	48 17       	cp	r20, r24
    1846:	59 07       	cpc	r21, r25
    1848:	08 f4       	brcc	.+2      	; 0x184c <qtm_key_sensors_process+0x190>
    184a:	06 c1       	rjmp	.+524    	; 0x1a58 <qtm_key_sensors_process+0x39c>
    184c:	82 81       	ldd	r24, Z+2	; 0x02
    184e:	88 23       	and	r24, r24
    1850:	31 f0       	breq	.+12     	; 0x185e <qtm_key_sensors_process+0x1a2>
    1852:	b4 01       	movw	r22, r8
    1854:	ce 01       	movw	r24, r28
    1856:	0e 94 cb 0a 	call	0x1596	; 0x1596 <check_for_aks_block>
    185a:	81 11       	cpse	r24, r1
    185c:	fd c0       	rjmp	.+506    	; 0x1a58 <qtm_key_sensors_process+0x39c>
    185e:	e4 e0       	ldi	r30, 0x04	; 4
    1860:	d8 01       	movw	r26, r16
    1862:	ec 93       	st	X, r30
    1864:	ea 81       	ldd	r30, Y+2	; 0x02
    1866:	fb 81       	ldd	r31, Y+3	; 0x03
    1868:	22 81       	ldd	r18, Z+2	; 0x02
    186a:	8c 81       	ldd	r24, Y+4	; 0x04
    186c:	9d 81       	ldd	r25, Y+5	; 0x05
    186e:	fc 01       	movw	r30, r24
    1870:	ee 0d       	add	r30, r14
    1872:	ff 1d       	adc	r31, r15
    1874:	21 83       	std	Z+1, r18	; 0x01
    1876:	e2 c0       	rjmp	.+452    	; 0x1a3c <qtm_key_sensors_process+0x380>
    1878:	d8 01       	movw	r26, r16
    187a:	14 96       	adiw	r26, 0x04	; 4
    187c:	2d 91       	ld	r18, X+
    187e:	3c 91       	ld	r19, X
    1880:	15 97       	sbiw	r26, 0x05	; 5
    1882:	12 96       	adiw	r26, 0x02	; 2
    1884:	ed 91       	ld	r30, X+
    1886:	fc 91       	ld	r31, X
    1888:	13 97       	sbiw	r26, 0x03	; 3
    188a:	81 81       	ldd	r24, Z+1	; 0x01
    188c:	92 81       	ldd	r25, Z+2	; 0x02
    188e:	82 17       	cp	r24, r18
    1890:	93 07       	cpc	r25, r19
    1892:	10 f4       	brcc	.+4      	; 0x1898 <qtm_key_sensors_process+0x1dc>
    1894:	cc 92       	st	X, r12
    1896:	d7 c0       	rjmp	.+430    	; 0x1a46 <qtm_key_sensors_process+0x38a>
    1898:	ee 81       	ldd	r30, Y+6	; 0x06
    189a:	ff 81       	ldd	r31, Y+7	; 0x07
    189c:	ea 0d       	add	r30, r10
    189e:	fb 1d       	adc	r31, r11
    18a0:	82 1b       	sub	r24, r18
    18a2:	93 0b       	sbc	r25, r19
    18a4:	20 81       	ld	r18, Z
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	28 17       	cp	r18, r24
    18aa:	39 07       	cpc	r19, r25
    18ac:	08 f0       	brcs	.+2      	; 0x18b0 <qtm_key_sensors_process+0x1f4>
    18ae:	c9 c0       	rjmp	.+402    	; 0x1a42 <qtm_key_sensors_process+0x386>
    18b0:	82 81       	ldd	r24, Z+2	; 0x02
    18b2:	88 23       	and	r24, r24
    18b4:	31 f0       	breq	.+12     	; 0x18c2 <qtm_key_sensors_process+0x206>
    18b6:	b4 01       	movw	r22, r8
    18b8:	ce 01       	movw	r24, r28
    18ba:	0e 94 cb 0a 	call	0x1596	; 0x1596 <check_for_aks_block>
    18be:	81 11       	cpse	r24, r1
    18c0:	cb c0       	rjmp	.+406    	; 0x1a58 <qtm_key_sensors_process+0x39c>
    18c2:	f8 01       	movw	r30, r16
    18c4:	81 81       	ldd	r24, Z+1	; 0x01
    18c6:	88 23       	and	r24, r24
    18c8:	09 f4       	brne	.+2      	; 0x18cc <qtm_key_sensors_process+0x210>
    18ca:	68 c0       	rjmp	.+208    	; 0x199c <qtm_key_sensors_process+0x2e0>
    18cc:	81 50       	subi	r24, 0x01	; 1
    18ce:	81 83       	std	Z+1, r24	; 0x01
    18d0:	b5 c0       	rjmp	.+362    	; 0x1a3c <qtm_key_sensors_process+0x380>
    18d2:	a8 81       	ld	r26, Y
    18d4:	b9 81       	ldd	r27, Y+1	; 0x01
    18d6:	80 85       	ldd	r24, Z+8	; 0x08
    18d8:	13 96       	adiw	r26, 0x03	; 3
    18da:	8c 93       	st	X, r24
    18dc:	ec 81       	ldd	r30, Y+4	; 0x04
    18de:	fd 81       	ldd	r31, Y+5	; 0x05
    18e0:	ee 0d       	add	r30, r14
    18e2:	ff 1d       	adc	r31, r15
    18e4:	44 81       	ldd	r20, Z+4	; 0x04
    18e6:	55 81       	ldd	r21, Z+5	; 0x05
    18e8:	a2 81       	ldd	r26, Z+2	; 0x02
    18ea:	b3 81       	ldd	r27, Z+3	; 0x03
    18ec:	11 96       	adiw	r26, 0x01	; 1
    18ee:	8d 91       	ld	r24, X+
    18f0:	9c 91       	ld	r25, X
    18f2:	12 97       	sbiw	r26, 0x02	; 2
    18f4:	84 17       	cp	r24, r20
    18f6:	95 07       	cpc	r25, r21
    18f8:	c0 f0       	brcs	.+48     	; 0x192a <qtm_key_sensors_process+0x26e>
    18fa:	ae 81       	ldd	r26, Y+6	; 0x06
    18fc:	bf 81       	ldd	r27, Y+7	; 0x07
    18fe:	aa 0d       	add	r26, r10
    1900:	bb 1d       	adc	r27, r11
    1902:	6c 91       	ld	r22, X
    1904:	26 2f       	mov	r18, r22
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	11 96       	adiw	r26, 0x01	; 1
    190a:	7c 91       	ld	r23, X
    190c:	7f 5f       	subi	r23, 0xFF	; 255
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <qtm_key_sensors_process+0x258>
    1910:	35 95       	asr	r19
    1912:	27 95       	ror	r18
    1914:	7a 95       	dec	r23
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <qtm_key_sensors_process+0x254>
    1918:	84 1b       	sub	r24, r20
    191a:	95 0b       	sbc	r25, r21
    191c:	62 1b       	sub	r22, r18
    191e:	26 2f       	mov	r18, r22
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	28 17       	cp	r18, r24
    1924:	39 07       	cpc	r19, r25
    1926:	08 f4       	brcc	.+2      	; 0x192a <qtm_key_sensors_process+0x26e>
    1928:	95 c0       	rjmp	.+298    	; 0x1a54 <qtm_key_sensors_process+0x398>
    192a:	70 82       	st	Z, r7
    192c:	ea 81       	ldd	r30, Y+2	; 0x02
    192e:	fb 81       	ldd	r31, Y+3	; 0x03
    1930:	22 81       	ldd	r18, Z+2	; 0x02
    1932:	8c 81       	ldd	r24, Y+4	; 0x04
    1934:	9d 81       	ldd	r25, Y+5	; 0x05
    1936:	fc 01       	movw	r30, r24
    1938:	ee 0d       	add	r30, r14
    193a:	ff 1d       	adc	r31, r15
    193c:	21 83       	std	Z+1, r18	; 0x01
    193e:	42 c0       	rjmp	.+132    	; 0x19c4 <qtm_key_sensors_process+0x308>
    1940:	d8 01       	movw	r26, r16
    1942:	14 96       	adiw	r26, 0x04	; 4
    1944:	6d 91       	ld	r22, X+
    1946:	7c 91       	ld	r23, X
    1948:	15 97       	sbiw	r26, 0x05	; 5
    194a:	12 96       	adiw	r26, 0x02	; 2
    194c:	ed 91       	ld	r30, X+
    194e:	fc 91       	ld	r31, X
    1950:	13 97       	sbiw	r26, 0x03	; 3
    1952:	21 81       	ldd	r18, Z+1	; 0x01
    1954:	32 81       	ldd	r19, Z+2	; 0x02
    1956:	26 17       	cp	r18, r22
    1958:	37 07       	cpc	r19, r23
    195a:	58 f4       	brcc	.+22     	; 0x1972 <qtm_key_sensors_process+0x2b6>
    195c:	11 96       	adiw	r26, 0x01	; 1
    195e:	8c 91       	ld	r24, X
    1960:	11 97       	sbiw	r26, 0x01	; 1
    1962:	81 11       	cpse	r24, r1
    1964:	02 c0       	rjmp	.+4      	; 0x196a <qtm_key_sensors_process+0x2ae>
    1966:	cc 92       	st	X, r12
    1968:	75 c0       	rjmp	.+234    	; 0x1a54 <qtm_key_sensors_process+0x398>
    196a:	81 50       	subi	r24, 0x01	; 1
    196c:	f8 01       	movw	r30, r16
    196e:	81 83       	std	Z+1, r24	; 0x01
    1970:	71 c0       	rjmp	.+226    	; 0x1a54 <qtm_key_sensors_process+0x398>
    1972:	ee 81       	ldd	r30, Y+6	; 0x06
    1974:	ff 81       	ldd	r31, Y+7	; 0x07
    1976:	ea 0d       	add	r30, r10
    1978:	fb 1d       	adc	r31, r11
    197a:	80 81       	ld	r24, Z
    197c:	48 2f       	mov	r20, r24
    197e:	50 e0       	ldi	r21, 0x00	; 0
    1980:	91 81       	ldd	r25, Z+1	; 0x01
    1982:	9f 5f       	subi	r25, 0xFF	; 255
    1984:	02 c0       	rjmp	.+4      	; 0x198a <qtm_key_sensors_process+0x2ce>
    1986:	55 95       	asr	r21
    1988:	47 95       	ror	r20
    198a:	9a 95       	dec	r25
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <qtm_key_sensors_process+0x2ca>
    198e:	26 1b       	sub	r18, r22
    1990:	37 0b       	sbc	r19, r23
    1992:	84 1b       	sub	r24, r20
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	82 17       	cp	r24, r18
    1998:	93 07       	cpc	r25, r19
    199a:	60 f4       	brcc	.+24     	; 0x19b4 <qtm_key_sensors_process+0x2f8>
    199c:	d8 01       	movw	r26, r16
    199e:	6c 92       	st	X, r6
    19a0:	ea 81       	ldd	r30, Y+2	; 0x02
    19a2:	fb 81       	ldd	r31, Y+3	; 0x03
    19a4:	23 81       	ldd	r18, Z+3	; 0x03
    19a6:	8c 81       	ldd	r24, Y+4	; 0x04
    19a8:	9d 81       	ldd	r25, Y+5	; 0x05
    19aa:	fc 01       	movw	r30, r24
    19ac:	ee 0d       	add	r30, r14
    19ae:	ff 1d       	adc	r31, r15
    19b0:	21 83       	std	Z+1, r18	; 0x01
    19b2:	50 c0       	rjmp	.+160    	; 0x1a54 <qtm_key_sensors_process+0x398>
    19b4:	f8 01       	movw	r30, r16
    19b6:	81 81       	ldd	r24, Z+1	; 0x01
    19b8:	81 11       	cpse	r24, r1
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <qtm_key_sensors_process+0x304>
    19bc:	c0 82       	st	Z, r12
    19be:	4a c0       	rjmp	.+148    	; 0x1a54 <qtm_key_sensors_process+0x398>
    19c0:	81 50       	subi	r24, 0x01	; 1
    19c2:	81 83       	std	Z+1, r24	; 0x01
    19c4:	22 24       	eor	r2, r2
    19c6:	23 94       	inc	r2
    19c8:	39 c0       	rjmp	.+114    	; 0x1a3c <qtm_key_sensors_process+0x380>
    19ca:	d8 01       	movw	r26, r16
    19cc:	14 96       	adiw	r26, 0x04	; 4
    19ce:	2d 91       	ld	r18, X+
    19d0:	3c 91       	ld	r19, X
    19d2:	15 97       	sbiw	r26, 0x05	; 5
    19d4:	12 96       	adiw	r26, 0x02	; 2
    19d6:	8d 91       	ld	r24, X+
    19d8:	9c 91       	ld	r25, X
    19da:	13 97       	sbiw	r26, 0x03	; 3
    19dc:	dc 01       	movw	r26, r24
    19de:	11 96       	adiw	r26, 0x01	; 1
    19e0:	8d 91       	ld	r24, X+
    19e2:	9c 91       	ld	r25, X
    19e4:	12 97       	sbiw	r26, 0x02	; 2
    19e6:	82 17       	cp	r24, r18
    19e8:	93 07       	cpc	r25, r19
    19ea:	58 f5       	brcc	.+86     	; 0x1a42 <qtm_key_sensors_process+0x386>
    19ec:	28 1b       	sub	r18, r24
    19ee:	39 0b       	sbc	r19, r25
    19f0:	ae 81       	ldd	r26, Y+6	; 0x06
    19f2:	bf 81       	ldd	r27, Y+7	; 0x07
    19f4:	aa 0d       	add	r26, r10
    19f6:	bb 1d       	adc	r27, r11
    19f8:	8c 91       	ld	r24, X
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	05 80       	ldd	r0, Z+5	; 0x05
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <qtm_key_sensors_process+0x348>
    1a00:	95 95       	asr	r25
    1a02:	87 95       	ror	r24
    1a04:	0a 94       	dec	r0
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <qtm_key_sensors_process+0x344>
    1a08:	99 27       	eor	r25, r25
    1a0a:	28 17       	cp	r18, r24
    1a0c:	39 07       	cpc	r19, r25
    1a0e:	c8 f0       	brcs	.+50     	; 0x1a42 <qtm_key_sensors_process+0x386>
    1a10:	d8 01       	movw	r26, r16
    1a12:	11 96       	adiw	r26, 0x01	; 1
    1a14:	8c 91       	ld	r24, X
    1a16:	11 97       	sbiw	r26, 0x01	; 1
    1a18:	81 11       	cpse	r24, r1
    1a1a:	0c c0       	rjmp	.+24     	; 0x1a34 <qtm_key_sensors_process+0x378>
    1a1c:	e1 e0       	ldi	r30, 0x01	; 1
    1a1e:	ec 93       	st	X, r30
    1a20:	8c 81       	ldd	r24, Y+4	; 0x04
    1a22:	9d 81       	ldd	r25, Y+5	; 0x05
    1a24:	fc 01       	movw	r30, r24
    1a26:	ee 0d       	add	r30, r14
    1a28:	ff 1d       	adc	r31, r15
    1a2a:	02 80       	ldd	r0, Z+2	; 0x02
    1a2c:	f3 81       	ldd	r31, Z+3	; 0x03
    1a2e:	e0 2d       	mov	r30, r0
    1a30:	c0 82       	st	Z, r12
    1a32:	12 c0       	rjmp	.+36     	; 0x1a58 <qtm_key_sensors_process+0x39c>
    1a34:	81 50       	subi	r24, 0x01	; 1
    1a36:	d8 01       	movw	r26, r16
    1a38:	11 96       	adiw	r26, 0x01	; 1
    1a3a:	8c 93       	st	X, r24
    1a3c:	dd 24       	eor	r13, r13
    1a3e:	d3 94       	inc	r13
    1a40:	0b c0       	rjmp	.+22     	; 0x1a58 <qtm_key_sensors_process+0x39c>
    1a42:	f8 01       	movw	r30, r16
    1a44:	c0 82       	st	Z, r12
    1a46:	8c 81       	ldd	r24, Y+4	; 0x04
    1a48:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	ee 0d       	add	r30, r14
    1a4e:	ff 1d       	adc	r31, r15
    1a50:	11 82       	std	Z+1, r1	; 0x01
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <qtm_key_sensors_process+0x39c>
    1a54:	22 24       	eor	r2, r2
    1a56:	23 94       	inc	r2
    1a58:	ff ef       	ldi	r31, 0xFF	; 255
    1a5a:	8f 1a       	sub	r8, r31
    1a5c:	9f 0a       	sbc	r9, r31
    1a5e:	83 e0       	ldi	r24, 0x03	; 3
    1a60:	a8 0e       	add	r10, r24
    1a62:	b1 1c       	adc	r11, r1
    1a64:	53 ce       	rjmp	.-858    	; 0x170c <qtm_key_sensors_process+0x50>
    1a66:	e8 81       	ld	r30, Y
    1a68:	f9 81       	ldd	r31, Y+1	; 0x01
    1a6a:	80 81       	ld	r24, Z
    1a6c:	87 ff       	sbrs	r24, 7
    1a6e:	23 c0       	rjmp	.+70     	; 0x1ab6 <qtm_key_sensors_process+0x3fa>
    1a70:	40 e0       	ldi	r20, 0x00	; 0
    1a72:	50 e0       	ldi	r21, 0x00	; 0
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	ea 81       	ldd	r30, Y+2	; 0x02
    1a7a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a7c:	80 81       	ld	r24, Z
    1a7e:	91 81       	ldd	r25, Z+1	; 0x01
    1a80:	28 17       	cp	r18, r24
    1a82:	39 07       	cpc	r19, r25
    1a84:	98 f4       	brcc	.+38     	; 0x1aac <qtm_key_sensors_process+0x3f0>
    1a86:	ec 81       	ldd	r30, Y+4	; 0x04
    1a88:	fd 81       	ldd	r31, Y+5	; 0x05
    1a8a:	e4 0f       	add	r30, r20
    1a8c:	f5 1f       	adc	r31, r21
    1a8e:	a2 81       	ldd	r26, Z+2	; 0x02
    1a90:	b3 81       	ldd	r27, Z+3	; 0x03
    1a92:	8c 91       	ld	r24, X
    1a94:	80 fd       	sbrc	r24, 0
    1a96:	05 c0       	rjmp	.+10     	; 0x1aa2 <qtm_key_sensors_process+0x3e6>
    1a98:	90 81       	ld	r25, Z
    1a9a:	97 7f       	andi	r25, 0xF7	; 247
    1a9c:	11 f0       	breq	.+4      	; 0x1aa2 <qtm_key_sensors_process+0x3e6>
    1a9e:	81 60       	ori	r24, 0x01	; 1
    1aa0:	8c 93       	st	X, r24
    1aa2:	2f 5f       	subi	r18, 0xFF	; 255
    1aa4:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa6:	4a 5f       	subi	r20, 0xFA	; 250
    1aa8:	5f 4f       	sbci	r21, 0xFF	; 255
    1aaa:	e6 cf       	rjmp	.-52     	; 0x1a78 <qtm_key_sensors_process+0x3bc>
    1aac:	e8 81       	ld	r30, Y
    1aae:	f9 81       	ldd	r31, Y+1	; 0x01
    1ab0:	80 81       	ld	r24, Z
    1ab2:	8f 77       	andi	r24, 0x7F	; 127
    1ab4:	80 83       	st	Z, r24
    1ab6:	d1 10       	cpse	r13, r1
    1ab8:	07 c0       	rjmp	.+14     	; 0x1ac8 <qtm_key_sensors_process+0x40c>
    1aba:	e8 81       	ld	r30, Y
    1abc:	f9 81       	ldd	r31, Y+1	; 0x01
    1abe:	21 10       	cpse	r2, r1
    1ac0:	6f c0       	rjmp	.+222    	; 0x1ba0 <qtm_key_sensors_process+0x4e4>
    1ac2:	80 81       	ld	r24, Z
    1ac4:	8e 7f       	andi	r24, 0xFE	; 254
    1ac6:	6e c0       	rjmp	.+220    	; 0x1ba4 <qtm_key_sensors_process+0x4e8>
    1ac8:	ea 81       	ldd	r30, Y+2	; 0x02
    1aca:	fb 81       	ldd	r31, Y+3	; 0x03
    1acc:	81 85       	ldd	r24, Z+9	; 0x09
    1ace:	88 23       	and	r24, r24
    1ad0:	a1 f3       	breq	.-24     	; 0x1aba <qtm_key_sensors_process+0x3fe>
    1ad2:	e8 81       	ld	r30, Y
    1ad4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ad6:	80 81       	ld	r24, Z
    1ad8:	80 68       	ori	r24, 0x80	; 128
    1ada:	80 83       	st	Z, r24
    1adc:	ea 81       	ldd	r30, Y+2	; 0x02
    1ade:	fb 81       	ldd	r31, Y+3	; 0x03
    1ae0:	81 85       	ldd	r24, Z+9	; 0x09
    1ae2:	81 30       	cpi	r24, 0x01	; 1
    1ae4:	51 f7       	brne	.-44     	; 0x1aba <qtm_key_sensors_process+0x3fe>
    1ae6:	40 e0       	ldi	r20, 0x00	; 0
    1ae8:	50 e0       	ldi	r21, 0x00	; 0
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	96 e0       	ldi	r25, 0x06	; 6
    1af0:	d9 2e       	mov	r13, r25
    1af2:	ea 81       	ldd	r30, Y+2	; 0x02
    1af4:	fb 81       	ldd	r31, Y+3	; 0x03
    1af6:	60 81       	ld	r22, Z
    1af8:	71 81       	ldd	r23, Z+1	; 0x01
    1afa:	26 17       	cp	r18, r22
    1afc:	37 07       	cpc	r19, r23
    1afe:	e8 f6       	brcc	.-70     	; 0x1aba <qtm_key_sensors_process+0x3fe>
    1b00:	0c 81       	ldd	r16, Y+4	; 0x04
    1b02:	1d 81       	ldd	r17, Y+5	; 0x05
    1b04:	fa 01       	movw	r30, r20
    1b06:	ee 0f       	add	r30, r30
    1b08:	ff 1f       	adc	r31, r31
    1b0a:	e0 0f       	add	r30, r16
    1b0c:	f1 1f       	adc	r31, r17
    1b0e:	80 81       	ld	r24, Z
    1b10:	98 2f       	mov	r25, r24
    1b12:	97 7f       	andi	r25, 0xF7	; 247
    1b14:	a1 f1       	breq	.+104    	; 0x1b7e <qtm_key_sensors_process+0x4c2>
    1b16:	85 38       	cpi	r24, 0x85	; 133
    1b18:	11 f0       	breq	.+4      	; 0x1b1e <qtm_key_sensors_process+0x462>
    1b1a:	83 30       	cpi	r24, 0x03	; 3
    1b1c:	b1 f5       	brne	.+108    	; 0x1b8a <qtm_key_sensors_process+0x4ce>
    1b1e:	ee 80       	ldd	r14, Y+6	; 0x06
    1b20:	ff 80       	ldd	r15, Y+7	; 0x07
    1b22:	d7 01       	movw	r26, r14
    1b24:	a4 0f       	add	r26, r20
    1b26:	b5 1f       	adc	r27, r21
    1b28:	12 96       	adiw	r26, 0x02	; 2
    1b2a:	bc 90       	ld	r11, X
    1b2c:	bb 20       	and	r11, r11
    1b2e:	39 f1       	breq	.+78     	; 0x1b7e <qtm_key_sensors_process+0x4c2>
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	c1 2c       	mov	r12, r1
    1b36:	86 17       	cp	r24, r22
    1b38:	97 07       	cpc	r25, r23
    1b3a:	f8 f4       	brcc	.+62     	; 0x1b7a <qtm_key_sensors_process+0x4be>
    1b3c:	28 17       	cp	r18, r24
    1b3e:	39 07       	cpc	r19, r25
    1b40:	d1 f0       	breq	.+52     	; 0x1b76 <qtm_key_sensors_process+0x4ba>
    1b42:	d8 9e       	mul	r13, r24
    1b44:	d0 01       	movw	r26, r0
    1b46:	d9 9e       	mul	r13, r25
    1b48:	b0 0d       	add	r27, r0
    1b4a:	11 24       	eor	r1, r1
    1b4c:	a0 0f       	add	r26, r16
    1b4e:	b1 1f       	adc	r27, r17
    1b50:	ac 91       	ld	r26, X
    1b52:	a4 30       	cpi	r26, 0x04	; 4
    1b54:	11 f0       	breq	.+4      	; 0x1b5a <qtm_key_sensors_process+0x49e>
    1b56:	a6 38       	cpi	r26, 0x86	; 134
    1b58:	71 f4       	brne	.+28     	; 0x1b76 <qtm_key_sensors_process+0x4ba>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	aa 0f       	add	r26, r26
    1b5e:	bb 1f       	adc	r27, r27
    1b60:	a8 0f       	add	r26, r24
    1b62:	b9 1f       	adc	r27, r25
    1b64:	ae 0d       	add	r26, r14
    1b66:	bf 1d       	adc	r27, r15
    1b68:	12 96       	adiw	r26, 0x02	; 2
    1b6a:	ac 91       	ld	r26, X
    1b6c:	ba 12       	cpse	r11, r26
    1b6e:	03 c0       	rjmp	.+6      	; 0x1b76 <qtm_key_sensors_process+0x4ba>
    1b70:	cb 01       	movw	r24, r22
    1b72:	cc 24       	eor	r12, r12
    1b74:	c3 94       	inc	r12
    1b76:	01 96       	adiw	r24, 0x01	; 1
    1b78:	de cf       	rjmp	.-68     	; 0x1b36 <qtm_key_sensors_process+0x47a>
    1b7a:	c1 10       	cpse	r12, r1
    1b7c:	06 c0       	rjmp	.+12     	; 0x1b8a <qtm_key_sensors_process+0x4ce>
    1b7e:	02 80       	ldd	r0, Z+2	; 0x02
    1b80:	f3 81       	ldd	r31, Z+3	; 0x03
    1b82:	e0 2d       	mov	r30, r0
    1b84:	80 81       	ld	r24, Z
    1b86:	8e 7f       	andi	r24, 0xFE	; 254
    1b88:	05 c0       	rjmp	.+10     	; 0x1b94 <qtm_key_sensors_process+0x4d8>
    1b8a:	02 80       	ldd	r0, Z+2	; 0x02
    1b8c:	f3 81       	ldd	r31, Z+3	; 0x03
    1b8e:	e0 2d       	mov	r30, r0
    1b90:	80 81       	ld	r24, Z
    1b92:	81 60       	ori	r24, 0x01	; 1
    1b94:	80 83       	st	Z, r24
    1b96:	2f 5f       	subi	r18, 0xFF	; 255
    1b98:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9a:	4d 5f       	subi	r20, 0xFD	; 253
    1b9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b9e:	a9 cf       	rjmp	.-174    	; 0x1af2 <qtm_key_sensors_process+0x436>
    1ba0:	80 81       	ld	r24, Z
    1ba2:	81 60       	ori	r24, 0x01	; 1
    1ba4:	80 83       	st	Z, r24
    1ba6:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <qtm_local_ms_timecount>
    1baa:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <qtm_local_ms_timecount+0x1>
    1bae:	e8 81       	ld	r30, Y
    1bb0:	f9 81       	ldd	r31, Y+1	; 0x01
    1bb2:	21 81       	ldd	r18, Z+1	; 0x01
    1bb4:	32 81       	ldd	r19, Z+2	; 0x02
    1bb6:	a9 01       	movw	r20, r18
    1bb8:	48 53       	subi	r20, 0x38	; 56
    1bba:	5f 4f       	sbci	r21, 0xFF	; 255
    1bbc:	48 17       	cp	r20, r24
    1bbe:	59 07       	cpc	r21, r25
    1bc0:	38 f4       	brcc	.+14     	; 0x1bd0 <qtm_key_sensors_process+0x514>
    1bc2:	82 1b       	sub	r24, r18
    1bc4:	93 0b       	sbc	r25, r19
    1bc6:	aa 24       	eor	r10, r10
    1bc8:	a3 94       	inc	r10
    1bca:	a3 e0       	ldi	r26, 0x03	; 3
    1bcc:	ba 2e       	mov	r11, r26
    1bce:	44 c0       	rjmp	.+136    	; 0x1c58 <qtm_key_sensors_process+0x59c>
    1bd0:	82 17       	cp	r24, r18
    1bd2:	93 07       	cpc	r25, r19
    1bd4:	10 f0       	brcs	.+4      	; 0x1bda <qtm_key_sensors_process+0x51e>
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	04 c1       	rjmp	.+520    	; 0x1de2 <qtm_key_sensors_process+0x726>
    1bda:	82 1b       	sub	r24, r18
    1bdc:	93 0b       	sbc	r25, r19
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	89 3c       	cpi	r24, 0xC9	; 201
    1be2:	91 05       	cpc	r25, r1
    1be4:	c0 f3       	brcs	.-16     	; 0x1bd6 <qtm_key_sensors_process+0x51a>
    1be6:	ef cf       	rjmp	.-34     	; 0x1bc6 <qtm_key_sensors_process+0x50a>
    1be8:	88 5c       	subi	r24, 0xC8	; 200
    1bea:	91 09       	sbc	r25, r1
    1bec:	e8 81       	ld	r30, Y
    1bee:	f9 81       	ldd	r31, Y+1	; 0x01
    1bf0:	21 81       	ldd	r18, Z+1	; 0x01
    1bf2:	32 81       	ldd	r19, Z+2	; 0x02
    1bf4:	28 53       	subi	r18, 0x38	; 56
    1bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf8:	32 83       	std	Z+2, r19	; 0x02
    1bfa:	21 83       	std	Z+1, r18	; 0x01
    1bfc:	23 81       	ldd	r18, Z+3	; 0x03
    1bfe:	21 11       	cpse	r18, r1
    1c00:	96 c0       	rjmp	.+300    	; 0x1d2e <qtm_key_sensors_process+0x672>
    1c02:	24 81       	ldd	r18, Z+4	; 0x04
    1c04:	22 23       	and	r18, r18
    1c06:	11 f0       	breq	.+4      	; 0x1c0c <qtm_key_sensors_process+0x550>
    1c08:	21 50       	subi	r18, 0x01	; 1
    1c0a:	24 83       	std	Z+4, r18	; 0x04
    1c0c:	e8 81       	ld	r30, Y
    1c0e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c10:	25 81       	ldd	r18, Z+5	; 0x05
    1c12:	22 23       	and	r18, r18
    1c14:	11 f0       	breq	.+4      	; 0x1c1a <qtm_key_sensors_process+0x55e>
    1c16:	21 50       	subi	r18, 0x01	; 1
    1c18:	25 83       	std	Z+5, r18	; 0x05
    1c1a:	8a 80       	ldd	r8, Y+2	; 0x02
    1c1c:	9b 80       	ldd	r9, Y+3	; 0x03
    1c1e:	d4 01       	movw	r26, r8
    1c20:	16 96       	adiw	r26, 0x06	; 6
    1c22:	2c 91       	ld	r18, X
    1c24:	16 97       	sbiw	r26, 0x06	; 6
    1c26:	21 11       	cpse	r18, r1
    1c28:	1b c0       	rjmp	.+54     	; 0x1c60 <qtm_key_sensors_process+0x5a4>
    1c2a:	8a 80       	ldd	r8, Y+2	; 0x02
    1c2c:	9b 80       	ldd	r9, Y+3	; 0x03
    1c2e:	f4 01       	movw	r30, r8
    1c30:	27 81       	ldd	r18, Z+7	; 0x07
    1c32:	21 11       	cpse	r18, r1
    1c34:	48 c0       	rjmp	.+144    	; 0x1cc6 <qtm_key_sensors_process+0x60a>
    1c36:	ea 81       	ldd	r30, Y+2	; 0x02
    1c38:	fb 81       	ldd	r31, Y+3	; 0x03
    1c3a:	23 81       	ldd	r18, Z+3	; 0x03
    1c3c:	22 23       	and	r18, r18
    1c3e:	61 f0       	breq	.+24     	; 0x1c58 <qtm_key_sensors_process+0x59c>
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	a0 e0       	ldi	r26, 0x00	; 0
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	ea 81       	ldd	r30, Y+2	; 0x02
    1c4a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c4c:	40 81       	ld	r20, Z
    1c4e:	51 81       	ldd	r21, Z+1	; 0x01
    1c50:	a4 17       	cp	r26, r20
    1c52:	b5 07       	cpc	r27, r21
    1c54:	08 f4       	brcc	.+2      	; 0x1c58 <qtm_key_sensors_process+0x59c>
    1c56:	6e c0       	rjmp	.+220    	; 0x1d34 <qtm_key_sensors_process+0x678>
    1c58:	89 3c       	cpi	r24, 0xC9	; 201
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	28 f6       	brcc	.-118    	; 0x1be8 <qtm_key_sensors_process+0x52c>
    1c5e:	bb cf       	rjmp	.-138    	; 0x1bd6 <qtm_key_sensors_process+0x51a>
    1c60:	08 81       	ld	r16, Y
    1c62:	19 81       	ldd	r17, Y+1	; 0x01
    1c64:	f8 01       	movw	r30, r16
    1c66:	24 81       	ldd	r18, Z+4	; 0x04
    1c68:	21 11       	cpse	r18, r1
    1c6a:	df cf       	rjmp	.-66     	; 0x1c2a <qtm_key_sensors_process+0x56e>
    1c6c:	ed 90       	ld	r14, X+
    1c6e:	fc 90       	ld	r15, X
    1c70:	60 e0       	ldi	r22, 0x00	; 0
    1c72:	70 e0       	ldi	r23, 0x00	; 0
    1c74:	40 e0       	ldi	r20, 0x00	; 0
    1c76:	50 e0       	ldi	r21, 0x00	; 0
    1c78:	4e 15       	cp	r20, r14
    1c7a:	5f 05       	cpc	r21, r15
    1c7c:	f1 f0       	breq	.+60     	; 0x1cba <qtm_key_sensors_process+0x5fe>
    1c7e:	ec 81       	ldd	r30, Y+4	; 0x04
    1c80:	fd 81       	ldd	r31, Y+5	; 0x05
    1c82:	e6 0f       	add	r30, r22
    1c84:	f7 1f       	adc	r31, r23
    1c86:	20 81       	ld	r18, Z
    1c88:	23 30       	cpi	r18, 0x03	; 3
    1c8a:	11 f0       	breq	.+4      	; 0x1c90 <qtm_key_sensors_process+0x5d4>
    1c8c:	28 30       	cpi	r18, 0x08	; 8
    1c8e:	81 f4       	brne	.+32     	; 0x1cb0 <qtm_key_sensors_process+0x5f4>
    1c90:	24 81       	ldd	r18, Z+4	; 0x04
    1c92:	35 81       	ldd	r19, Z+5	; 0x05
    1c94:	c2 80       	ldd	r12, Z+2	; 0x02
    1c96:	d3 80       	ldd	r13, Z+3	; 0x03
    1c98:	d6 01       	movw	r26, r12
    1c9a:	11 96       	adiw	r26, 0x01	; 1
    1c9c:	cd 90       	ld	r12, X+
    1c9e:	dc 90       	ld	r13, X
    1ca0:	12 97       	sbiw	r26, 0x02	; 2
    1ca2:	2c 15       	cp	r18, r12
    1ca4:	3d 05       	cpc	r19, r13
    1ca6:	20 f4       	brcc	.+8      	; 0x1cb0 <qtm_key_sensors_process+0x5f4>
    1ca8:	2f 5f       	subi	r18, 0xFF	; 255
    1caa:	3f 4f       	sbci	r19, 0xFF	; 255
    1cac:	35 83       	std	Z+5, r19	; 0x05
    1cae:	24 83       	std	Z+4, r18	; 0x04
    1cb0:	4f 5f       	subi	r20, 0xFF	; 255
    1cb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb4:	6a 5f       	subi	r22, 0xFA	; 250
    1cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb8:	df cf       	rjmp	.-66     	; 0x1c78 <qtm_key_sensors_process+0x5bc>
    1cba:	f4 01       	movw	r30, r8
    1cbc:	26 81       	ldd	r18, Z+6	; 0x06
    1cbe:	d8 01       	movw	r26, r16
    1cc0:	14 96       	adiw	r26, 0x04	; 4
    1cc2:	2c 93       	st	X, r18
    1cc4:	b2 cf       	rjmp	.-156    	; 0x1c2a <qtm_key_sensors_process+0x56e>
    1cc6:	08 81       	ld	r16, Y
    1cc8:	19 81       	ldd	r17, Y+1	; 0x01
    1cca:	d8 01       	movw	r26, r16
    1ccc:	15 96       	adiw	r26, 0x05	; 5
    1cce:	2c 91       	ld	r18, X
    1cd0:	21 11       	cpse	r18, r1
    1cd2:	b1 cf       	rjmp	.-158    	; 0x1c36 <qtm_key_sensors_process+0x57a>
    1cd4:	e0 80       	ld	r14, Z
    1cd6:	f1 80       	ldd	r15, Z+1	; 0x01
    1cd8:	60 e0       	ldi	r22, 0x00	; 0
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	40 e0       	ldi	r20, 0x00	; 0
    1cde:	50 e0       	ldi	r21, 0x00	; 0
    1ce0:	4e 15       	cp	r20, r14
    1ce2:	5f 05       	cpc	r21, r15
    1ce4:	f1 f0       	breq	.+60     	; 0x1d22 <qtm_key_sensors_process+0x666>
    1ce6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ce8:	fd 81       	ldd	r31, Y+5	; 0x05
    1cea:	e6 0f       	add	r30, r22
    1cec:	f7 1f       	adc	r31, r23
    1cee:	20 81       	ld	r18, Z
    1cf0:	23 30       	cpi	r18, 0x03	; 3
    1cf2:	11 f0       	breq	.+4      	; 0x1cf8 <qtm_key_sensors_process+0x63c>
    1cf4:	28 30       	cpi	r18, 0x08	; 8
    1cf6:	81 f4       	brne	.+32     	; 0x1d18 <qtm_key_sensors_process+0x65c>
    1cf8:	24 81       	ldd	r18, Z+4	; 0x04
    1cfa:	35 81       	ldd	r19, Z+5	; 0x05
    1cfc:	c2 80       	ldd	r12, Z+2	; 0x02
    1cfe:	d3 80       	ldd	r13, Z+3	; 0x03
    1d00:	d6 01       	movw	r26, r12
    1d02:	11 96       	adiw	r26, 0x01	; 1
    1d04:	cd 90       	ld	r12, X+
    1d06:	dc 90       	ld	r13, X
    1d08:	12 97       	sbiw	r26, 0x02	; 2
    1d0a:	c2 16       	cp	r12, r18
    1d0c:	d3 06       	cpc	r13, r19
    1d0e:	20 f4       	brcc	.+8      	; 0x1d18 <qtm_key_sensors_process+0x65c>
    1d10:	21 50       	subi	r18, 0x01	; 1
    1d12:	31 09       	sbc	r19, r1
    1d14:	35 83       	std	Z+5, r19	; 0x05
    1d16:	24 83       	std	Z+4, r18	; 0x04
    1d18:	4f 5f       	subi	r20, 0xFF	; 255
    1d1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d1c:	6a 5f       	subi	r22, 0xFA	; 250
    1d1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d20:	df cf       	rjmp	.-66     	; 0x1ce0 <qtm_key_sensors_process+0x624>
    1d22:	f4 01       	movw	r30, r8
    1d24:	27 81       	ldd	r18, Z+7	; 0x07
    1d26:	d8 01       	movw	r26, r16
    1d28:	15 96       	adiw	r26, 0x05	; 5
    1d2a:	2c 93       	st	X, r18
    1d2c:	84 cf       	rjmp	.-248    	; 0x1c36 <qtm_key_sensors_process+0x57a>
    1d2e:	21 50       	subi	r18, 0x01	; 1
    1d30:	23 83       	std	Z+3, r18	; 0x03
    1d32:	81 cf       	rjmp	.-254    	; 0x1c36 <qtm_key_sensors_process+0x57a>
    1d34:	a9 01       	movw	r20, r18
    1d36:	44 0f       	add	r20, r20
    1d38:	55 1f       	adc	r21, r21
    1d3a:	ec 81       	ldd	r30, Y+4	; 0x04
    1d3c:	fd 81       	ldd	r31, Y+5	; 0x05
    1d3e:	e4 0f       	add	r30, r20
    1d40:	f5 1f       	adc	r31, r21
    1d42:	60 81       	ld	r22, Z
    1d44:	65 38       	cpi	r22, 0x85	; 133
    1d46:	09 f0       	breq	.+2      	; 0x1d4a <qtm_key_sensors_process+0x68e>
    1d48:	47 c0       	rjmp	.+142    	; 0x1dd8 <qtm_key_sensors_process+0x71c>
    1d4a:	61 81       	ldd	r22, Z+1	; 0x01
    1d4c:	66 23       	and	r22, r22
    1d4e:	19 f0       	breq	.+6      	; 0x1d56 <qtm_key_sensors_process+0x69a>
    1d50:	61 50       	subi	r22, 0x01	; 1
    1d52:	61 83       	std	Z+1, r22	; 0x01
    1d54:	41 c0       	rjmp	.+130    	; 0x1dd8 <qtm_key_sensors_process+0x71c>
    1d56:	a0 82       	st	Z, r10
    1d58:	6c 81       	ldd	r22, Y+4	; 0x04
    1d5a:	7d 81       	ldd	r23, Y+5	; 0x05
    1d5c:	fb 01       	movw	r30, r22
    1d5e:	e4 0f       	add	r30, r20
    1d60:	f5 1f       	adc	r31, r21
    1d62:	02 80       	ldd	r0, Z+2	; 0x02
    1d64:	f3 81       	ldd	r31, Z+3	; 0x03
    1d66:	e0 2d       	mov	r30, r0
    1d68:	b0 82       	st	Z, r11
    1d6a:	ee 81       	ldd	r30, Y+6	; 0x06
    1d6c:	ff 81       	ldd	r31, Y+7	; 0x07
    1d6e:	e2 0f       	add	r30, r18
    1d70:	f3 1f       	adc	r31, r19
    1d72:	d2 80       	ldd	r13, Z+2	; 0x02
    1d74:	dd 20       	and	r13, r13
    1d76:	81 f1       	breq	.+96     	; 0x1dd8 <qtm_key_sensors_process+0x71c>
    1d78:	40 e0       	ldi	r20, 0x00	; 0
    1d7a:	50 e0       	ldi	r21, 0x00	; 0
    1d7c:	00 e0       	ldi	r16, 0x00	; 0
    1d7e:	10 e0       	ldi	r17, 0x00	; 0
    1d80:	ea 81       	ldd	r30, Y+2	; 0x02
    1d82:	fb 81       	ldd	r31, Y+3	; 0x03
    1d84:	60 81       	ld	r22, Z
    1d86:	71 81       	ldd	r23, Z+1	; 0x01
    1d88:	06 17       	cp	r16, r22
    1d8a:	17 07       	cpc	r17, r23
    1d8c:	28 f5       	brcc	.+74     	; 0x1dd8 <qtm_key_sensors_process+0x71c>
    1d8e:	ee 81       	ldd	r30, Y+6	; 0x06
    1d90:	ff 81       	ldd	r31, Y+7	; 0x07
    1d92:	e4 0f       	add	r30, r20
    1d94:	f5 1f       	adc	r31, r21
    1d96:	62 81       	ldd	r22, Z+2	; 0x02
    1d98:	d6 12       	cpse	r13, r22
    1d9a:	19 c0       	rjmp	.+50     	; 0x1dce <qtm_key_sensors_process+0x712>
    1d9c:	ba 01       	movw	r22, r20
    1d9e:	66 0f       	add	r22, r22
    1da0:	77 1f       	adc	r23, r23
    1da2:	ec 81       	ldd	r30, Y+4	; 0x04
    1da4:	fd 81       	ldd	r31, Y+5	; 0x05
    1da6:	4f 01       	movw	r8, r30
    1da8:	86 0e       	add	r8, r22
    1daa:	97 1e       	adc	r9, r23
    1dac:	f4 01       	movw	r30, r8
    1dae:	e2 80       	ldd	r14, Z+2	; 0x02
    1db0:	f3 80       	ldd	r15, Z+3	; 0x03
    1db2:	f7 01       	movw	r30, r14
    1db4:	f0 80       	ld	r15, Z
    1db6:	f0 fe       	sbrs	r15, 0
    1db8:	0a c0       	rjmp	.+20     	; 0x1dce <qtm_key_sensors_process+0x712>
    1dba:	f4 01       	movw	r30, r8
    1dbc:	a0 82       	st	Z, r10
    1dbe:	ec 81       	ldd	r30, Y+4	; 0x04
    1dc0:	fd 81       	ldd	r31, Y+5	; 0x05
    1dc2:	e6 0f       	add	r30, r22
    1dc4:	f7 1f       	adc	r31, r23
    1dc6:	02 80       	ldd	r0, Z+2	; 0x02
    1dc8:	f3 81       	ldd	r31, Z+3	; 0x03
    1dca:	e0 2d       	mov	r30, r0
    1dcc:	b0 82       	st	Z, r11
    1dce:	0f 5f       	subi	r16, 0xFF	; 255
    1dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd2:	4d 5f       	subi	r20, 0xFD	; 253
    1dd4:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd6:	d4 cf       	rjmp	.-88     	; 0x1d80 <qtm_key_sensors_process+0x6c4>
    1dd8:	11 96       	adiw	r26, 0x01	; 1
    1dda:	2d 5f       	subi	r18, 0xFD	; 253
    1ddc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dde:	34 cf       	rjmp	.-408    	; 0x1c48 <qtm_key_sensors_process+0x58c>
    1de0:	8b e0       	ldi	r24, 0x0B	; 11
    1de2:	df 91       	pop	r29
    1de4:	cf 91       	pop	r28
    1de6:	1f 91       	pop	r17
    1de8:	0f 91       	pop	r16
    1dea:	ff 90       	pop	r15
    1dec:	ef 90       	pop	r14
    1dee:	df 90       	pop	r13
    1df0:	cf 90       	pop	r12
    1df2:	bf 90       	pop	r11
    1df4:	af 90       	pop	r10
    1df6:	9f 90       	pop	r9
    1df8:	8f 90       	pop	r8
    1dfa:	7f 90       	pop	r7
    1dfc:	6f 90       	pop	r6
    1dfe:	5f 90       	pop	r5
    1e00:	4f 90       	pop	r4
    1e02:	3f 90       	pop	r3
    1e04:	2f 90       	pop	r2
    1e06:	08 95       	ret

00001e08 <qtm_freq_hop_autotune>:
    1e08:	2f 92       	push	r2
    1e0a:	3f 92       	push	r3
    1e0c:	4f 92       	push	r4
    1e0e:	5f 92       	push	r5
    1e10:	6f 92       	push	r6
    1e12:	7f 92       	push	r7
    1e14:	8f 92       	push	r8
    1e16:	9f 92       	push	r9
    1e18:	af 92       	push	r10
    1e1a:	bf 92       	push	r11
    1e1c:	cf 92       	push	r12
    1e1e:	df 92       	push	r13
    1e20:	ef 92       	push	r14
    1e22:	ff 92       	push	r15
    1e24:	0f 93       	push	r16
    1e26:	1f 93       	push	r17
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	2c 97       	sbiw	r28, 0x0c	; 12
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	2c 01       	movw	r4, r24
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <qtm_freq_hop_autotune+0x3c>
    1e42:	63 c1       	rjmp	.+710    	; 0x210a <qtm_freq_hop_autotune+0x302>
    1e44:	dc 01       	movw	r26, r24
    1e46:	12 96       	adiw	r26, 0x02	; 2
    1e48:	2d 90       	ld	r2, X+
    1e4a:	3c 90       	ld	r3, X
    1e4c:	13 97       	sbiw	r26, 0x03	; 3
    1e4e:	f1 01       	movw	r30, r2
    1e50:	72 80       	ldd	r7, Z+2	; 0x02
    1e52:	ed 91       	ld	r30, X+
    1e54:	fc 91       	ld	r31, X
    1e56:	61 80       	ldd	r6, Z+1	; 0x01
    1e58:	d1 01       	movw	r26, r2
    1e5a:	17 96       	adiw	r26, 0x07	; 7
    1e5c:	8c 91       	ld	r24, X
    1e5e:	17 97       	sbiw	r26, 0x07	; 7
    1e60:	e7 2c       	mov	r14, r7
    1e62:	f1 2c       	mov	r15, r1
    1e64:	fc 82       	std	Y+4, r15	; 0x04
    1e66:	eb 82       	std	Y+3, r14	; 0x03
    1e68:	26 2d       	mov	r18, r6
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	88 23       	and	r24, r24
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <qtm_freq_hop_autotune+0x6a>
    1e70:	a9 c0       	rjmp	.+338    	; 0x1fc4 <qtm_freq_hop_autotune+0x1bc>
    1e72:	8d 90       	ld	r8, X+
    1e74:	9c 90       	ld	r9, X
    1e76:	57 01       	movw	r10, r14
    1e78:	aa 0c       	add	r10, r10
    1e7a:	bb 1c       	adc	r11, r11
    1e7c:	69 01       	movw	r12, r18
    1e7e:	cc 0c       	add	r12, r12
    1e80:	dd 1c       	adc	r13, r13
    1e82:	e1 2c       	mov	r14, r1
    1e84:	f1 2c       	mov	r15, r1
    1e86:	40 e0       	ldi	r20, 0x00	; 0
    1e88:	50 e0       	ldi	r21, 0x00	; 0
    1e8a:	00 e0       	ldi	r16, 0x00	; 0
    1e8c:	10 e0       	ldi	r17, 0x00	; 0
    1e8e:	08 15       	cp	r16, r8
    1e90:	19 05       	cpc	r17, r9
    1e92:	49 f1       	breq	.+82     	; 0x1ee6 <qtm_freq_hop_autotune+0xde>
    1e94:	84 81       	ldd	r24, Z+4	; 0x04
    1e96:	95 81       	ldd	r25, Z+5	; 0x05
    1e98:	8e 0d       	add	r24, r14
    1e9a:	9f 1d       	adc	r25, r15
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	11 96       	adiw	r26, 0x01	; 1
    1ea0:	6d 91       	ld	r22, X+
    1ea2:	7c 91       	ld	r23, X
    1ea4:	12 97       	sbiw	r26, 0x02	; 2
    1ea6:	82 81       	ldd	r24, Z+2	; 0x02
    1ea8:	93 81       	ldd	r25, Z+3	; 0x03
    1eaa:	8c 0d       	add	r24, r12
    1eac:	9d 1d       	adc	r25, r13
    1eae:	dc 01       	movw	r26, r24
    1eb0:	8d 91       	ld	r24, X+
    1eb2:	9c 91       	ld	r25, X
    1eb4:	86 17       	cp	r24, r22
    1eb6:	97 07       	cpc	r25, r23
    1eb8:	28 f4       	brcc	.+10     	; 0x1ec4 <qtm_freq_hop_autotune+0xbc>
    1eba:	db 01       	movw	r26, r22
    1ebc:	a8 1b       	sub	r26, r24
    1ebe:	b9 0b       	sbc	r27, r25
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	05 c0       	rjmp	.+10     	; 0x1ece <qtm_freq_hop_autotune+0xc6>
    1ec4:	68 17       	cp	r22, r24
    1ec6:	79 07       	cpc	r23, r25
    1ec8:	30 f4       	brcc	.+12     	; 0x1ed6 <qtm_freq_hop_autotune+0xce>
    1eca:	86 1b       	sub	r24, r22
    1ecc:	97 0b       	sbc	r25, r23
    1ece:	48 17       	cp	r20, r24
    1ed0:	59 07       	cpc	r21, r25
    1ed2:	08 f4       	brcc	.+2      	; 0x1ed6 <qtm_freq_hop_autotune+0xce>
    1ed4:	ac 01       	movw	r20, r24
    1ed6:	0f 5f       	subi	r16, 0xFF	; 255
    1ed8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eda:	b5 e0       	ldi	r27, 0x05	; 5
    1edc:	eb 0e       	add	r14, r27
    1ede:	f1 1c       	adc	r15, r1
    1ee0:	ca 0c       	add	r12, r10
    1ee2:	db 1c       	adc	r13, r11
    1ee4:	d4 cf       	rjmp	.-88     	; 0x1e8e <qtm_freq_hop_autotune+0x86>
    1ee6:	d1 01       	movw	r26, r2
    1ee8:	18 96       	adiw	r26, 0x08	; 8
    1eea:	8c 91       	ld	r24, X
    1eec:	68 2f       	mov	r22, r24
    1eee:	70 e0       	ldi	r23, 0x00	; 0
    1ef0:	64 17       	cp	r22, r20
    1ef2:	75 07       	cpc	r23, r21
    1ef4:	08 f0       	brcs	.+2      	; 0x1ef8 <qtm_freq_hop_autotune+0xf0>
    1ef6:	57 c0       	rjmp	.+174    	; 0x1fa6 <qtm_freq_hop_autotune+0x19e>
    1ef8:	06 80       	ldd	r0, Z+6	; 0x06
    1efa:	f7 81       	ldd	r31, Z+7	; 0x07
    1efc:	e0 2d       	mov	r30, r0
    1efe:	e2 0f       	add	r30, r18
    1f00:	f3 1f       	adc	r31, r19
    1f02:	80 81       	ld	r24, Z
    1f04:	8f 5f       	subi	r24, 0xFF	; 255
    1f06:	80 83       	st	Z, r24
    1f08:	f2 01       	movw	r30, r4
    1f0a:	40 81       	ld	r20, Z
    1f0c:	51 81       	ldd	r21, Z+1	; 0x01
    1f0e:	a2 81       	ldd	r26, Z+2	; 0x02
    1f10:	b3 81       	ldd	r27, Z+3	; 0x03
    1f12:	fa 01       	movw	r30, r20
    1f14:	81 81       	ldd	r24, Z+1	; 0x01
    1f16:	46 81       	ldd	r20, Z+6	; 0x06
    1f18:	57 81       	ldd	r21, Z+7	; 0x07
    1f1a:	fa 01       	movw	r30, r20
    1f1c:	e8 0f       	add	r30, r24
    1f1e:	f1 1d       	adc	r31, r1
    1f20:	90 81       	ld	r25, Z
    1f22:	19 96       	adiw	r26, 0x09	; 9
    1f24:	8c 91       	ld	r24, X
    1f26:	19 97       	sbiw	r26, 0x09	; 9
    1f28:	98 13       	cpse	r25, r24
    1f2a:	4c c0       	rjmp	.+152    	; 0x1fc4 <qtm_freq_hop_autotune+0x1bc>
    1f2c:	15 96       	adiw	r26, 0x05	; 5
    1f2e:	0d 91       	ld	r16, X+
    1f30:	1c 91       	ld	r17, X
    1f32:	16 97       	sbiw	r26, 0x06	; 6
    1f34:	d8 01       	movw	r26, r16
    1f36:	a2 0f       	add	r26, r18
    1f38:	b3 1f       	adc	r27, r19
    1f3a:	8c 91       	ld	r24, X
    1f3c:	88 23       	and	r24, r24
    1f3e:	11 f0       	breq	.+4      	; 0x1f44 <qtm_freq_hop_autotune+0x13c>
    1f40:	81 50       	subi	r24, 0x01	; 1
    1f42:	01 c0       	rjmp	.+2      	; 0x1f46 <qtm_freq_hop_autotune+0x13e>
    1f44:	8f e0       	ldi	r24, 0x0F	; 15
    1f46:	f8 01       	movw	r30, r16
    1f48:	61 e0       	ldi	r22, 0x01	; 1
    1f4a:	70 e0       	ldi	r23, 0x00	; 0
    1f4c:	40 e0       	ldi	r20, 0x00	; 0
    1f4e:	50 e0       	ldi	r21, 0x00	; 0
    1f50:	eb 80       	ldd	r14, Y+3	; 0x03
    1f52:	fc 80       	ldd	r15, Y+4	; 0x04
    1f54:	4e 15       	cp	r20, r14
    1f56:	5f 05       	cpc	r21, r15
    1f58:	60 f4       	brcc	.+24     	; 0x1f72 <qtm_freq_hop_autotune+0x16a>
    1f5a:	42 17       	cp	r20, r18
    1f5c:	53 07       	cpc	r21, r19
    1f5e:	29 f0       	breq	.+10     	; 0x1f6a <qtm_freq_hop_autotune+0x162>
    1f60:	90 81       	ld	r25, Z
    1f62:	98 13       	cpse	r25, r24
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <qtm_freq_hop_autotune+0x162>
    1f66:	60 e0       	ldi	r22, 0x00	; 0
    1f68:	70 e0       	ldi	r23, 0x00	; 0
    1f6a:	4f 5f       	subi	r20, 0xFF	; 255
    1f6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f6e:	31 96       	adiw	r30, 0x01	; 1
    1f70:	ef cf       	rjmp	.-34     	; 0x1f50 <qtm_freq_hop_autotune+0x148>
    1f72:	67 2b       	or	r22, r23
    1f74:	19 f3       	breq	.-58     	; 0x1f3c <qtm_freq_hop_autotune+0x134>
    1f76:	8c 93       	st	X, r24
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	d2 01       	movw	r26, r4
    1f7e:	12 96       	adiw	r26, 0x02	; 2
    1f80:	ed 91       	ld	r30, X+
    1f82:	fc 91       	ld	r31, X
    1f84:	13 97       	sbiw	r26, 0x03	; 3
    1f86:	42 81       	ldd	r20, Z+2	; 0x02
    1f88:	50 e0       	ldi	r21, 0x00	; 0
    1f8a:	84 17       	cp	r24, r20
    1f8c:	95 07       	cpc	r25, r21
    1f8e:	d0 f4       	brcc	.+52     	; 0x1fc4 <qtm_freq_hop_autotune+0x1bc>
    1f90:	d2 01       	movw	r26, r4
    1f92:	ed 91       	ld	r30, X+
    1f94:	fc 91       	ld	r31, X
    1f96:	06 80       	ldd	r0, Z+6	; 0x06
    1f98:	f7 81       	ldd	r31, Z+7	; 0x07
    1f9a:	e0 2d       	mov	r30, r0
    1f9c:	e8 0f       	add	r30, r24
    1f9e:	f9 1f       	adc	r31, r25
    1fa0:	10 82       	st	Z, r1
    1fa2:	01 96       	adiw	r24, 0x01	; 1
    1fa4:	eb cf       	rjmp	.-42     	; 0x1f7c <qtm_freq_hop_autotune+0x174>
    1fa6:	86 95       	lsr	r24
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	48 17       	cp	r20, r24
    1fac:	59 07       	cpc	r21, r25
    1fae:	50 f4       	brcc	.+20     	; 0x1fc4 <qtm_freq_hop_autotune+0x1bc>
    1fb0:	06 80       	ldd	r0, Z+6	; 0x06
    1fb2:	f7 81       	ldd	r31, Z+7	; 0x07
    1fb4:	e0 2d       	mov	r30, r0
    1fb6:	e2 0f       	add	r30, r18
    1fb8:	f3 1f       	adc	r31, r19
    1fba:	80 81       	ld	r24, Z
    1fbc:	88 23       	and	r24, r24
    1fbe:	11 f0       	breq	.+4      	; 0x1fc4 <qtm_freq_hop_autotune+0x1bc>
    1fc0:	81 50       	subi	r24, 0x01	; 1
    1fc2:	80 83       	st	Z, r24
    1fc4:	f2 01       	movw	r30, r4
    1fc6:	02 80       	ldd	r0, Z+2	; 0x02
    1fc8:	f3 81       	ldd	r31, Z+3	; 0x03
    1fca:	e0 2d       	mov	r30, r0
    1fcc:	fa 83       	std	Y+2, r31	; 0x02
    1fce:	e9 83       	std	Y+1, r30	; 0x01
    1fd0:	eb 80       	ldd	r14, Y+3	; 0x03
    1fd2:	fc 80       	ldd	r15, Y+4	; 0x04
    1fd4:	ee 0c       	add	r14, r14
    1fd6:	ff 1c       	adc	r15, r15
    1fd8:	fc 82       	std	Y+4, r15	; 0x04
    1fda:	eb 82       	std	Y+3, r14	; 0x03
    1fdc:	b9 01       	movw	r22, r18
    1fde:	66 0f       	add	r22, r22
    1fe0:	77 1f       	adc	r23, r23
    1fe2:	7e 83       	std	Y+6, r23	; 0x06
    1fe4:	6d 83       	std	Y+5, r22	; 0x05
    1fe6:	d7 2c       	mov	r13, r7
    1fe8:	d6 94       	lsr	r13
    1fea:	d3 94       	inc	r13
    1fec:	40 e0       	ldi	r20, 0x00	; 0
    1fee:	50 e0       	ldi	r21, 0x00	; 0
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	e1 2c       	mov	r14, r1
    1ff6:	f1 2c       	mov	r15, r1
    1ff8:	8d 2d       	mov	r24, r13
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	98 87       	std	Y+8, r25	; 0x08
    1ffe:	8f 83       	std	Y+7, r24	; 0x07
    2000:	a9 81       	ldd	r26, Y+1	; 0x01
    2002:	ba 81       	ldd	r27, Y+2	; 0x02
    2004:	8d 91       	ld	r24, X+
    2006:	9c 91       	ld	r25, X
    2008:	e8 16       	cp	r14, r24
    200a:	f9 06       	cpc	r15, r25
    200c:	08 f0       	brcs	.+2      	; 0x2010 <qtm_freq_hop_autotune+0x208>
    200e:	68 c0       	rjmp	.+208    	; 0x20e0 <qtm_freq_hop_autotune+0x2d8>
    2010:	d2 01       	movw	r26, r4
    2012:	ed 91       	ld	r30, X+
    2014:	fc 91       	ld	r31, X
    2016:	a4 81       	ldd	r26, Z+4	; 0x04
    2018:	b5 81       	ldd	r27, Z+5	; 0x05
    201a:	bd 01       	movw	r22, r26
    201c:	62 0f       	add	r22, r18
    201e:	73 1f       	adc	r23, r19
    2020:	7c 87       	std	Y+12, r23	; 0x0c
    2022:	6b 87       	std	Y+11, r22	; 0x0b
    2024:	db 01       	movw	r26, r22
    2026:	8c 91       	ld	r24, X
    2028:	8c 71       	andi	r24, 0x1C	; 28
    202a:	09 f0       	breq	.+2      	; 0x202e <qtm_freq_hop_autotune+0x226>
    202c:	4f c0       	rjmp	.+158    	; 0x20cc <qtm_freq_hop_autotune+0x2c4>
    202e:	11 96       	adiw	r26, 0x01	; 1
    2030:	6d 91       	ld	r22, X+
    2032:	7c 91       	ld	r23, X
    2034:	12 97       	sbiw	r26, 0x02	; 2
    2036:	82 81       	ldd	r24, Z+2	; 0x02
    2038:	93 81       	ldd	r25, Z+3	; 0x03
    203a:	84 0f       	add	r24, r20
    203c:	95 1f       	adc	r25, r21
    203e:	ed 81       	ldd	r30, Y+5	; 0x05
    2040:	fe 81       	ldd	r31, Y+6	; 0x06
    2042:	e8 0f       	add	r30, r24
    2044:	f9 1f       	adc	r31, r25
    2046:	71 83       	std	Z+1, r23	; 0x01
    2048:	60 83       	st	Z, r22
    204a:	a1 2c       	mov	r10, r1
    204c:	b1 2c       	mov	r11, r1
    204e:	c1 2c       	mov	r12, r1
    2050:	c7 14       	cp	r12, r7
    2052:	c0 f5       	brcc	.+112    	; 0x20c4 <qtm_freq_hop_autotune+0x2bc>
    2054:	fc 01       	movw	r30, r24
    2056:	ec 0d       	add	r30, r12
    2058:	f1 1d       	adc	r31, r1
    205a:	ec 0d       	add	r30, r12
    205c:	f1 1d       	adc	r31, r1
    205e:	9a 87       	std	Y+10, r25	; 0x0a
    2060:	89 87       	std	Y+9, r24	; 0x09
    2062:	99 24       	eor	r9, r9
    2064:	93 94       	inc	r9
    2066:	81 2c       	mov	r8, r1
    2068:	31 2c       	mov	r3, r1
    206a:	73 14       	cp	r7, r3
    206c:	c9 f0       	breq	.+50     	; 0x20a0 <qtm_freq_hop_autotune+0x298>
    206e:	c3 14       	cp	r12, r3
    2070:	79 f0       	breq	.+30     	; 0x2090 <qtm_freq_hop_autotune+0x288>
    2072:	a9 85       	ldd	r26, Y+9	; 0x09
    2074:	ba 85       	ldd	r27, Y+10	; 0x0a
    2076:	0d 91       	ld	r16, X+
    2078:	1c 91       	ld	r17, X
    207a:	60 81       	ld	r22, Z
    207c:	71 81       	ldd	r23, Z+1	; 0x01
    207e:	06 17       	cp	r16, r22
    2080:	17 07       	cpc	r17, r23
    2082:	11 f4       	brne	.+4      	; 0x2088 <qtm_freq_hop_autotune+0x280>
    2084:	93 94       	inc	r9
    2086:	04 c0       	rjmp	.+8      	; 0x2090 <qtm_freq_hop_autotune+0x288>
    2088:	06 17       	cp	r16, r22
    208a:	17 07       	cpc	r17, r23
    208c:	08 f4       	brcc	.+2      	; 0x2090 <qtm_freq_hop_autotune+0x288>
    208e:	83 94       	inc	r8
    2090:	33 94       	inc	r3
    2092:	69 85       	ldd	r22, Y+9	; 0x09
    2094:	7a 85       	ldd	r23, Y+10	; 0x0a
    2096:	6e 5f       	subi	r22, 0xFE	; 254
    2098:	7f 4f       	sbci	r23, 0xFF	; 255
    209a:	7a 87       	std	Y+10, r23	; 0x0a
    209c:	69 87       	std	Y+9, r22	; 0x09
    209e:	e5 cf       	rjmp	.-54     	; 0x206a <qtm_freq_hop_autotune+0x262>
    20a0:	9d 14       	cp	r9, r13
    20a2:	58 f4       	brcc	.+22     	; 0x20ba <qtm_freq_hop_autotune+0x2b2>
    20a4:	8d 14       	cp	r8, r13
    20a6:	60 f4       	brcc	.+24     	; 0x20c0 <qtm_freq_hop_autotune+0x2b8>
    20a8:	69 2d       	mov	r22, r9
    20aa:	70 e0       	ldi	r23, 0x00	; 0
    20ac:	68 0d       	add	r22, r8
    20ae:	71 1d       	adc	r23, r1
    20b0:	af 81       	ldd	r26, Y+7	; 0x07
    20b2:	b8 85       	ldd	r27, Y+8	; 0x08
    20b4:	6a 17       	cp	r22, r26
    20b6:	7b 07       	cpc	r23, r27
    20b8:	1c f0       	brlt	.+6      	; 0x20c0 <qtm_freq_hop_autotune+0x2b8>
    20ba:	a0 80       	ld	r10, Z
    20bc:	b1 80       	ldd	r11, Z+1	; 0x01
    20be:	c7 2c       	mov	r12, r7
    20c0:	c3 94       	inc	r12
    20c2:	c6 cf       	rjmp	.-116    	; 0x2050 <qtm_freq_hop_autotune+0x248>
    20c4:	eb 85       	ldd	r30, Y+11	; 0x0b
    20c6:	fc 85       	ldd	r31, Y+12	; 0x0c
    20c8:	b2 82       	std	Z+2, r11	; 0x02
    20ca:	a1 82       	std	Z+1, r10	; 0x01
    20cc:	ff ef       	ldi	r31, 0xFF	; 255
    20ce:	ef 1a       	sub	r14, r31
    20d0:	ff 0a       	sbc	r15, r31
    20d2:	2b 5f       	subi	r18, 0xFB	; 251
    20d4:	3f 4f       	sbci	r19, 0xFF	; 255
    20d6:	6b 81       	ldd	r22, Y+3	; 0x03
    20d8:	7c 81       	ldd	r23, Y+4	; 0x04
    20da:	46 0f       	add	r20, r22
    20dc:	57 1f       	adc	r21, r23
    20de:	90 cf       	rjmp	.-224    	; 0x2000 <qtm_freq_hop_autotune+0x1f8>
    20e0:	63 94       	inc	r6
    20e2:	67 14       	cp	r6, r7
    20e4:	08 f0       	brcs	.+2      	; 0x20e8 <qtm_freq_hop_autotune+0x2e0>
    20e6:	61 2c       	mov	r6, r1
    20e8:	e9 81       	ldd	r30, Y+1	; 0x01
    20ea:	fa 81       	ldd	r31, Y+2	; 0x02
    20ec:	a3 81       	ldd	r26, Z+3	; 0x03
    20ee:	b4 81       	ldd	r27, Z+4	; 0x04
    20f0:	85 81       	ldd	r24, Z+5	; 0x05
    20f2:	96 81       	ldd	r25, Z+6	; 0x06
    20f4:	fc 01       	movw	r30, r24
    20f6:	e6 0d       	add	r30, r6
    20f8:	f1 1d       	adc	r31, r1
    20fa:	80 81       	ld	r24, Z
    20fc:	8c 93       	st	X, r24
    20fe:	d2 01       	movw	r26, r4
    2100:	ed 91       	ld	r30, X+
    2102:	fc 91       	ld	r31, X
    2104:	61 82       	std	Z+1, r6	; 0x01
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	01 c0       	rjmp	.+2      	; 0x210c <qtm_freq_hop_autotune+0x304>
    210a:	8b e0       	ldi	r24, 0x0B	; 11
    210c:	2c 96       	adiw	r28, 0x0c	; 12
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	f8 94       	cli
    2112:	de bf       	out	0x3e, r29	; 62
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	cd bf       	out	0x3d, r28	; 61
    2118:	df 91       	pop	r29
    211a:	cf 91       	pop	r28
    211c:	1f 91       	pop	r17
    211e:	0f 91       	pop	r16
    2120:	ff 90       	pop	r15
    2122:	ef 90       	pop	r14
    2124:	df 90       	pop	r13
    2126:	cf 90       	pop	r12
    2128:	bf 90       	pop	r11
    212a:	af 90       	pop	r10
    212c:	9f 90       	pop	r9
    212e:	8f 90       	pop	r8
    2130:	7f 90       	pop	r7
    2132:	6f 90       	pop	r6
    2134:	5f 90       	pop	r5
    2136:	4f 90       	pop	r4
    2138:	3f 90       	pop	r3
    213a:	2f 90       	pop	r2
    213c:	08 95       	ret

0000213e <qtm_error_handler>:
    213e:	95 e0       	ldi	r25, 0x05	; 5
    2140:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <qtm_state>
    2144:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <qtm>
    2148:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <qtm+0x1>
    214c:	01 88       	ldd	r0, Z+17	; 0x11
    214e:	f2 89       	ldd	r31, Z+18	; 0x12
    2150:	e0 2d       	mov	r30, r0
    2152:	30 97       	sbiw	r30, 0x00	; 0
    2154:	09 f0       	breq	.+2      	; 0x2158 <qtm_error_handler+0x1a>
    2156:	09 94       	ijmp
    2158:	ff cf       	rjmp	.-2      	; 0x2158 <qtm_error_handler+0x1a>

0000215a <generic_callback_function>:
    215a:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <qtm>
    215e:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <qtm+0x1>
    2162:	03 88       	ldd	r0, Z+19	; 0x13
    2164:	f4 89       	ldd	r31, Z+20	; 0x14
    2166:	e0 2d       	mov	r30, r0
    2168:	30 97       	sbiw	r30, 0x00	; 0
    216a:	09 f0       	breq	.+2      	; 0x216e <generic_callback_function+0x14>
    216c:	09 94       	ijmp
    216e:	80 e4       	ldi	r24, 0x40	; 64
    2170:	0c 94 9f 10 	jmp	0x213e	; 0x213e <qtm_error_handler>

00002174 <qmt_get_binding_layer_ptr>:
    2174:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <qtm>
    2178:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <qtm+0x1>
    217c:	08 95       	ret

0000217e <qtm_binding_layer_init>:
    217e:	cf 93       	push	r28
    2180:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <qtm+0x1>
    2184:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <qtm>
    2188:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <qtm_state>
    218c:	85 30       	cpi	r24, 0x05	; 5
    218e:	39 f0       	breq	.+14     	; 0x219e <qtm_binding_layer_init+0x20>
    2190:	82 30       	cpi	r24, 0x02	; 2
    2192:	28 f0       	brcs	.+10     	; 0x219e <qtm_binding_layer_init+0x20>
    2194:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <errors>
    2198:	88 23       	and	r24, r24
    219a:	71 f1       	breq	.+92     	; 0x21f8 <qtm_binding_layer_init+0x7a>
    219c:	40 c0       	rjmp	.+128    	; 0x221e <qtm_binding_layer_init+0xa0>
    219e:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <errors>
    21a2:	c0 e0       	ldi	r28, 0x00	; 0
    21a4:	a0 91 e0 01 	lds	r26, 0x01E0	; 0x8001e0 <qtm>
    21a8:	b0 91 e1 01 	lds	r27, 0x01E1	; 0x8001e1 <qtm+0x1>
    21ac:	8c 2f       	mov	r24, r28
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	11 96       	adiw	r26, 0x01	; 1
    21b6:	ed 91       	ld	r30, X+
    21b8:	fc 91       	ld	r31, X
    21ba:	12 97       	sbiw	r26, 0x02	; 2
    21bc:	e8 0f       	add	r30, r24
    21be:	f9 1f       	adc	r31, r25
    21c0:	01 90       	ld	r0, Z+
    21c2:	f0 81       	ld	r31, Z
    21c4:	e0 2d       	mov	r30, r0
    21c6:	30 97       	sbiw	r30, 0x00	; 0
    21c8:	29 f3       	breq	.-54     	; 0x2194 <qtm_binding_layer_init+0x16>
    21ca:	17 96       	adiw	r26, 0x07	; 7
    21cc:	2d 91       	ld	r18, X+
    21ce:	3c 91       	ld	r19, X
    21d0:	18 97       	sbiw	r26, 0x08	; 8
    21d2:	d9 01       	movw	r26, r18
    21d4:	a8 0f       	add	r26, r24
    21d6:	b9 1f       	adc	r27, r25
    21d8:	8d 91       	ld	r24, X+
    21da:	9c 91       	ld	r25, X
    21dc:	09 95       	icall
    21de:	88 23       	and	r24, r24
    21e0:	29 f0       	breq	.+10     	; 0x21ec <qtm_binding_layer_init+0x6e>
    21e2:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <errors>
    21e6:	8f 5f       	subi	r24, 0xFF	; 255
    21e8:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <errors>
    21ec:	cf 5f       	subi	r28, 0xFF	; 255
    21ee:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <errors>
    21f2:	88 23       	and	r24, r24
    21f4:	b9 f2       	breq	.-82     	; 0x21a4 <qtm_binding_layer_init+0x26>
    21f6:	ce cf       	rjmp	.-100    	; 0x2194 <qtm_binding_layer_init+0x16>
    21f8:	82 e0       	ldi	r24, 0x02	; 2
    21fa:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <qtm_state>
    21fe:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <qtm>
    2202:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <qtm+0x1>
    2206:	07 84       	ldd	r0, Z+15	; 0x0f
    2208:	f0 89       	ldd	r31, Z+16	; 0x10
    220a:	e0 2d       	mov	r30, r0
    220c:	30 97       	sbiw	r30, 0x00	; 0
    220e:	11 f0       	breq	.+4      	; 0x2214 <qtm_binding_layer_init+0x96>
    2210:	09 95       	icall
    2212:	08 c0       	rjmp	.+16     	; 0x2224 <qtm_binding_layer_init+0xa6>
    2214:	85 e0       	ldi	r24, 0x05	; 5
    2216:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <qtm_state>
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	01 c0       	rjmp	.+2      	; 0x2220 <qtm_binding_layer_init+0xa2>
    221e:	8f 5f       	subi	r24, 0xFF	; 255
    2220:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <errors>
    2224:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <errors>
    2228:	88 23       	and	r24, r24
    222a:	31 f0       	breq	.+12     	; 0x2238 <qtm_binding_layer_init+0xba>
    222c:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <errors>
    2230:	80 e8       	ldi	r24, 0x80	; 128
    2232:	cf 91       	pop	r28
    2234:	0c 94 9f 10 	jmp	0x213e	; 0x213e <qtm_error_handler>
    2238:	cf 91       	pop	r28
    223a:	08 95       	ret

0000223c <qtm_lib_start_acquisition>:
    223c:	1f 93       	push	r17
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	18 2f       	mov	r17, r24
    2244:	a0 91 e0 01 	lds	r26, 0x01E0	; 0x8001e0 <qtm>
    2248:	b0 91 e1 01 	lds	r27, 0x01E1	; 0x8001e1 <qtm+0x1>
    224c:	15 96       	adiw	r26, 0x05	; 5
    224e:	2d 91       	ld	r18, X+
    2250:	3c 91       	ld	r19, X
    2252:	16 97       	sbiw	r26, 0x06	; 6
    2254:	d0 e0       	ldi	r29, 0x00	; 0
    2256:	f9 01       	movw	r30, r18
    2258:	ed 0f       	add	r30, r29
    225a:	f1 1d       	adc	r31, r1
    225c:	ed 0f       	add	r30, r29
    225e:	f1 1d       	adc	r31, r1
    2260:	80 81       	ld	r24, Z
    2262:	91 81       	ldd	r25, Z+1	; 0x01
    2264:	89 2b       	or	r24, r25
    2266:	11 f0       	breq	.+4      	; 0x226c <qtm_lib_start_acquisition+0x30>
    2268:	df 5f       	subi	r29, 0xFF	; 255
    226a:	f5 cf       	rjmp	.-22     	; 0x2256 <qtm_lib_start_acquisition+0x1a>
    226c:	53 96       	adiw	r26, 0x13	; 19
    226e:	8d 91       	ld	r24, X+
    2270:	9c 91       	ld	r25, X
    2272:	54 97       	sbiw	r26, 0x14	; 20
    2274:	89 2b       	or	r24, r25
    2276:	49 f1       	breq	.+82     	; 0x22ca <qtm_lib_start_acquisition+0x8e>
    2278:	81 2f       	mov	r24, r17
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	88 0f       	add	r24, r24
    227e:	99 1f       	adc	r25, r25
    2280:	f9 01       	movw	r30, r18
    2282:	e8 0f       	add	r30, r24
    2284:	f9 1f       	adc	r31, r25
    2286:	01 90       	ld	r0, Z+
    2288:	f0 81       	ld	r31, Z
    228a:	e0 2d       	mov	r30, r0
    228c:	30 97       	sbiw	r30, 0x00	; 0
    228e:	e9 f0       	breq	.+58     	; 0x22ca <qtm_lib_start_acquisition+0x8e>
    2290:	1b 96       	adiw	r26, 0x0b	; 11
    2292:	2d 91       	ld	r18, X+
    2294:	3c 91       	ld	r19, X
    2296:	1c 97       	sbiw	r26, 0x0c	; 12
    2298:	d9 01       	movw	r26, r18
    229a:	a8 0f       	add	r26, r24
    229c:	b9 1f       	adc	r27, r25
    229e:	8d 91       	ld	r24, X+
    22a0:	9c 91       	ld	r25, X
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	91 f0       	breq	.+36     	; 0x22ca <qtm_lib_start_acquisition+0x8e>
    22a6:	6d ea       	ldi	r22, 0xAD	; 173
    22a8:	70 e1       	ldi	r23, 0x10	; 16
    22aa:	09 95       	icall
    22ac:	c8 2f       	mov	r28, r24
    22ae:	81 11       	cpse	r24, r1
    22b0:	06 c0       	rjmp	.+12     	; 0x22be <qtm_lib_start_acquisition+0x82>
    22b2:	83 e0       	ldi	r24, 0x03	; 3
    22b4:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <qtm_state>
    22b8:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <current_process_id>
    22bc:	03 c0       	rjmp	.+6      	; 0x22c4 <qtm_lib_start_acquisition+0x88>
    22be:	82 e0       	ldi	r24, 0x02	; 2
    22c0:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <qtm_state>
    22c4:	1d 17       	cp	r17, r29
    22c6:	28 f0       	brcs	.+10     	; 0x22d2 <qtm_lib_start_acquisition+0x96>
    22c8:	01 c0       	rjmp	.+2      	; 0x22cc <qtm_lib_start_acquisition+0x90>
    22ca:	c2 e0       	ldi	r28, 0x02	; 2
    22cc:	82 e8       	ldi	r24, 0x82	; 130
    22ce:	0e 94 9f 10 	call	0x213e	; 0x213e <qtm_error_handler>
    22d2:	8c 2f       	mov	r24, r28
    22d4:	df 91       	pop	r29
    22d6:	cf 91       	pop	r28
    22d8:	1f 91       	pop	r17
    22da:	08 95       	ret

000022dc <qtm_lib_acq_process>:
    22dc:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <qtm>
    22e0:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <qtm+0x1>
    22e4:	05 84       	ldd	r0, Z+13	; 0x0d
    22e6:	f6 85       	ldd	r31, Z+14	; 0x0e
    22e8:	e0 2d       	mov	r30, r0
    22ea:	09 94       	ijmp

000022ec <qtm_lib_post_process>:
    22ec:	1f 93       	push	r17
    22ee:	cf 93       	push	r28
    22f0:	df 93       	push	r29
    22f2:	1f 92       	push	r1
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
    22f8:	19 82       	std	Y+1, r1	; 0x01
    22fa:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <qtm>
    22fe:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <qtm+0x1>
    2302:	05 88       	ldd	r0, Z+21	; 0x15
    2304:	f6 89       	ldd	r31, Z+22	; 0x16
    2306:	e0 2d       	mov	r30, r0
    2308:	30 97       	sbiw	r30, 0x00	; 0
    230a:	49 f0       	breq	.+18     	; 0x231e <qtm_lib_post_process+0x32>
    230c:	82 e0       	ldi	r24, 0x02	; 2
    230e:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <qtm_state>
    2312:	ce 01       	movw	r24, r28
    2314:	01 96       	adiw	r24, 0x01	; 1
    2316:	09 95       	icall
    2318:	83 e0       	ldi	r24, 0x03	; 3
    231a:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <qtm_state>
    231e:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <errors>
    2322:	81 11       	cpse	r24, r1
    2324:	2c c0       	rjmp	.+88     	; 0x237e <qtm_lib_post_process+0x92>
    2326:	19 81       	ldd	r17, Y+1	; 0x01
    2328:	11 11       	cpse	r17, r1
    232a:	29 c0       	rjmp	.+82     	; 0x237e <qtm_lib_post_process+0x92>
    232c:	84 e0       	ldi	r24, 0x04	; 4
    232e:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <qtm_state>
    2332:	a0 91 e0 01 	lds	r26, 0x01E0	; 0x8001e0 <qtm>
    2336:	b0 91 e1 01 	lds	r27, 0x01E1	; 0x8001e1 <qtm+0x1>
    233a:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <current_process_id>
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	88 0f       	add	r24, r24
    2342:	99 1f       	adc	r25, r25
    2344:	13 96       	adiw	r26, 0x03	; 3
    2346:	ed 91       	ld	r30, X+
    2348:	fc 91       	ld	r31, X
    234a:	14 97       	sbiw	r26, 0x04	; 4
    234c:	e8 0f       	add	r30, r24
    234e:	f9 1f       	adc	r31, r25
    2350:	01 90       	ld	r0, Z+
    2352:	f0 81       	ld	r31, Z
    2354:	e0 2d       	mov	r30, r0
    2356:	19 96       	adiw	r26, 0x09	; 9
    2358:	2d 91       	ld	r18, X+
    235a:	3c 91       	ld	r19, X
    235c:	1a 97       	sbiw	r26, 0x0a	; 10
    235e:	30 97       	sbiw	r30, 0x00	; 0
    2360:	81 f0       	breq	.+32     	; 0x2382 <qtm_lib_post_process+0x96>
    2362:	d9 01       	movw	r26, r18
    2364:	a8 0f       	add	r26, r24
    2366:	b9 1f       	adc	r27, r25
    2368:	8d 91       	ld	r24, X+
    236a:	9c 91       	ld	r25, X
    236c:	09 95       	icall
    236e:	81 11       	cpse	r24, r1
    2370:	3e c0       	rjmp	.+124    	; 0x23ee <qtm_lib_post_process+0x102>
    2372:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <current_process_id>
    2376:	8f 5f       	subi	r24, 0xFF	; 255
    2378:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <current_process_id>
    237c:	da cf       	rjmp	.-76     	; 0x2332 <qtm_lib_post_process+0x46>
    237e:	10 e0       	ldi	r17, 0x00	; 0
    2380:	3d c0       	rjmp	.+122    	; 0x23fc <qtm_lib_post_process+0x110>
    2382:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <current_process_id>
    2386:	f9 01       	movw	r30, r18
    2388:	e1 0f       	add	r30, r17
    238a:	f1 1d       	adc	r31, r1
    238c:	e1 0f       	add	r30, r17
    238e:	f1 1d       	adc	r31, r1
    2390:	01 90       	ld	r0, Z+
    2392:	f0 81       	ld	r31, Z
    2394:	e0 2d       	mov	r30, r0
    2396:	30 97       	sbiw	r30, 0x00	; 0
    2398:	59 f0       	breq	.+22     	; 0x23b0 <qtm_lib_post_process+0xc4>
    239a:	01 90       	ld	r0, Z+
    239c:	f0 81       	ld	r31, Z
    239e:	e0 2d       	mov	r30, r0
    23a0:	80 81       	ld	r24, Z
    23a2:	87 ff       	sbrs	r24, 7
    23a4:	03 c0       	rjmp	.+6      	; 0x23ac <qtm_lib_post_process+0xc0>
    23a6:	9c 91       	ld	r25, X
    23a8:	94 60       	ori	r25, 0x04	; 4
    23aa:	9c 93       	st	X, r25
    23ac:	1f 5f       	subi	r17, 0xFF	; 255
    23ae:	eb cf       	rjmp	.-42     	; 0x2386 <qtm_lib_post_process+0x9a>
    23b0:	10 93 98 01 	sts	0x0198, r17	; 0x800198 <current_process_id>
    23b4:	82 e0       	ldi	r24, 0x02	; 2
    23b6:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <qtm_state>
    23ba:	57 96       	adiw	r26, 0x17	; 23
    23bc:	ed 91       	ld	r30, X+
    23be:	fc 91       	ld	r31, X
    23c0:	58 97       	sbiw	r26, 0x18	; 24
    23c2:	30 97       	sbiw	r30, 0x00	; 0
    23c4:	11 f0       	breq	.+4      	; 0x23ca <qtm_lib_post_process+0xde>
    23c6:	09 95       	icall
    23c8:	05 c0       	rjmp	.+10     	; 0x23d4 <qtm_lib_post_process+0xe8>
    23ca:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <errors>
    23ce:	8f 5f       	subi	r24, 0xFF	; 255
    23d0:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <errors>
    23d4:	10 e0       	ldi	r17, 0x00	; 0
    23d6:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <errors>
    23da:	88 23       	and	r24, r24
    23dc:	79 f0       	breq	.+30     	; 0x23fc <qtm_lib_post_process+0x110>
    23de:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <errors>
    23e2:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <current_process_id>
    23e6:	80 64       	ori	r24, 0x40	; 64
    23e8:	0e 94 9f 10 	call	0x213e	; 0x213e <qtm_error_handler>
    23ec:	07 c0       	rjmp	.+14     	; 0x23fc <qtm_lib_post_process+0x110>
    23ee:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <errors>
    23f2:	8f 5f       	subi	r24, 0xFF	; 255
    23f4:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <errors>
    23f8:	13 e0       	ldi	r17, 0x03	; 3
    23fa:	ed cf       	rjmp	.-38     	; 0x23d6 <qtm_lib_post_process+0xea>
    23fc:	81 2f       	mov	r24, r17
    23fe:	0f 90       	pop	r0
    2400:	df 91       	pop	r29
    2402:	cf 91       	pop	r28
    2404:	1f 91       	pop	r17
    2406:	08 95       	ret

00002408 <select_next_channel_to_measure>:
    2408:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <current_measure_channel>
    240c:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <current_measure_channel+0x1>
    2410:	a0 91 e2 01 	lds	r26, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    2414:	b0 91 e3 01 	lds	r27, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    2418:	ed 91       	ld	r30, X+
    241a:	fc 91       	ld	r31, X
    241c:	11 97       	sbiw	r26, 0x01	; 1
    241e:	40 81       	ld	r20, Z
    2420:	51 81       	ldd	r21, Z+1	; 0x01
    2422:	25 e0       	ldi	r18, 0x05	; 5
    2424:	28 9f       	mul	r18, r24
    2426:	b0 01       	movw	r22, r0
    2428:	29 9f       	mul	r18, r25
    242a:	70 0d       	add	r23, r0
    242c:	11 24       	eor	r1, r1
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	84 17       	cp	r24, r20
    2434:	95 07       	cpc	r25, r21
    2436:	a8 f4       	brcc	.+42     	; 0x2462 <select_next_channel_to_measure+0x5a>
    2438:	14 96       	adiw	r26, 0x04	; 4
    243a:	ed 91       	ld	r30, X+
    243c:	fc 91       	ld	r31, X
    243e:	15 97       	sbiw	r26, 0x05	; 5
    2440:	e2 0f       	add	r30, r18
    2442:	f3 1f       	adc	r31, r19
    2444:	e6 0f       	add	r30, r22
    2446:	f7 1f       	adc	r31, r23
    2448:	e0 81       	ld	r30, Z
    244a:	2b 5f       	subi	r18, 0xFB	; 251
    244c:	3f 4f       	sbci	r19, 0xFF	; 255
    244e:	e0 fd       	sbrc	r30, 0
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <select_next_channel_to_measure+0x4e>
    2452:	01 96       	adiw	r24, 0x01	; 1
    2454:	ee cf       	rjmp	.-36     	; 0x2432 <select_next_channel_to_measure+0x2a>
    2456:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <current_measure_channel+0x1>
    245a:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <current_measure_channel>
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	08 95       	ret
    2462:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <current_measure_channel+0x1>
    2466:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <current_measure_channel>
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	08 95       	ret

0000246e <qtm_measure_node>:
    246e:	4a e0       	ldi	r20, 0x0A	; 10
    2470:	48 9f       	mul	r20, r24
    2472:	90 01       	movw	r18, r0
    2474:	49 9f       	mul	r20, r25
    2476:	30 0d       	add	r19, r0
    2478:	11 24       	eor	r1, r1
    247a:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    247e:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    2482:	02 80       	ldd	r0, Z+2	; 0x02
    2484:	f3 81       	ldd	r31, Z+3	; 0x03
    2486:	e0 2d       	mov	r30, r0
    2488:	e2 0f       	add	r30, r18
    248a:	f3 1f       	adc	r31, r19
    248c:	42 81       	ldd	r20, Z+2	; 0x02
    248e:	40 93 f8 00 	sts	0x00F8, r20	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7f80f8>
    2492:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    2496:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    249a:	02 80       	ldd	r0, Z+2	; 0x02
    249c:	f3 81       	ldd	r31, Z+3	; 0x03
    249e:	e0 2d       	mov	r30, r0
    24a0:	e2 0f       	add	r30, r18
    24a2:	f3 1f       	adc	r31, r19
    24a4:	43 81       	ldd	r20, Z+3	; 0x03
    24a6:	40 93 f9 00 	sts	0x00F9, r20	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7f80f9>
    24aa:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    24ae:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    24b2:	02 80       	ldd	r0, Z+2	; 0x02
    24b4:	f3 81       	ldd	r31, Z+3	; 0x03
    24b6:	e0 2d       	mov	r30, r0
    24b8:	e2 0f       	add	r30, r18
    24ba:	f3 1f       	adc	r31, r19
    24bc:	44 81       	ldd	r20, Z+4	; 0x04
    24be:	40 93 fa 00 	sts	0x00FA, r20	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f80fa>
    24c2:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    24c6:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    24ca:	02 80       	ldd	r0, Z+2	; 0x02
    24cc:	f3 81       	ldd	r31, Z+3	; 0x03
    24ce:	e0 2d       	mov	r30, r0
    24d0:	e2 0f       	add	r30, r18
    24d2:	f3 1f       	adc	r31, r19
    24d4:	40 81       	ld	r20, Z
    24d6:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    24da:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    24de:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    24e2:	02 80       	ldd	r0, Z+2	; 0x02
    24e4:	f3 81       	ldd	r31, Z+3	; 0x03
    24e6:	e0 2d       	mov	r30, r0
    24e8:	e2 0f       	add	r30, r18
    24ea:	f3 1f       	adc	r31, r19
    24ec:	41 81       	ldd	r20, Z+1	; 0x01
    24ee:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    24f2:	65 e0       	ldi	r22, 0x05	; 5
    24f4:	68 9f       	mul	r22, r24
    24f6:	a0 01       	movw	r20, r0
    24f8:	69 9f       	mul	r22, r25
    24fa:	50 0d       	add	r21, r0
    24fc:	11 24       	eor	r1, r1
    24fe:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    2502:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    2506:	04 80       	ldd	r0, Z+4	; 0x04
    2508:	f5 81       	ldd	r31, Z+5	; 0x05
    250a:	e0 2d       	mov	r30, r0
    250c:	e4 0f       	add	r30, r20
    250e:	f5 1f       	adc	r31, r21
    2510:	83 81       	ldd	r24, Z+3	; 0x03
    2512:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
    2516:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    251a:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    251e:	04 80       	ldd	r0, Z+4	; 0x04
    2520:	f5 81       	ldd	r31, Z+5	; 0x05
    2522:	e0 2d       	mov	r30, r0
    2524:	e4 0f       	add	r30, r20
    2526:	f5 1f       	adc	r31, r21
    2528:	83 81       	ldd	r24, Z+3	; 0x03
    252a:	94 81       	ldd	r25, Z+4	; 0x04
    252c:	88 27       	eor	r24, r24
    252e:	9f 73       	andi	r25, 0x3F	; 63
    2530:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7f80e6>
    2534:	a0 91 e2 01 	lds	r26, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    2538:	b0 91 e3 01 	lds	r27, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    253c:	14 96       	adiw	r26, 0x04	; 4
    253e:	ed 91       	ld	r30, X+
    2540:	fc 91       	ld	r31, X
    2542:	15 97       	sbiw	r26, 0x05	; 5
    2544:	e4 0f       	add	r30, r20
    2546:	f5 1f       	adc	r31, r21
    2548:	80 81       	ld	r24, Z
    254a:	81 fd       	sbrc	r24, 1
    254c:	60 83       	st	Z, r22
    254e:	14 96       	adiw	r26, 0x04	; 4
    2550:	8d 91       	ld	r24, X+
    2552:	9c 91       	ld	r25, X
    2554:	15 97       	sbiw	r26, 0x05	; 5
    2556:	fc 01       	movw	r30, r24
    2558:	e4 0f       	add	r30, r20
    255a:	f5 1f       	adc	r31, r21
    255c:	80 81       	ld	r24, Z
    255e:	8c 71       	andi	r24, 0x1C	; 28
    2560:	71 f4       	brne	.+28     	; 0x257e <qtm_measure_node+0x110>
    2562:	12 96       	adiw	r26, 0x02	; 2
    2564:	ed 91       	ld	r30, X+
    2566:	fc 91       	ld	r31, X
    2568:	13 97       	sbiw	r26, 0x03	; 3
    256a:	e2 0f       	add	r30, r18
    256c:	f3 1f       	adc	r31, r19
    256e:	e0 85       	ldd	r30, Z+8	; 0x08
    2570:	e2 95       	swap	r30
    2572:	ef 70       	andi	r30, 0x0F	; 15
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	e1 58       	subi	r30, 0x81	; 129
    2578:	fe 4f       	sbci	r31, 0xFE	; 254
    257a:	80 81       	ld	r24, Z
    257c:	01 c0       	rjmp	.+2      	; 0x2580 <qtm_measure_node+0x112>
    257e:	8f e3       	ldi	r24, 0x3F	; 63
    2580:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7f80e7>
    2584:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    2588:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    258c:	02 80       	ldd	r0, Z+2	; 0x02
    258e:	f3 81       	ldd	r31, Z+3	; 0x03
    2590:	e0 2d       	mov	r30, r0
    2592:	e2 0f       	add	r30, r18
    2594:	f3 1f       	adc	r31, r19
    2596:	86 81       	ldd	r24, Z+6	; 0x06
    2598:	8b 3f       	cpi	r24, 0xFB	; 251
    259a:	10 f4       	brcc	.+4      	; 0x25a0 <qtm_measure_node+0x132>
    259c:	8c 5f       	subi	r24, 0xFC	; 252
    259e:	01 c0       	rjmp	.+2      	; 0x25a2 <qtm_measure_node+0x134>
    25a0:	8f ef       	ldi	r24, 0xFF	; 255
    25a2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    25a6:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    25aa:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    25ae:	02 80       	ldd	r0, Z+2	; 0x02
    25b0:	f3 81       	ldd	r31, Z+3	; 0x03
    25b2:	e0 2d       	mov	r30, r0
    25b4:	e2 0f       	add	r30, r18
    25b6:	f3 1f       	adc	r31, r19
    25b8:	87 81       	ldd	r24, Z+7	; 0x07
    25ba:	80 7f       	andi	r24, 0xF0	; 240
    25bc:	91 85       	ldd	r25, Z+9	; 0x09
    25be:	89 2b       	or	r24, r25
    25c0:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    25c4:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    25c8:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    25cc:	82 81       	ldd	r24, Z+2	; 0x02
    25ce:	93 81       	ldd	r25, Z+3	; 0x03
    25d0:	fc 01       	movw	r30, r24
    25d2:	e2 0f       	add	r30, r18
    25d4:	f3 1f       	adc	r31, r19
    25d6:	87 81       	ldd	r24, Z+7	; 0x07
    25d8:	8f 70       	andi	r24, 0x0F	; 15
    25da:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    25de:	82 e1       	ldi	r24, 0x12	; 18
    25e0:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    25e4:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    25e8:	81 60       	ori	r24, 0x01	; 1
    25ea:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    25ee:	08 95       	ret

000025f0 <qtm_acquisition_process>:
    25f0:	4f 92       	push	r4
    25f2:	5f 92       	push	r5
    25f4:	6f 92       	push	r6
    25f6:	7f 92       	push	r7
    25f8:	8f 92       	push	r8
    25fa:	9f 92       	push	r9
    25fc:	af 92       	push	r10
    25fe:	bf 92       	push	r11
    2600:	cf 92       	push	r12
    2602:	df 92       	push	r13
    2604:	ef 92       	push	r14
    2606:	ff 92       	push	r15
    2608:	0f 93       	push	r16
    260a:	1f 93       	push	r17
    260c:	cf 93       	push	r28
    260e:	df 93       	push	r29
    2610:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <touch_seq_lib_state>
    2614:	88 23       	and	r24, r24
    2616:	09 f4       	brne	.+2      	; 0x261a <qtm_acquisition_process+0x2a>
    2618:	31 c1       	rjmp	.+610    	; 0x287c <qtm_acquisition_process+0x28c>
    261a:	a0 91 e2 01 	lds	r26, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    261e:	b0 91 e3 01 	lds	r27, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    2622:	e0 90 e4 01 	lds	r14, 0x01E4	; 0x8001e4 <qtm_raw_data_measurements_ptr>
    2626:	f0 90 e5 01 	lds	r15, 0x01E5	; 0x8001e5 <qtm_raw_data_measurements_ptr+0x1>
    262a:	41 2c       	mov	r4, r1
    262c:	51 2c       	mov	r5, r1
    262e:	60 e0       	ldi	r22, 0x00	; 0
    2630:	70 e0       	ldi	r23, 0x00	; 0
    2632:	00 e0       	ldi	r16, 0x00	; 0
    2634:	10 e0       	ldi	r17, 0x00	; 0
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	66 24       	eor	r6, r6
    263a:	63 94       	inc	r6
    263c:	91 e8       	ldi	r25, 0x81	; 129
    263e:	79 2e       	mov	r7, r25
    2640:	aa 24       	eor	r10, r10
    2642:	aa 94       	dec	r10
    2644:	bb 24       	eor	r11, r11
    2646:	b3 94       	inc	r11
    2648:	cd 90       	ld	r12, X+
    264a:	dc 90       	ld	r13, X
    264c:	11 97       	sbiw	r26, 0x01	; 1
    264e:	f6 01       	movw	r30, r12
    2650:	20 81       	ld	r18, Z
    2652:	31 81       	ldd	r19, Z+1	; 0x01
    2654:	02 17       	cp	r16, r18
    2656:	13 07       	cpc	r17, r19
    2658:	08 f0       	brcs	.+2      	; 0x265c <qtm_acquisition_process+0x6c>
    265a:	0c c1       	rjmp	.+536    	; 0x2874 <qtm_acquisition_process+0x284>
    265c:	e7 01       	movw	r28, r14
    265e:	29 91       	ld	r18, Y+
    2660:	39 91       	ld	r19, Y+
    2662:	7e 01       	movw	r14, r28
    2664:	14 96       	adiw	r26, 0x04	; 4
    2666:	ed 91       	ld	r30, X+
    2668:	fc 91       	ld	r31, X
    266a:	15 97       	sbiw	r26, 0x05	; 5
    266c:	e6 0f       	add	r30, r22
    266e:	f7 1f       	adc	r31, r23
    2670:	40 81       	ld	r20, Z
    2672:	4c 71       	andi	r20, 0x1C	; 28
    2674:	50 e0       	ldi	r21, 0x00	; 0
    2676:	56 95       	lsr	r21
    2678:	47 95       	ror	r20
    267a:	56 95       	lsr	r21
    267c:	47 95       	ror	r20
    267e:	41 15       	cp	r20, r1
    2680:	51 05       	cpc	r21, r1
    2682:	21 f0       	breq	.+8      	; 0x268c <qtm_acquisition_process+0x9c>
    2684:	41 30       	cpi	r20, 0x01	; 1
    2686:	51 05       	cpc	r21, r1
    2688:	c1 f0       	breq	.+48     	; 0x26ba <qtm_acquisition_process+0xca>
    268a:	eb c0       	rjmp	.+470    	; 0x2862 <qtm_acquisition_process+0x272>
    268c:	12 96       	adiw	r26, 0x02	; 2
    268e:	4d 91       	ld	r20, X+
    2690:	5c 91       	ld	r21, X
    2692:	13 97       	sbiw	r26, 0x03	; 3
    2694:	44 0d       	add	r20, r4
    2696:	55 1d       	adc	r21, r5
    2698:	ea 01       	movw	r28, r20
    269a:	98 85       	ldd	r25, Y+8	; 0x08
    269c:	9f 70       	andi	r25, 0x0F	; 15
    269e:	49 85       	ldd	r20, Y+9	; 0x09
    26a0:	94 17       	cp	r25, r20
    26a2:	10 f4       	brcc	.+4      	; 0x26a8 <qtm_acquisition_process+0xb8>
    26a4:	49 1b       	sub	r20, r25
    26a6:	01 c0       	rjmp	.+2      	; 0x26aa <qtm_acquisition_process+0xba>
    26a8:	40 e0       	ldi	r20, 0x00	; 0
    26aa:	02 c0       	rjmp	.+4      	; 0x26b0 <qtm_acquisition_process+0xc0>
    26ac:	36 95       	lsr	r19
    26ae:	27 95       	ror	r18
    26b0:	4a 95       	dec	r20
    26b2:	e2 f7       	brpl	.-8      	; 0x26ac <qtm_acquisition_process+0xbc>
    26b4:	32 83       	std	Z+2, r19	; 0x02
    26b6:	21 83       	std	Z+1, r18	; 0x01
    26b8:	d5 c0       	rjmp	.+426    	; 0x2864 <qtm_acquisition_process+0x274>
    26ba:	12 96       	adiw	r26, 0x02	; 2
    26bc:	4d 91       	ld	r20, X+
    26be:	5c 91       	ld	r21, X
    26c0:	13 97       	sbiw	r26, 0x03	; 3
    26c2:	44 0d       	add	r20, r4
    26c4:	55 1d       	adc	r21, r5
    26c6:	ea 01       	movw	r28, r20
    26c8:	09 84       	ldd	r0, Y+9	; 0x09
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <qtm_acquisition_process+0xe0>
    26cc:	36 95       	lsr	r19
    26ce:	27 95       	ror	r18
    26d0:	0a 94       	dec	r0
    26d2:	e2 f7       	brpl	.-8      	; 0x26cc <qtm_acquisition_process+0xdc>
    26d4:	32 83       	std	Z+2, r19	; 0x02
    26d6:	21 83       	std	Z+1, r18	; 0x01
    26d8:	43 81       	ldd	r20, Z+3	; 0x03
    26da:	54 81       	ldd	r21, Z+4	; 0x04
    26dc:	21 15       	cp	r18, r1
    26de:	d2 e0       	ldi	r29, 0x02	; 2
    26e0:	3d 07       	cpc	r19, r29
    26e2:	20 f0       	brcs	.+8      	; 0x26ec <qtm_acquisition_process+0xfc>
    26e4:	2f 5f       	subi	r18, 0xFF	; 255
    26e6:	31 40       	sbci	r19, 0x01	; 1
    26e8:	91 e0       	ldi	r25, 0x01	; 1
    26ea:	05 c0       	rjmp	.+10     	; 0x26f6 <qtm_acquisition_process+0x106>
    26ec:	e5 01       	movw	r28, r10
    26ee:	c2 1b       	sub	r28, r18
    26f0:	d3 0b       	sbc	r29, r19
    26f2:	9e 01       	movw	r18, r28
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	e6 01       	movw	r28, r12
    26f8:	da 80       	ldd	r13, Y+2	; 0x02
    26fa:	d0 e4       	ldi	r29, 0x40	; 64
    26fc:	dd 12       	cpse	r13, r29
    26fe:	05 c0       	rjmp	.+10     	; 0x270a <qtm_acquisition_process+0x11a>
    2700:	36 95       	lsr	r19
    2702:	27 95       	ror	r18
    2704:	99 23       	and	r25, r25
    2706:	19 f0       	breq	.+6      	; 0x270e <qtm_acquisition_process+0x11e>
    2708:	09 c0       	rjmp	.+18     	; 0x271c <qtm_acquisition_process+0x12c>
    270a:	99 23       	and	r25, r25
    270c:	39 f0       	breq	.+14     	; 0x271c <qtm_acquisition_process+0x12c>
    270e:	4f 3f       	cpi	r20, 0xFF	; 255
    2710:	9f e3       	ldi	r25, 0x3F	; 63
    2712:	59 07       	cpc	r21, r25
    2714:	31 f4       	brne	.+12     	; 0x2722 <qtm_acquisition_process+0x132>
    2716:	70 82       	st	Z, r7
    2718:	8e e0       	ldi	r24, 0x0E	; 14
    271a:	07 c0       	rjmp	.+14     	; 0x272a <qtm_acquisition_process+0x13a>
    271c:	88 24       	eor	r8, r8
    271e:	83 94       	inc	r8
    2720:	01 c0       	rjmp	.+2      	; 0x2724 <qtm_acquisition_process+0x134>
    2722:	81 2c       	mov	r8, r1
    2724:	2a 30       	cpi	r18, 0x0A	; 10
    2726:	31 05       	cpc	r19, r1
    2728:	98 f4       	brcc	.+38     	; 0x2750 <qtm_acquisition_process+0x160>
    272a:	14 96       	adiw	r26, 0x04	; 4
    272c:	ed 91       	ld	r30, X+
    272e:	fc 91       	ld	r31, X
    2730:	15 97       	sbiw	r26, 0x05	; 5
    2732:	e6 0f       	add	r30, r22
    2734:	f7 1f       	adc	r31, r23
    2736:	20 81       	ld	r18, Z
    2738:	27 ff       	sbrs	r18, 7
    273a:	60 82       	st	Z, r6
    273c:	14 96       	adiw	r26, 0x04	; 4
    273e:	ed 91       	ld	r30, X+
    2740:	fc 91       	ld	r31, X
    2742:	15 97       	sbiw	r26, 0x05	; 5
    2744:	e6 0f       	add	r30, r22
    2746:	f7 1f       	adc	r31, r23
    2748:	5f 73       	andi	r21, 0x3F	; 63
    274a:	54 83       	std	Z+4, r21	; 0x04
    274c:	43 83       	std	Z+3, r20	; 0x03
    274e:	8a c0       	rjmp	.+276    	; 0x2864 <qtm_acquisition_process+0x274>
    2750:	6a 01       	movw	r12, r20
    2752:	cc 24       	eor	r12, r12
    2754:	c0 e3       	ldi	r28, 0x30	; 48
    2756:	dc 22       	and	r13, r28
    2758:	9d 2c       	mov	r9, r13
    275a:	92 94       	swap	r9
    275c:	df e0       	ldi	r29, 0x0F	; 15
    275e:	9d 22       	and	r9, r29
    2760:	6a 01       	movw	r12, r20
    2762:	cc 24       	eor	r12, r12
    2764:	df e0       	ldi	r29, 0x0F	; 15
    2766:	dd 22       	and	r13, r29
    2768:	9d 2d       	mov	r25, r13
    276a:	6a 01       	movw	r12, r20
    276c:	c0 ef       	ldi	r28, 0xF0	; 240
    276e:	cc 22       	and	r12, r28
    2770:	dd 24       	eor	r13, r13
    2772:	54 e0       	ldi	r21, 0x04	; 4
    2774:	d6 94       	lsr	r13
    2776:	c7 94       	ror	r12
    2778:	5a 95       	dec	r21
    277a:	e1 f7       	brne	.-8      	; 0x2774 <qtm_acquisition_process+0x184>
    277c:	5c 2d       	mov	r21, r12
    277e:	4f 70       	andi	r20, 0x0F	; 15
    2780:	81 10       	cpse	r8, r1
    2782:	32 c0       	rjmp	.+100    	; 0x27e8 <qtm_acquisition_process+0x1f8>
    2784:	20 3d       	cpi	r18, 0xD0	; 208
    2786:	31 05       	cpc	r19, r1
    2788:	60 f0       	brcs	.+24     	; 0x27a2 <qtm_acquisition_process+0x1b2>
    278a:	d3 e0       	ldi	r29, 0x03	; 3
    278c:	9d 16       	cp	r9, r29
    278e:	49 f0       	breq	.+18     	; 0x27a2 <qtm_acquisition_process+0x1b2>
    2790:	93 94       	inc	r9
    2792:	2f 5c       	subi	r18, 0xCF	; 207
    2794:	31 09       	sbc	r19, r1
    2796:	f6 cf       	rjmp	.-20     	; 0x2784 <qtm_acquisition_process+0x194>
    2798:	9f 30       	cpi	r25, 0x0F	; 15
    279a:	41 f0       	breq	.+16     	; 0x27ac <qtm_acquisition_process+0x1bc>
    279c:	9f 5f       	subi	r25, 0xFF	; 255
    279e:	25 51       	subi	r18, 0x15	; 21
    27a0:	31 09       	sbc	r19, r1
    27a2:	26 31       	cpi	r18, 0x16	; 22
    27a4:	31 05       	cpc	r19, r1
    27a6:	c0 f7       	brcc	.-16     	; 0x2798 <qtm_acquisition_process+0x1a8>
    27a8:	9f 30       	cpi	r25, 0x0F	; 15
    27aa:	69 f4       	brne	.+26     	; 0x27c6 <qtm_acquisition_process+0x1d6>
    27ac:	93 e0       	ldi	r25, 0x03	; 3
    27ae:	99 12       	cpse	r9, r25
    27b0:	02 c0       	rjmp	.+4      	; 0x27b6 <qtm_acquisition_process+0x1c6>
    27b2:	9f e0       	ldi	r25, 0x0F	; 15
    27b4:	08 c0       	rjmp	.+16     	; 0x27c6 <qtm_acquisition_process+0x1d6>
    27b6:	93 94       	inc	r9
    27b8:	95 e0       	ldi	r25, 0x05	; 5
    27ba:	05 c0       	rjmp	.+10     	; 0x27c6 <qtm_acquisition_process+0x1d6>
    27bc:	5f 30       	cpi	r21, 0x0F	; 15
    27be:	49 f0       	breq	.+18     	; 0x27d2 <qtm_acquisition_process+0x1e2>
    27c0:	5f 5f       	subi	r21, 0xFF	; 255
    27c2:	22 50       	subi	r18, 0x02	; 2
    27c4:	31 09       	sbc	r19, r1
    27c6:	23 30       	cpi	r18, 0x03	; 3
    27c8:	31 05       	cpc	r19, r1
    27ca:	c0 f7       	brcc	.-16     	; 0x27bc <qtm_acquisition_process+0x1cc>
    27cc:	5f 30       	cpi	r21, 0x0F	; 15
    27ce:	09 f0       	breq	.+2      	; 0x27d2 <qtm_acquisition_process+0x1e2>
    27d0:	5b c0       	rjmp	.+182    	; 0x2888 <qtm_acquisition_process+0x298>
    27d2:	9f 30       	cpi	r25, 0x0F	; 15
    27d4:	09 f4       	brne	.+2      	; 0x27d8 <qtm_acquisition_process+0x1e8>
    27d6:	54 c0       	rjmp	.+168    	; 0x2880 <qtm_acquisition_process+0x290>
    27d8:	9f 5f       	subi	r25, 0xFF	; 255
    27da:	55 e0       	ldi	r21, 0x05	; 5
    27dc:	55 c0       	rjmp	.+170    	; 0x2888 <qtm_acquisition_process+0x298>
    27de:	99 20       	and	r9, r9
    27e0:	61 f0       	breq	.+24     	; 0x27fa <qtm_acquisition_process+0x20a>
    27e2:	9a 94       	dec	r9
    27e4:	2f 5c       	subi	r18, 0xCF	; 207
    27e6:	31 09       	sbc	r19, r1
    27e8:	20 3d       	cpi	r18, 0xD0	; 208
    27ea:	31 05       	cpc	r19, r1
    27ec:	c0 f7       	brcc	.-16     	; 0x27de <qtm_acquisition_process+0x1ee>
    27ee:	05 c0       	rjmp	.+10     	; 0x27fa <qtm_acquisition_process+0x20a>
    27f0:	99 23       	and	r25, r25
    27f2:	41 f0       	breq	.+16     	; 0x2804 <qtm_acquisition_process+0x214>
    27f4:	91 50       	subi	r25, 0x01	; 1
    27f6:	25 51       	subi	r18, 0x15	; 21
    27f8:	31 09       	sbc	r19, r1
    27fa:	26 31       	cpi	r18, 0x16	; 22
    27fc:	31 05       	cpc	r19, r1
    27fe:	c0 f7       	brcc	.-16     	; 0x27f0 <qtm_acquisition_process+0x200>
    2800:	91 11       	cpse	r25, r1
    2802:	0c c0       	rjmp	.+24     	; 0x281c <qtm_acquisition_process+0x22c>
    2804:	91 10       	cpse	r9, r1
    2806:	02 c0       	rjmp	.+4      	; 0x280c <qtm_acquisition_process+0x21c>
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	08 c0       	rjmp	.+16     	; 0x281c <qtm_acquisition_process+0x22c>
    280c:	9a 94       	dec	r9
    280e:	9a e0       	ldi	r25, 0x0A	; 10
    2810:	05 c0       	rjmp	.+10     	; 0x281c <qtm_acquisition_process+0x22c>
    2812:	55 23       	and	r21, r21
    2814:	41 f0       	breq	.+16     	; 0x2826 <qtm_acquisition_process+0x236>
    2816:	51 50       	subi	r21, 0x01	; 1
    2818:	22 50       	subi	r18, 0x02	; 2
    281a:	31 09       	sbc	r19, r1
    281c:	23 30       	cpi	r18, 0x03	; 3
    281e:	31 05       	cpc	r19, r1
    2820:	c0 f7       	brcc	.-16     	; 0x2812 <qtm_acquisition_process+0x222>
    2822:	51 11       	cpse	r21, r1
    2824:	0d c0       	rjmp	.+26     	; 0x2840 <qtm_acquisition_process+0x250>
    2826:	99 23       	and	r25, r25
    2828:	b9 f1       	breq	.+110    	; 0x2898 <qtm_acquisition_process+0x2a8>
    282a:	91 50       	subi	r25, 0x01	; 1
    282c:	5a e0       	ldi	r21, 0x0A	; 10
    282e:	23 30       	cpi	r18, 0x03	; 3
    2830:	31 05       	cpc	r19, r1
    2832:	d0 f6       	brcc	.-76     	; 0x27e8 <qtm_acquisition_process+0x1f8>
    2834:	05 c0       	rjmp	.+10     	; 0x2840 <qtm_acquisition_process+0x250>
    2836:	23 30       	cpi	r18, 0x03	; 3
    2838:	31 05       	cpc	r19, r1
    283a:	58 f1       	brcs	.+86     	; 0x2892 <qtm_acquisition_process+0x2a2>
    283c:	4f e0       	ldi	r20, 0x0F	; 15
    283e:	5f e0       	ldi	r21, 0x0F	; 15
    2840:	29 2d       	mov	r18, r9
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	32 2f       	mov	r19, r18
    2846:	22 27       	eor	r18, r18
    2848:	32 95       	swap	r19
    284a:	30 7f       	andi	r19, 0xF0	; 240
    284c:	39 2b       	or	r19, r25
    284e:	24 2b       	or	r18, r20
    2850:	c0 e1       	ldi	r28, 0x10	; 16
    2852:	5c 9f       	mul	r21, r28
    2854:	60 01       	movw	r12, r0
    2856:	11 24       	eor	r1, r1
    2858:	c2 2a       	or	r12, r18
    285a:	d3 2a       	or	r13, r19
    285c:	d4 82       	std	Z+4, r13	; 0x04
    285e:	c3 82       	std	Z+3, r12	; 0x03
    2860:	01 c0       	rjmp	.+2      	; 0x2864 <qtm_acquisition_process+0x274>
    2862:	ff cf       	rjmp	.-2      	; 0x2862 <qtm_acquisition_process+0x272>
    2864:	0f 5f       	subi	r16, 0xFF	; 255
    2866:	1f 4f       	sbci	r17, 0xFF	; 255
    2868:	6b 5f       	subi	r22, 0xFB	; 251
    286a:	7f 4f       	sbci	r23, 0xFF	; 255
    286c:	da e0       	ldi	r29, 0x0A	; 10
    286e:	4d 0e       	add	r4, r29
    2870:	51 1c       	adc	r5, r1
    2872:	ea ce       	rjmp	.-556    	; 0x2648 <qtm_acquisition_process+0x58>
    2874:	92 e0       	ldi	r25, 0x02	; 2
    2876:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <touch_seq_lib_state>
    287a:	10 c0       	rjmp	.+32     	; 0x289c <qtm_acquisition_process+0x2ac>
    287c:	83 e0       	ldi	r24, 0x03	; 3
    287e:	0e c0       	rjmp	.+28     	; 0x289c <qtm_acquisition_process+0x2ac>
    2880:	53 e0       	ldi	r21, 0x03	; 3
    2882:	95 16       	cp	r9, r21
    2884:	c1 f2       	breq	.-80     	; 0x2836 <qtm_acquisition_process+0x246>
    2886:	5f e0       	ldi	r21, 0x0F	; 15
    2888:	23 30       	cpi	r18, 0x03	; 3
    288a:	31 05       	cpc	r19, r1
    288c:	08 f0       	brcs	.+2      	; 0x2890 <qtm_acquisition_process+0x2a0>
    288e:	7a cf       	rjmp	.-268    	; 0x2784 <qtm_acquisition_process+0x194>
    2890:	d7 cf       	rjmp	.-82     	; 0x2840 <qtm_acquisition_process+0x250>
    2892:	5f e0       	ldi	r21, 0x0F	; 15
    2894:	4f e0       	ldi	r20, 0x0F	; 15
    2896:	d4 cf       	rjmp	.-88     	; 0x2840 <qtm_acquisition_process+0x250>
    2898:	50 e0       	ldi	r21, 0x00	; 0
    289a:	d2 cf       	rjmp	.-92     	; 0x2840 <qtm_acquisition_process+0x250>
    289c:	df 91       	pop	r29
    289e:	cf 91       	pop	r28
    28a0:	1f 91       	pop	r17
    28a2:	0f 91       	pop	r16
    28a4:	ff 90       	pop	r15
    28a6:	ef 90       	pop	r14
    28a8:	df 90       	pop	r13
    28aa:	cf 90       	pop	r12
    28ac:	bf 90       	pop	r11
    28ae:	af 90       	pop	r10
    28b0:	9f 90       	pop	r9
    28b2:	8f 90       	pop	r8
    28b4:	7f 90       	pop	r7
    28b6:	6f 90       	pop	r6
    28b8:	5f 90       	pop	r5
    28ba:	4f 90       	pop	r4
    28bc:	08 95       	ret

000028be <qtm_ptc_init_acquisition_module>:
    28be:	8f 92       	push	r8
    28c0:	9f 92       	push	r9
    28c2:	af 92       	push	r10
    28c4:	bf 92       	push	r11
    28c6:	cf 92       	push	r12
    28c8:	df 92       	push	r13
    28ca:	ef 92       	push	r14
    28cc:	ff 92       	push	r15
    28ce:	cf 93       	push	r28
    28d0:	df 93       	push	r29
    28d2:	00 97       	sbiw	r24, 0x00	; 0
    28d4:	09 f4       	brne	.+2      	; 0x28d8 <qtm_ptc_init_acquisition_module+0x1a>
    28d6:	6c c0       	rjmp	.+216    	; 0x29b0 <qtm_ptc_init_acquisition_module+0xf2>
    28d8:	dc 01       	movw	r26, r24
    28da:	ed 91       	ld	r30, X+
    28dc:	fc 91       	ld	r31, X
    28de:	c0 80       	ld	r12, Z
    28e0:	d1 80       	ldd	r13, Z+1	; 0x01
    28e2:	e1 2c       	mov	r14, r1
    28e4:	f1 2c       	mov	r15, r1
    28e6:	a0 e0       	ldi	r26, 0x00	; 0
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	40 e0       	ldi	r20, 0x00	; 0
    28ec:	50 e0       	ldi	r21, 0x00	; 0
    28ee:	ba 01       	movw	r22, r20
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	ac 15       	cp	r26, r12
    28f6:	bd 05       	cpc	r27, r13
    28f8:	b1 f0       	breq	.+44     	; 0x2926 <qtm_ptc_init_acquisition_module+0x68>
    28fa:	ec 01       	movw	r28, r24
    28fc:	ea 81       	ldd	r30, Y+2	; 0x02
    28fe:	fb 81       	ldd	r31, Y+3	; 0x03
    2900:	ee 0d       	add	r30, r14
    2902:	ff 1d       	adc	r31, r15
    2904:	a0 80       	ld	r10, Z
    2906:	b1 80       	ldd	r11, Z+1	; 0x01
    2908:	2a 29       	or	r18, r10
    290a:	3b 29       	or	r19, r11
    290c:	82 80       	ldd	r8, Z+2	; 0x02
    290e:	93 80       	ldd	r9, Z+3	; 0x03
    2910:	a4 80       	ldd	r10, Z+4	; 0x04
    2912:	b5 80       	ldd	r11, Z+5	; 0x05
    2914:	48 29       	or	r20, r8
    2916:	59 29       	or	r21, r9
    2918:	6a 29       	or	r22, r10
    291a:	7b 29       	or	r23, r11
    291c:	11 96       	adiw	r26, 0x01	; 1
    291e:	da e0       	ldi	r29, 0x0A	; 10
    2920:	ed 0e       	add	r14, r29
    2922:	f1 1c       	adc	r15, r1
    2924:	e7 cf       	rjmp	.-50     	; 0x28f4 <qtm_ptc_init_acquisition_module+0x36>
    2926:	41 15       	cp	r20, r1
    2928:	51 05       	cpc	r21, r1
    292a:	61 05       	cpc	r22, r1
    292c:	71 05       	cpc	r23, r1
    292e:	09 f4       	brne	.+2      	; 0x2932 <qtm_ptc_init_acquisition_module+0x74>
    2930:	41 c0       	rjmp	.+130    	; 0x29b4 <qtm_ptc_init_acquisition_module+0xf6>
    2932:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <touch_seq_lib_state>
    2936:	6a 01       	movw	r12, r20
    2938:	7b 01       	movw	r14, r22
    293a:	cc 24       	eor	r12, r12
    293c:	ee 24       	eor	r14, r14
    293e:	ff 24       	eor	r15, r15
    2940:	db 01       	movw	r26, r22
    2942:	ca 01       	movw	r24, r20
    2944:	88 27       	eor	r24, r24
    2946:	99 27       	eor	r25, r25
    2948:	bb 27       	eor	r27, r27
    294a:	e1 11       	cpse	r30, r1
    294c:	15 c0       	rjmp	.+42     	; 0x2978 <qtm_ptc_init_acquisition_module+0xba>
    294e:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    2952:	30 93 f1 00 	sts	0x00F1, r19	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    2956:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
    295a:	cd 2c       	mov	r12, r13
    295c:	de 2c       	mov	r13, r14
    295e:	ef 2c       	mov	r14, r15
    2960:	ff 24       	eor	r15, r15
    2962:	c0 92 f5 00 	sts	0x00F5, r12	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
    2966:	cd 01       	movw	r24, r26
    2968:	aa 27       	eor	r26, r26
    296a:	bb 27       	eor	r27, r27
    296c:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <touch_seq_lib_state>
    2976:	1a c0       	rjmp	.+52     	; 0x29ac <qtm_ptc_init_acquisition_module+0xee>
    2978:	e0 91 f0 00 	lds	r30, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    297c:	2e 2b       	or	r18, r30
    297e:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    2982:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    2986:	23 2b       	or	r18, r19
    2988:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    298c:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
    2990:	42 2b       	or	r20, r18
    2992:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
    2996:	20 91 f5 00 	lds	r18, 0x00F5	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
    299a:	2d 29       	or	r18, r13
    299c:	20 93 f5 00 	sts	0x00F5, r18	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
    29a0:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
    29a4:	82 2f       	mov	r24, r18
    29a6:	8a 2b       	or	r24, r26
    29a8:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	03 c0       	rjmp	.+6      	; 0x29b6 <qtm_ptc_init_acquisition_module+0xf8>
    29b0:	8b e0       	ldi	r24, 0x0B	; 11
    29b2:	01 c0       	rjmp	.+2      	; 0x29b6 <qtm_ptc_init_acquisition_module+0xf8>
    29b4:	82 e0       	ldi	r24, 0x02	; 2
    29b6:	df 91       	pop	r29
    29b8:	cf 91       	pop	r28
    29ba:	ff 90       	pop	r15
    29bc:	ef 90       	pop	r14
    29be:	df 90       	pop	r13
    29c0:	cf 90       	pop	r12
    29c2:	bf 90       	pop	r11
    29c4:	af 90       	pop	r10
    29c6:	9f 90       	pop	r9
    29c8:	8f 90       	pop	r8
    29ca:	08 95       	ret

000029cc <qtm_ptc_qtlib_assign_signal_memory>:
    29cc:	00 97       	sbiw	r24, 0x00	; 0
    29ce:	31 f0       	breq	.+12     	; 0x29dc <qtm_ptc_qtlib_assign_signal_memory+0x10>
    29d0:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <qtm_raw_data_measurements_ptr+0x1>
    29d4:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <qtm_raw_data_measurements_ptr>
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	08 95       	ret
    29dc:	8b e0       	ldi	r24, 0x0B	; 11
    29de:	08 95       	ret

000029e0 <qtm_ptc_start_measurement_seq>:
    29e0:	cf 93       	push	r28
    29e2:	df 93       	push	r29
    29e4:	00 d0       	rcall	.+0      	; 0x29e6 <qtm_ptc_start_measurement_seq+0x6>
    29e6:	00 d0       	rcall	.+0      	; 0x29e8 <qtm_ptc_start_measurement_seq+0x8>
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
    29ec:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <max_conversion_cycles>
    29f0:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <max_conversion_cycles+0x1>
    29f4:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <max_conversion_cycles+0x2>
    29f8:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <max_conversion_cycles+0x3>
    29fc:	61 15       	cp	r22, r1
    29fe:	71 05       	cpc	r23, r1
    2a00:	09 f4       	brne	.+2      	; 0x2a04 <qtm_ptc_start_measurement_seq+0x24>
    2a02:	db c0       	rjmp	.+438    	; 0x2bba <qtm_ptc_start_measurement_seq+0x1da>
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <qtm_ptc_start_measurement_seq+0x2a>
    2a08:	d8 c0       	rjmp	.+432    	; 0x2bba <qtm_ptc_start_measurement_seq+0x1da>
    2a0a:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <touch_seq_lib_state>
    2a0e:	22 23       	and	r18, r18
    2a10:	09 f4       	brne	.+2      	; 0x2a14 <qtm_ptc_start_measurement_seq+0x34>
    2a12:	d5 c0       	rjmp	.+426    	; 0x2bbe <qtm_ptc_start_measurement_seq+0x1de>
    2a14:	24 30       	cpi	r18, 0x04	; 4
    2a16:	09 f0       	breq	.+2      	; 0x2a1a <qtm_ptc_start_measurement_seq+0x3a>
    2a18:	93 c0       	rjmp	.+294    	; 0x2b40 <qtm_ptc_start_measurement_seq+0x160>
    2a1a:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <ptc_eoc_ok_flag>
    2a1e:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    2a22:	80 ff       	sbrs	r24, 0
    2a24:	8b c0       	rjmp	.+278    	; 0x2b3c <qtm_ptc_start_measurement_seq+0x15c>
    2a26:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	a6 e0       	ldi	r26, 0x06	; 6
    2a2e:	b0 e0       	ldi	r27, 0x00	; 0
    2a30:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__umulhisi3>
    2a34:	60 93 a4 01 	sts	0x01A4, r22	; 0x8001a4 <max_conversion_cycles>
    2a38:	70 93 a5 01 	sts	0x01A5, r23	; 0x8001a5 <max_conversion_cycles+0x1>
    2a3c:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <max_conversion_cycles+0x2>
    2a40:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <max_conversion_cycles+0x3>
    2a44:	20 91 e3 00 	lds	r18, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    2a48:	2f 70       	andi	r18, 0x0F	; 15
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	82 0f       	add	r24, r18
    2a50:	91 1d       	adc	r25, r1
    2a52:	a1 1d       	adc	r26, r1
    2a54:	b1 1d       	adc	r27, r1
    2a56:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <max_conversion_cycles>
    2a5a:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <max_conversion_cycles+0x1>
    2a5e:	a0 93 a6 01 	sts	0x01A6, r26	; 0x8001a6 <max_conversion_cycles+0x2>
    2a62:	b0 93 a7 01 	sts	0x01A7, r27	; 0x8001a7 <max_conversion_cycles+0x3>
    2a66:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    2a6a:	27 70       	andi	r18, 0x07	; 7
    2a6c:	04 c0       	rjmp	.+8      	; 0x2a76 <qtm_ptc_start_measurement_seq+0x96>
    2a6e:	88 0f       	add	r24, r24
    2a70:	99 1f       	adc	r25, r25
    2a72:	aa 1f       	adc	r26, r26
    2a74:	bb 1f       	adc	r27, r27
    2a76:	2a 95       	dec	r18
    2a78:	d2 f7       	brpl	.-12     	; 0x2a6e <qtm_ptc_start_measurement_seq+0x8e>
    2a7a:	0e 96       	adiw	r24, 0x0e	; 14
    2a7c:	a1 1d       	adc	r26, r1
    2a7e:	b1 1d       	adc	r27, r1
    2a80:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <max_conversion_cycles>
    2a84:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <max_conversion_cycles+0x1>
    2a88:	a0 93 a6 01 	sts	0x01A6, r26	; 0x8001a6 <max_conversion_cycles+0x2>
    2a8c:	b0 93 a7 01 	sts	0x01A7, r27	; 0x8001a7 <max_conversion_cycles+0x3>
    2a90:	20 91 e1 00 	lds	r18, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    2a94:	23 70       	andi	r18, 0x03	; 3
    2a96:	04 c0       	rjmp	.+8      	; 0x2aa0 <qtm_ptc_start_measurement_seq+0xc0>
    2a98:	88 0f       	add	r24, r24
    2a9a:	99 1f       	adc	r25, r25
    2a9c:	aa 1f       	adc	r26, r26
    2a9e:	bb 1f       	adc	r27, r27
    2aa0:	2a 95       	dec	r18
    2aa2:	d2 f7       	brpl	.-12     	; 0x2a98 <qtm_ptc_start_measurement_seq+0xb8>
    2aa4:	22 e0       	ldi	r18, 0x02	; 2
    2aa6:	b6 95       	lsr	r27
    2aa8:	a7 95       	ror	r26
    2aaa:	97 95       	ror	r25
    2aac:	87 95       	ror	r24
    2aae:	2a 95       	dec	r18
    2ab0:	d1 f7       	brne	.-12     	; 0x2aa6 <qtm_ptc_start_measurement_seq+0xc6>
    2ab2:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <max_conversion_cycles>
    2ab6:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <max_conversion_cycles+0x1>
    2aba:	a0 93 a6 01 	sts	0x01A6, r26	; 0x8001a6 <max_conversion_cycles+0x2>
    2abe:	b0 93 a7 01 	sts	0x01A7, r27	; 0x8001a7 <max_conversion_cycles+0x3>
    2ac2:	19 82       	std	Y+1, r1	; 0x01
    2ac4:	1a 82       	std	Y+2, r1	; 0x02
    2ac6:	1b 82       	std	Y+3, r1	; 0x03
    2ac8:	1c 82       	std	Y+4, r1	; 0x04
    2aca:	21 e0       	ldi	r18, 0x01	; 1
    2acc:	49 81       	ldd	r20, Y+1	; 0x01
    2ace:	5a 81       	ldd	r21, Y+2	; 0x02
    2ad0:	6b 81       	ldd	r22, Y+3	; 0x03
    2ad2:	7c 81       	ldd	r23, Y+4	; 0x04
    2ad4:	48 17       	cp	r20, r24
    2ad6:	59 07       	cpc	r21, r25
    2ad8:	6a 07       	cpc	r22, r26
    2ada:	7b 07       	cpc	r23, r27
    2adc:	b0 f4       	brcc	.+44     	; 0x2b0a <qtm_ptc_start_measurement_seq+0x12a>
    2ade:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <ptc_eoc_ok_flag>
    2ae2:	33 23       	and	r19, r19
    2ae4:	29 f0       	breq	.+10     	; 0x2af0 <qtm_ptc_start_measurement_seq+0x110>
    2ae6:	89 83       	std	Y+1, r24	; 0x01
    2ae8:	9a 83       	std	Y+2, r25	; 0x02
    2aea:	ab 83       	std	Y+3, r26	; 0x03
    2aec:	bc 83       	std	Y+4, r27	; 0x04
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	49 81       	ldd	r20, Y+1	; 0x01
    2af2:	5a 81       	ldd	r21, Y+2	; 0x02
    2af4:	6b 81       	ldd	r22, Y+3	; 0x03
    2af6:	7c 81       	ldd	r23, Y+4	; 0x04
    2af8:	4f 5f       	subi	r20, 0xFF	; 255
    2afa:	5f 4f       	sbci	r21, 0xFF	; 255
    2afc:	6f 4f       	sbci	r22, 0xFF	; 255
    2afe:	7f 4f       	sbci	r23, 0xFF	; 255
    2b00:	49 83       	std	Y+1, r20	; 0x01
    2b02:	5a 83       	std	Y+2, r21	; 0x02
    2b04:	6b 83       	std	Y+3, r22	; 0x03
    2b06:	7c 83       	std	Y+4, r23	; 0x04
    2b08:	e1 cf       	rjmp	.-62     	; 0x2acc <qtm_ptc_start_measurement_seq+0xec>
    2b0a:	22 23       	and	r18, r18
    2b0c:	b9 f0       	breq	.+46     	; 0x2b3c <qtm_ptc_start_measurement_seq+0x15c>
    2b0e:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    2b12:	80 ff       	sbrs	r24, 0
    2b14:	13 c0       	rjmp	.+38     	; 0x2b3c <qtm_ptc_start_measurement_seq+0x15c>
    2b16:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    2b1a:	00 00       	nop
    2b1c:	82 e1       	ldi	r24, 0x12	; 18
    2b1e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    2b22:	00 00       	nop
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    2b2a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <ptc_lockups>
    2b2e:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <ptc_lockups+0x1>
    2b32:	01 96       	adiw	r24, 0x01	; 1
    2b34:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <ptc_lockups+0x1>
    2b38:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <ptc_lockups>
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	42 c0       	rjmp	.+132    	; 0x2bc4 <qtm_ptc_start_measurement_seq+0x1e4>
    2b40:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    2b44:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    2b48:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <ptc_seq_measure_complete_pointer+0x1>
    2b4c:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <ptc_seq_measure_complete_pointer>
    2b50:	dc 01       	movw	r26, r24
    2b52:	ed 91       	ld	r30, X+
    2b54:	fc 91       	ld	r31, X
    2b56:	82 81       	ldd	r24, Z+2	; 0x02
    2b58:	80 34       	cpi	r24, 0x40	; 64
    2b5a:	11 f4       	brne	.+4      	; 0x2b60 <qtm_ptc_start_measurement_seq+0x180>
    2b5c:	88 e0       	ldi	r24, 0x08	; 8
    2b5e:	03 c0       	rjmp	.+6      	; 0x2b66 <qtm_ptc_start_measurement_seq+0x186>
    2b60:	80 38       	cpi	r24, 0x80	; 128
    2b62:	79 f5       	brne	.+94     	; 0x2bc2 <qtm_ptc_start_measurement_seq+0x1e2>
    2b64:	8a e0       	ldi	r24, 0x0A	; 10
    2b66:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    2b6a:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <qtm_acquisition_control_working_set_ptr>
    2b6e:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <qtm_acquisition_control_working_set_ptr+0x1>
    2b72:	01 90       	ld	r0, Z+
    2b74:	f0 81       	ld	r31, Z
    2b76:	e0 2d       	mov	r30, r0
    2b78:	84 81       	ldd	r24, Z+4	; 0x04
    2b7a:	80 31       	cpi	r24, 0x10	; 16
    2b7c:	08 f0       	brcs	.+2      	; 0x2b80 <qtm_ptc_start_measurement_seq+0x1a0>
    2b7e:	80 e1       	ldi	r24, 0x10	; 16
    2b80:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	84 bb       	out	0x14, r24	; 20
    2b88:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7f8074>
    2b8c:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <current_measure_channel+0x1>
    2b90:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <current_measure_channel>
    2b94:	0e 94 04 12 	call	0x2408	; 0x2408 <select_next_channel_to_measure>
    2b98:	81 11       	cpse	r24, r1
    2b9a:	0b c0       	rjmp	.+22     	; 0x2bb2 <qtm_ptc_start_measurement_seq+0x1d2>
    2b9c:	84 e0       	ldi	r24, 0x04	; 4
    2b9e:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <touch_seq_lib_state>
    2ba2:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <current_measure_channel>
    2ba6:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <current_measure_channel+0x1>
    2baa:	0e 94 37 12 	call	0x246e	; 0x246e <qtm_measure_node>
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	09 c0       	rjmp	.+18     	; 0x2bc4 <qtm_ptc_start_measurement_seq+0x1e4>
    2bb2:	82 e0       	ldi	r24, 0x02	; 2
    2bb4:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <touch_seq_lib_state>
    2bb8:	05 c0       	rjmp	.+10     	; 0x2bc4 <qtm_ptc_start_measurement_seq+0x1e4>
    2bba:	8b e0       	ldi	r24, 0x0B	; 11
    2bbc:	03 c0       	rjmp	.+6      	; 0x2bc4 <qtm_ptc_start_measurement_seq+0x1e4>
    2bbe:	83 e0       	ldi	r24, 0x03	; 3
    2bc0:	01 c0       	rjmp	.+2      	; 0x2bc4 <qtm_ptc_start_measurement_seq+0x1e4>
    2bc2:	82 e0       	ldi	r24, 0x02	; 2
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	df 91       	pop	r29
    2bce:	cf 91       	pop	r28
    2bd0:	08 95       	ret

00002bd2 <qtm_enable_sensor_node>:
    2bd2:	00 97       	sbiw	r24, 0x00	; 0
    2bd4:	c9 f0       	breq	.+50     	; 0x2c08 <qtm_enable_sensor_node+0x36>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	ed 91       	ld	r30, X+
    2bda:	fc 91       	ld	r31, X
    2bdc:	11 97       	sbiw	r26, 0x01	; 1
    2bde:	20 81       	ld	r18, Z
    2be0:	31 81       	ldd	r19, Z+1	; 0x01
    2be2:	26 17       	cp	r18, r22
    2be4:	37 07       	cpc	r19, r23
    2be6:	90 f0       	brcs	.+36     	; 0x2c0c <qtm_enable_sensor_node+0x3a>
    2be8:	45 e0       	ldi	r20, 0x05	; 5
    2bea:	46 9f       	mul	r20, r22
    2bec:	90 01       	movw	r18, r0
    2bee:	47 9f       	mul	r20, r23
    2bf0:	30 0d       	add	r19, r0
    2bf2:	11 24       	eor	r1, r1
    2bf4:	14 96       	adiw	r26, 0x04	; 4
    2bf6:	ed 91       	ld	r30, X+
    2bf8:	fc 91       	ld	r31, X
    2bfa:	15 97       	sbiw	r26, 0x05	; 5
    2bfc:	e2 0f       	add	r30, r18
    2bfe:	f3 1f       	adc	r31, r19
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	80 83       	st	Z, r24
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	08 95       	ret
    2c08:	8b e0       	ldi	r24, 0x0B	; 11
    2c0a:	08 95       	ret
    2c0c:	82 e0       	ldi	r24, 0x02	; 2
    2c0e:	08 95       	ret

00002c10 <qtm_calibrate_sensor_node>:
    2c10:	00 97       	sbiw	r24, 0x00	; 0
    2c12:	d1 f1       	breq	.+116    	; 0x2c88 <qtm_calibrate_sensor_node+0x78>
    2c14:	dc 01       	movw	r26, r24
    2c16:	ed 91       	ld	r30, X+
    2c18:	fc 91       	ld	r31, X
    2c1a:	11 97       	sbiw	r26, 0x01	; 1
    2c1c:	20 81       	ld	r18, Z
    2c1e:	31 81       	ldd	r19, Z+1	; 0x01
    2c20:	26 17       	cp	r18, r22
    2c22:	37 07       	cpc	r19, r23
    2c24:	98 f1       	brcs	.+102    	; 0x2c8c <qtm_calibrate_sensor_node+0x7c>
    2c26:	22 81       	ldd	r18, Z+2	; 0x02
    2c28:	14 96       	adiw	r26, 0x04	; 4
    2c2a:	ed 91       	ld	r30, X+
    2c2c:	fc 91       	ld	r31, X
    2c2e:	15 97       	sbiw	r26, 0x05	; 5
    2c30:	20 34       	cpi	r18, 0x40	; 64
    2c32:	59 f4       	brne	.+22     	; 0x2c4a <qtm_calibrate_sensor_node+0x3a>
    2c34:	85 e0       	ldi	r24, 0x05	; 5
    2c36:	86 9f       	mul	r24, r22
    2c38:	d0 01       	movw	r26, r0
    2c3a:	87 9f       	mul	r24, r23
    2c3c:	b0 0d       	add	r27, r0
    2c3e:	11 24       	eor	r1, r1
    2c40:	ae 0f       	add	r26, r30
    2c42:	bf 1f       	adc	r27, r31
    2c44:	84 e3       	ldi	r24, 0x34	; 52
    2c46:	92 e0       	ldi	r25, 0x02	; 2
    2c48:	0c c0       	rjmp	.+24     	; 0x2c62 <qtm_calibrate_sensor_node+0x52>
    2c4a:	20 38       	cpi	r18, 0x80	; 128
    2c4c:	81 f4       	brne	.+32     	; 0x2c6e <qtm_calibrate_sensor_node+0x5e>
    2c4e:	85 e0       	ldi	r24, 0x05	; 5
    2c50:	86 9f       	mul	r24, r22
    2c52:	d0 01       	movw	r26, r0
    2c54:	87 9f       	mul	r24, r23
    2c56:	b0 0d       	add	r27, r0
    2c58:	11 24       	eor	r1, r1
    2c5a:	ae 0f       	add	r26, r30
    2c5c:	bf 1f       	adc	r27, r31
    2c5e:	87 e6       	ldi	r24, 0x67	; 103
    2c60:	95 e0       	ldi	r25, 0x05	; 5
    2c62:	14 96       	adiw	r26, 0x04	; 4
    2c64:	9c 93       	st	X, r25
    2c66:	8e 93       	st	-X, r24
    2c68:	13 97       	sbiw	r26, 0x03	; 3
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	01 c0       	rjmp	.+2      	; 0x2c70 <qtm_calibrate_sensor_node+0x60>
    2c6e:	82 e0       	ldi	r24, 0x02	; 2
    2c70:	95 e0       	ldi	r25, 0x05	; 5
    2c72:	96 9f       	mul	r25, r22
    2c74:	90 01       	movw	r18, r0
    2c76:	97 9f       	mul	r25, r23
    2c78:	30 0d       	add	r19, r0
    2c7a:	11 24       	eor	r1, r1
    2c7c:	e2 0f       	add	r30, r18
    2c7e:	f3 1f       	adc	r31, r19
    2c80:	90 81       	ld	r25, Z
    2c82:	92 60       	ori	r25, 0x02	; 2
    2c84:	90 83       	st	Z, r25
    2c86:	08 95       	ret
    2c88:	8b e0       	ldi	r24, 0x0B	; 11
    2c8a:	08 95       	ret
    2c8c:	82 e0       	ldi	r24, 0x02	; 2
    2c8e:	08 95       	ret

00002c90 <qtm_m328pb_ptc_handler_eoc>:
    2c90:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <ptc_eoc_ok_flag>
    2c9a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
    2c9e:	60 91 ef 00 	lds	r22, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
    2ca2:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <current_measure_channel>
    2ca6:	30 91 a2 01 	lds	r19, 0x01A2	; 0x8001a2 <current_measure_channel+0x1>
    2caa:	a9 01       	movw	r20, r18
    2cac:	44 0f       	add	r20, r20
    2cae:	55 1f       	adc	r21, r21
    2cb0:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <qtm_raw_data_measurements_ptr>
    2cb4:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <qtm_raw_data_measurements_ptr+0x1>
    2cb8:	e4 0f       	add	r30, r20
    2cba:	f5 1f       	adc	r31, r21
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	96 2b       	or	r25, r22
    2cc0:	91 83       	std	Z+1, r25	; 0x01
    2cc2:	80 83       	st	Z, r24
    2cc4:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <good_eocs>
    2cc8:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <good_eocs+0x1>
    2ccc:	01 96       	adiw	r24, 0x01	; 1
    2cce:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <good_eocs+0x1>
    2cd2:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <good_eocs>
    2cd6:	89 2b       	or	r24, r25
    2cd8:	21 f4       	brne	.+8      	; 0x2ce2 <qtm_m328pb_ptc_handler_eoc+0x52>
    2cda:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <ptc_lockups+0x1>
    2cde:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <ptc_lockups>
    2ce2:	2f 5f       	subi	r18, 0xFF	; 255
    2ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce6:	30 93 a2 01 	sts	0x01A2, r19	; 0x8001a2 <current_measure_channel+0x1>
    2cea:	20 93 a1 01 	sts	0x01A1, r18	; 0x8001a1 <current_measure_channel>
    2cee:	0e 94 04 12 	call	0x2408	; 0x2408 <select_next_channel_to_measure>
    2cf2:	81 11       	cpse	r24, r1
    2cf4:	09 c0       	rjmp	.+18     	; 0x2d08 <qtm_m328pb_ptc_handler_eoc+0x78>
    2cf6:	84 e0       	ldi	r24, 0x04	; 4
    2cf8:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <touch_seq_lib_state>
    2cfc:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <current_measure_channel>
    2d00:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <current_measure_channel+0x1>
    2d04:	0c 94 37 12 	jmp	0x246e	; 0x246e <qtm_measure_node>
    2d08:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <ptc_seq_measure_complete_pointer>
    2d0c:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <ptc_seq_measure_complete_pointer+0x1>
    2d10:	09 94       	ijmp

00002d12 <__divmodhi4>:
    2d12:	97 fb       	bst	r25, 7
    2d14:	07 2e       	mov	r0, r23
    2d16:	16 f4       	brtc	.+4      	; 0x2d1c <__divmodhi4+0xa>
    2d18:	00 94       	com	r0
    2d1a:	07 d0       	rcall	.+14     	; 0x2d2a <__divmodhi4_neg1>
    2d1c:	77 fd       	sbrc	r23, 7
    2d1e:	09 d0       	rcall	.+18     	; 0x2d32 <__divmodhi4_neg2>
    2d20:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__udivmodhi4>
    2d24:	07 fc       	sbrc	r0, 7
    2d26:	05 d0       	rcall	.+10     	; 0x2d32 <__divmodhi4_neg2>
    2d28:	3e f4       	brtc	.+14     	; 0x2d38 <__divmodhi4_exit>

00002d2a <__divmodhi4_neg1>:
    2d2a:	90 95       	com	r25
    2d2c:	81 95       	neg	r24
    2d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d30:	08 95       	ret

00002d32 <__divmodhi4_neg2>:
    2d32:	70 95       	com	r23
    2d34:	61 95       	neg	r22
    2d36:	7f 4f       	sbci	r23, 0xFF	; 255

00002d38 <__divmodhi4_exit>:
    2d38:	08 95       	ret

00002d3a <__tablejump2__>:
    2d3a:	ee 0f       	add	r30, r30
    2d3c:	ff 1f       	adc	r31, r31
    2d3e:	05 90       	lpm	r0, Z+
    2d40:	f4 91       	lpm	r31, Z
    2d42:	e0 2d       	mov	r30, r0
    2d44:	09 94       	ijmp

00002d46 <__umulhisi3>:
    2d46:	a2 9f       	mul	r26, r18
    2d48:	b0 01       	movw	r22, r0
    2d4a:	b3 9f       	mul	r27, r19
    2d4c:	c0 01       	movw	r24, r0
    2d4e:	a3 9f       	mul	r26, r19
    2d50:	70 0d       	add	r23, r0
    2d52:	81 1d       	adc	r24, r1
    2d54:	11 24       	eor	r1, r1
    2d56:	91 1d       	adc	r25, r1
    2d58:	b2 9f       	mul	r27, r18
    2d5a:	70 0d       	add	r23, r0
    2d5c:	81 1d       	adc	r24, r1
    2d5e:	11 24       	eor	r1, r1
    2d60:	91 1d       	adc	r25, r1
    2d62:	08 95       	ret

00002d64 <__udivmodhi4>:
    2d64:	aa 1b       	sub	r26, r26
    2d66:	bb 1b       	sub	r27, r27
    2d68:	51 e1       	ldi	r21, 0x11	; 17
    2d6a:	07 c0       	rjmp	.+14     	; 0x2d7a <__udivmodhi4_ep>

00002d6c <__udivmodhi4_loop>:
    2d6c:	aa 1f       	adc	r26, r26
    2d6e:	bb 1f       	adc	r27, r27
    2d70:	a6 17       	cp	r26, r22
    2d72:	b7 07       	cpc	r27, r23
    2d74:	10 f0       	brcs	.+4      	; 0x2d7a <__udivmodhi4_ep>
    2d76:	a6 1b       	sub	r26, r22
    2d78:	b7 0b       	sbc	r27, r23

00002d7a <__udivmodhi4_ep>:
    2d7a:	88 1f       	adc	r24, r24
    2d7c:	99 1f       	adc	r25, r25
    2d7e:	5a 95       	dec	r21
    2d80:	a9 f7       	brne	.-22     	; 0x2d6c <__udivmodhi4_loop>
    2d82:	80 95       	com	r24
    2d84:	90 95       	com	r25
    2d86:	bc 01       	movw	r22, r24
    2d88:	cd 01       	movw	r24, r26
    2d8a:	08 95       	ret

00002d8c <_exit>:
    2d8c:	f8 94       	cli

00002d8e <__stop_program>:
    2d8e:	ff cf       	rjmp	.-2      	; 0x2d8e <__stop_program>
